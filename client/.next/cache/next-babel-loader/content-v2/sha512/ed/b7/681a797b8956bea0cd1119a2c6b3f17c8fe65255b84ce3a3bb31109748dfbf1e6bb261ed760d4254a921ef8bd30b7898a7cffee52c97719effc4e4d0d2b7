{"ast":null,"code":"import { useCallback, useState, useEffect, useRef } from 'react';\n\nconst useUloadingImg = (input, cursorPosition, setInput) => {\n  const uploadStateInit = {\n    process: 0,\n    error: ''\n  };\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: uploadState,\n    1: setUploadState\n  } = useState(uploadStateInit);\n  const isUploading = useRef(false);\n  isUploading.current = uploadState.process !== 0;\n  useEffect(() => {\n    if (!isUploading.current) return;\n    const currentCursor = cursorPosition[0];\n    const inputInsertedUploading = `${input.slice(0, currentCursor)}![Loading...]()${input.slice(currentCursor)}`;\n    setInput(inputInsertedUploading);\n  }, [isUploading.current]);\n  const insertImageMarkdown = useCallback(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n\n    if (uploadState.error) {\n      alert('이미지 업로드 실패');\n      const previousInput = `${input.slice(0, cursorPosition[0])}${input.slice(cursorPosition[0] + 15)}`;\n      setInput(previousInput);\n      setImageUrl('');\n      setUploadState(uploadStateInit);\n      return;\n    }\n\n    if (isNotVaildUrl) return;\n    const inputWithNewImg = `${input.slice(0, cursorPosition[0])}\\n![](${imageUrl})\\n${input.slice(cursorPosition[0] + 15)}`;\n    setInput(inputWithNewImg);\n    setImageUrl('');\n  }, [imageUrl, uploadState]);\n  useEffect(() => {\n    insertImageMarkdown();\n  }, [imageUrl, uploadState]);\n  return {\n    uploadState,\n    setImageUrl,\n    setUploadState\n  };\n};\n\nexport default useUloadingImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useUploadingImg.tsx"],"names":["useCallback","useState","useEffect","useRef","useUloadingImg","input","cursorPosition","setInput","uploadStateInit","process","error","imageUrl","setImageUrl","uploadState","setUploadState","isUploading","current","currentCursor","inputInsertedUploading","slice","insertImageMarkdown","isNotVaildUrl","undefined","length","alert","previousInput","inputWithNewImg"],"mappings":"AAAA,SAAgBA,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,OAAhE;;AAYA,MAAMC,cAAiC,GAAG,CAACC,KAAD,EAAQC,cAAR,EAAwBC,QAAxB,KAAqC;AAC7E,QAAMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAxB;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAS,EAAT,CAAxC;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAeO,eAAf,CAA9C;AACA,QAAMO,WAAW,GAAGZ,MAAM,CAAC,KAAD,CAA1B;AAEAY,EAAAA,WAAW,CAACC,OAAZ,GAAsBH,WAAW,CAACJ,OAAZ,KAAwB,CAA9C;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACa,WAAW,CAACC,OAAjB,EAA0B;AAC1B,UAAMC,aAAa,GAAGX,cAAc,CAAC,CAAD,CAApC;AACA,UAAMY,sBAAsB,GAAI,GAAEb,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeF,aAAf,CAA8B,kBAAiBZ,KAAK,CAACc,KAAN,CAAYF,aAAZ,CAA2B,EAA5G;AACAV,IAAAA,QAAQ,CAACW,sBAAD,CAAR;AACD,GALQ,EAKN,CAACH,WAAW,CAACC,OAAb,CALM,CAAT;AAOA,QAAMI,mBAAmB,GAAGpB,WAAW,CAAC,MAAM;AAC5C,UAAMqB,aAAa,GAAGV,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKW,SAAlC,IAA+CX,QAAQ,CAACY,MAAT,KAAoB,CAAzF;;AACA,QAAIV,WAAW,CAACH,KAAhB,EAAuB;AACrBc,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,YAAMC,aAAa,GAAI,GAAEpB,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeb,cAAc,CAAC,CAAD,CAA7B,CAAkC,GAAED,KAAK,CAACc,KAAN,CAAYb,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAhC,CAAoC,EAAjG;AACAC,MAAAA,QAAQ,CAACkB,aAAD,CAAR;AACAb,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,cAAc,CAACN,eAAD,CAAd;AACA;AACD;;AACD,QAAIa,aAAJ,EAAmB;AACnB,UAAMK,eAAe,GAAI,GAAErB,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeb,cAAc,CAAC,CAAD,CAA7B,CAAkC,SAAQK,QAAS,MAAKN,KAAK,CAACc,KAAN,CACjFb,cAAc,CAAC,CAAD,CAAd,GAAoB,EAD6D,CAEjF,EAFF;AAGAC,IAAAA,QAAQ,CAACmB,eAAD,CAAR;AACAd,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAhBsC,EAgBpC,CAACD,QAAD,EAAWE,WAAX,CAhBoC,CAAvC;AAkBAX,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACT,QAAD,EAAWE,WAAX,CAFM,CAAT;AAIA,SAAO;AAAEA,IAAAA,WAAF;AAAeD,IAAAA,WAAf;AAA4BE,IAAAA;AAA5B,GAAP;AACD,CArCD;;AAuCA,eAAeV,cAAf","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { IUploadState } from '@interfaces';\nimport { SetStateString } from '@types';\n\ninterface IUploadingImgHook {\n  (input: string, cursorPosition: number[], setInput: SetStateString): {\n    setImageUrl: SetStateString;\n    setUploadState: React.Dispatch<React.SetStateAction<IUploadState>>;\n    uploadState: IUploadState;\n  };\n}\n\nconst useUloadingImg: IUploadingImgHook = (input, cursorPosition, setInput) => {\n  const uploadStateInit = { process: 0, error: '' };\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [uploadState, setUploadState] = useState<IUploadState>(uploadStateInit);\n  const isUploading = useRef(false);\n\n  isUploading.current = uploadState.process !== 0;\n  useEffect(() => {\n    if (!isUploading.current) return;\n    const currentCursor = cursorPosition[0];\n    const inputInsertedUploading = `${input.slice(0, currentCursor)}![Loading...]()${input.slice(currentCursor)}`;\n    setInput(inputInsertedUploading);\n  }, [isUploading.current]);\n\n  const insertImageMarkdown = useCallback(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n    if (uploadState.error) {\n      alert('이미지 업로드 실패');\n      const previousInput = `${input.slice(0, cursorPosition[0])}${input.slice(cursorPosition[0] + 15)}`;\n      setInput(previousInput);\n      setImageUrl('');\n      setUploadState(uploadStateInit);\n      return;\n    }\n    if (isNotVaildUrl) return;\n    const inputWithNewImg = `${input.slice(0, cursorPosition[0])}\\n![](${imageUrl})\\n${input.slice(\n      cursorPosition[0] + 15,\n    )}`;\n    setInput(inputWithNewImg);\n    setImageUrl('');\n  }, [imageUrl, uploadState]);\n\n  useEffect(() => {\n    insertImageMarkdown();\n  }, [imageUrl, uploadState]);\n\n  return { uploadState, setImageUrl, setUploadState };\n};\n\nexport default useUloadingImg;\n"]},"metadata":{},"sourceType":"module"}