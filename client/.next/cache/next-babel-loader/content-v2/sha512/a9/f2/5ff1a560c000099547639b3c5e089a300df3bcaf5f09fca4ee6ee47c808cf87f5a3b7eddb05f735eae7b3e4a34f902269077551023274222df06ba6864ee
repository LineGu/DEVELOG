{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/users/[id].tsx\";\nimport React from 'react';\nimport { sampleUserData } from '../../utils/sample-data';\nimport Layout from '../../components/Layout';\nimport ListDetail from '../../components/ListDetail';\n\nconst StaticPropsDetail = ({\n  item,\n  errors\n}) => {\n  if (errors) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), \" \", errors]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: `${item ? item.name : 'User Detail'} | Next.js + TypeScript Example`,\n    children: item && /*#__PURE__*/_jsxDEV(ListDetail, {\n      item: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\nexport default StaticPropsDetail;\nexport const getStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map(user => ({\n    params: {\n      id: user.id.toString()\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  try {\n    const id = params === null || params === void 0 ? void 0 : params.id;\n    const item = sampleUserData.find(data => data.id === Number(id)); // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n\n    return {\n      props: {\n        item\n      }\n    };\n  } catch (err) {\n    return {\n      props: {\n        errors: err.message\n      }\n    };\n  }\n};","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/users/[id].tsx"],"names":["React","sampleUserData","Layout","ListDetail","StaticPropsDetail","item","errors","color","name","getStaticPaths","paths","map","user","params","id","toString","fallback","getStaticProps","find","data","Number","props","err","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAoC,OAApC;AAGA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AAOA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA2C;AACnE,MAAIA,MAAJ,EAAY;AACV,wBACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA,6BACE;AAAA,gCACE;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OACgDD,MADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAED,sBACE,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAG,GAAED,IAAI,GAAGA,IAAI,CAACG,IAAR,GAAe,aAAc,iCAAnD;AAAA,cACGH,IAAI,iBAAI,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADX;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhBD;;AAkBA,eAAeD,iBAAf;AAEA,OAAO,MAAMK,cAA8B,GAAG,YAAY;AACxD;AACA,QAAMC,KAAK,GAAGT,cAAc,CAACU,GAAf,CAAoBC,IAAD,KAAW;AAC1CC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAEF,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAN;AADkC,GAAX,CAAnB,CAAd,CAFwD,CAMxD;AACA;;AACA,SAAO;AAAEL,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CATM,C,CAWP;AACA;AACA;;AACA,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAEJ,EAAAA;AAAF,CAAP,KAAsB;AAClE,MAAI;AACF,UAAMC,EAAE,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEC,EAAnB;AACA,UAAMT,IAAI,GAAGJ,cAAc,CAACiB,IAAf,CAAqBC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYM,MAAM,CAACN,EAAD,CAAhD,CAAb,CAFE,CAGF;AACA;;AACA,WAAO;AAAEO,MAAAA,KAAK,EAAE;AAAEhB,QAAAA;AAAF;AAAT,KAAP;AACD,GAND,CAME,OAAOiB,GAAP,EAAY;AACZ,WAAO;AAAED,MAAAA,KAAK,EAAE;AAAEf,QAAAA,MAAM,EAAEgB,GAAG,CAACC;AAAd;AAAT,KAAP;AACD;AACF,CAVM","sourcesContent":["import React, { ReactElement } from 'react';\nimport { GetStaticProps, GetStaticPaths } from 'next';\nimport { User } from '../../interfaces';\nimport { sampleUserData } from '../../utils/sample-data';\nimport Layout from '../../components/Layout';\nimport ListDetail from '../../components/ListDetail';\n\ntype Props = {\n  item?: User;\n  errors?: string;\n};\n\nconst StaticPropsDetail = ({ item, errors }: Props): ReactElement => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: 'red' }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title={`${item ? item.name : 'User Detail'} | Next.js + TypeScript Example`}>\n      {item && <ListDetail item={item} />}\n    </Layout>\n  );\n};\n\nexport default StaticPropsDetail;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map((user) => ({\n    params: { id: user.id.toString() },\n  }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id;\n    const item = sampleUserData.find((data) => data.id === Number(id));\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { item } };\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}