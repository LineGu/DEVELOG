{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\n\nvar useUploadImg = /*#__PURE__*/function () {\n  var _s = $RefreshSig$();\n\n  var _ref = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n    var _useState, uploadProgress, setUploadProgress, isUploadingState, uploadInfo, isExcessSize, getUploadProgress, imgData, postConfig, response, imgLink;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            _useState = useState(0), uploadProgress = _useState[0], setUploadProgress = _useState[1];\n            isUploadingState = useRef(false);\n            uploadInfo = {\n              data: '',\n              process: isUploadingState.current ? uploadProgress : 0,\n              error: ''\n            };\n            isExcessSize = file.size > 5000000;\n\n            if (!isUploadingState.current) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", uploadInfo);\n\n          case 7:\n            getUploadProgress = function getUploadProgress(ProgressEvent) {\n              var progress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100);\n              setUploadProgress(progress);\n            };\n\n            if (!(file && isExcessSize)) {\n              _context.next = 11;\n              break;\n            }\n\n            uploadInfo.error = 'EXCESS';\n            return _context.abrupt(\"return\", uploadInfo);\n\n          case 11:\n            imgData = new FormData();\n            imgData.append('image', file);\n            _context.prev = 13;\n            postConfig = {\n              headers: headerOption,\n              onUploadProgress: function onUploadProgress(ProgressEvent) {\n                return getUploadProgress(ProgressEvent);\n              }\n            };\n            isUploadingState.current = true;\n            _context.next = 18;\n            return axios.post(url.IMGUR, imgData, postConfig);\n\n          case 18:\n            response = _context.sent;\n            imgLink = response.data.data.link;\n            uploadInfo.data = imgLink;\n            isUploadingState.current = false;\n            return _context.abrupt(\"return\", uploadInfo);\n\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](13);\n            uploadInfo.error = _context.t0;\n            return _context.abrupt(\"return\", uploadInfo);\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[13, 25]]);\n  }), \"7ISGeaZgCdhJ5HHT6G/N9fzxe+E=\"));\n\n  return function useUploadImg(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default useUploadImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useUploadImg.ts"],"names":["useState","useRef","axios","headerOption","url","useUploadImg","file","uploadProgress","setUploadProgress","isUploadingState","uploadInfo","data","process","current","error","isExcessSize","size","getUploadProgress","ProgressEvent","progress","Math","round","loaded","total","imgData","FormData","append","postConfig","headers","onUploadProgress","post","IMGUR","response","imgLink","link"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAQA,IAAMC,YAAY;AAAA;;AAAA,yEAAG,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,wBACyBN,QAAQ,CAAS,CAAT,CADjC,EACZO,cADY,iBACIC,iBADJ;AAEbC,YAAAA,gBAFa,GAEMR,MAAM,CAAC,KAAD,CAFZ;AAGbS,YAAAA,UAHa,GAGA;AACjBC,cAAAA,IAAI,EAAE,EADW;AAEjBC,cAAAA,OAAO,EAAEH,gBAAgB,CAACI,OAAjB,GAA2BN,cAA3B,GAA4C,CAFpC;AAGjBO,cAAAA,KAAK,EAAE;AAHU,aAHA;AAQbC,YAAAA,YARa,GAQET,IAAI,CAACU,IAAL,GAAY,OARd;;AAAA,iBASfP,gBAAgB,CAACI,OATF;AAAA;AAAA;AAAA;;AAAA,6CASkBH,UATlB;;AAAA;AAWbO,YAAAA,iBAXa,GAWO,SAApBA,iBAAoB,CAACC,aAAD,EAAkC;AAC1D,kBAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACK,KAAtC,GAA+C,GAA1D,CAAjB;AACAf,cAAAA,iBAAiB,CAACW,QAAD,CAAjB;AACD,aAdkB;;AAAA,kBAgBfb,IAAI,IAAIS,YAhBO;AAAA;AAAA;AAAA;;AAiBjBL,YAAAA,UAAU,CAACI,KAAX,GAAmB,QAAnB;AAjBiB,6CAkBVJ,UAlBU;;AAAA;AAqBbc,YAAAA,OArBa,GAqBH,IAAIC,QAAJ,EArBG;AAsBnBD,YAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBpB,IAAxB;AAtBmB;AAyBXqB,YAAAA,UAzBW,GAyBE;AACjBC,cAAAA,OAAO,EAAEzB,YADQ;AAEjB0B,cAAAA,gBAAgB,EAAE,0BAACX,aAAD;AAAA,uBAAkCD,iBAAiB,CAACC,aAAD,CAAnD;AAAA;AAFD,aAzBF;AA6BjBT,YAAAA,gBAAgB,CAACI,OAAjB,GAA2B,IAA3B;AA7BiB;AAAA,mBA8BMX,KAAK,CAAC4B,IAAN,CAAW1B,GAAG,CAAC2B,KAAf,EAAsBP,OAAtB,EAA+BG,UAA/B,CA9BN;;AAAA;AA8BXK,YAAAA,QA9BW;AA+BXC,YAAAA,OA/BW,GA+BDD,QAAQ,CAACrB,IAAT,CAAcA,IAAd,CAAmBuB,IA/BlB;AAgCjBxB,YAAAA,UAAU,CAACC,IAAX,GAAkBsB,OAAlB;AACAxB,YAAAA,gBAAgB,CAACI,OAAjB,GAA2B,KAA3B;AAjCiB,6CAkCVH,UAlCU;;AAAA;AAAA;AAAA;AAoCjBA,YAAAA,UAAU,CAACI,KAAX;AApCiB,6CAqCVJ,UArCU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZL,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAyCA,eAAeA,YAAf","sourcesContent":["import { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\n\ninterface IuploadInfo {\n  data: string;\n  process: number;\n  error: string;\n}\n\nconst useUploadImg = async (file: File): Promise<IuploadInfo> => {\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const isUploadingState = useRef(false);\n  const uploadInfo = {\n    data: '',\n    process: isUploadingState.current ? uploadProgress : 0,\n    error: '',\n  };\n  const isExcessSize = file.size > 5000000;\n  if (isUploadingState.current) return uploadInfo;\n\n  const getUploadProgress = (ProgressEvent: ProgressEvent) => {\n    const progress = Math.round((ProgressEvent.loaded / ProgressEvent.total) * 100);\n    setUploadProgress(progress);\n  };\n\n  if (file && isExcessSize) {\n    uploadInfo.error = 'EXCESS';\n    return uploadInfo;\n  }\n\n  const imgData = new FormData();\n  imgData.append('image', file);\n\n  try {\n    const postConfig = {\n      headers: headerOption,\n      onUploadProgress: (ProgressEvent: ProgressEvent) => getUploadProgress(ProgressEvent),\n    };\n    isUploadingState.current = true;\n    const response = await axios.post(url.IMGUR, imgData, postConfig);\n    const imgLink = response.data.data.link;\n    uploadInfo.data = imgLink;\n    isUploadingState.current = false;\n    return uploadInfo;\n  } catch (err) {\n    uploadInfo.error = err;\n    return uploadInfo;\n  }\n};\n\nexport default useUploadImg;\n"]},"metadata":{},"sourceType":"module"}