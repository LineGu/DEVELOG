{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { URL } from '@construction/url';\nimport { headerOption } from '@config/headerForImgur';\nimport Editor from './Editor';\nexport default class ImgEditor extends Editor {\n  constructor(editType) {\n    super();\n\n    _defineProperty(this, \"insertionText\", void 0);\n\n    _defineProperty(this, \"maxSize\", void 0);\n\n    _defineProperty(this, \"uploadingState\", void 0);\n\n    _defineProperty(this, \"positionToMove\", void 0);\n\n    _defineProperty(this, \"editInput\", (input, cursorPosition) => {\n      const currentPositon = cursorPosition[0];\n      const updatedText = this.insertText(this.insertionText, input, currentPositon);\n      const [firstPoint, secondPoint] = this.positionToMove;\n      const cursorToGo = [firstPoint + currentPositon, secondPoint + currentPositon];\n      return {\n        updatedText,\n        cursorToGo\n      };\n    });\n\n    _defineProperty(this, \"setImgText\", url => {\n      this.setImgString(url);\n      this.insertionText = this.stringToInsert.img;\n    });\n\n    _defineProperty(this, \"getUploadProgress\", (ProgressEvent, setUploadState) => {\n      const uploadingProgress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100);\n      setUploadState({\n        progress: uploadingProgress,\n        error: ''\n      });\n    });\n\n    _defineProperty(this, \"uploadImg\", async (file, setUploadState) => {\n      const isExcessSize = file.size > this.maxSize;\n      const isValidFile = file && isExcessSize;\n      if (!isValidFile) this.uploadingState = {\n        progress: 0,\n        error: 'NOT_VAILD_FILE'\n      };\n      const imgData = new FormData();\n      imgData.append('image', file);\n\n      try {\n        const postConfig = {\n          headers: headerOption,\n          onUploadProgress: ProgressEvent => this.getUploadProgress(ProgressEvent, setUploadState)\n        };\n        const response = await axios.post(URL.IMGUR, imgData, postConfig);\n        const imgUrl = response.data.data.link;\n        this.setImgText(imgUrl);\n      } catch (error) {\n        this.uploadingState = {\n          progress: 0,\n          error\n        };\n      }\n    });\n\n    this.insertionText = this.stringToInsert[editType];\n    this.maxSize = 5000000;\n    this.uploadingState = {\n      progress: 0,\n      error: ''\n    };\n    this.positionToMove = [3, 3];\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/ImgEditor.ts"],"names":["axios","URL","headerOption","Editor","ImgEditor","constructor","editType","input","cursorPosition","currentPositon","updatedText","insertText","insertionText","firstPoint","secondPoint","positionToMove","cursorToGo","url","setImgString","stringToInsert","img","ProgressEvent","setUploadState","uploadingProgress","Math","round","loaded","total","progress","error","file","isExcessSize","size","maxSize","isValidFile","uploadingState","imgData","FormData","append","postConfig","headers","onUploadProgress","getUploadProgress","response","post","IMGUR","imgUrl","data","link","setImgText"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,SAAN,SAAwBD,MAAxB,CAA+B;AASrCE,EAAAA,WAAP,CAAmBC,QAAnB,EAAqC;AACnC;;AADmC;;AAAA;;AAAA;;AAAA;;AAAA,uCAQlB,CAACC,KAAD,EAAgBC,cAAhB,KAA4F;AAC7G,YAAMC,cAAc,GAAGD,cAAc,CAAC,CAAD,CAArC;AACA,YAAME,WAAW,GAAG,KAAKC,UAAL,CAAgB,KAAKC,aAArB,EAAoCL,KAApC,EAA2CE,cAA3C,CAApB;AACA,YAAM,CAACI,UAAD,EAAaC,WAAb,IAA4B,KAAKC,cAAvC;AACA,YAAMC,UAAU,GAAG,CAACH,UAAU,GAAGJ,cAAd,EAA8BK,WAAW,GAAGL,cAA5C,CAAnB;AACA,aAAO;AAAEC,QAAAA,WAAF;AAAeM,QAAAA;AAAf,OAAP;AACD,KAdoC;;AAAA,wCAgBhBC,GAAD,IAAuB;AACzC,WAAKC,YAAL,CAAkBD,GAAlB;AACA,WAAKL,aAAL,GAAqB,KAAKO,cAAL,CAAoBC,GAAzC;AACD,KAnBoC;;AAAA,+CAqBV,CAACC,aAAD,EAA+BC,cAA/B,KAAyE;AAClG,YAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAYJ,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACM,KAAtC,GAA+C,GAA1D,CAA1B;AACAL,MAAAA,cAAc,CAAC;AAAEM,QAAAA,QAAQ,EAAEL,iBAAZ;AAA+BM,QAAAA,KAAK,EAAE;AAAtC,OAAD,CAAd;AACD,KAxBoC;;AAAA,uCA0BlB,OAAOC,IAAP,EAAmBR,cAAnB,KAAsE;AACvF,YAAMS,YAAY,GAAGD,IAAI,CAACE,IAAL,GAAY,KAAKC,OAAtC;AACA,YAAMC,WAAW,GAAGJ,IAAI,IAAIC,YAA5B;AACA,UAAI,CAACG,WAAL,EAAkB,KAAKC,cAAL,GAAsB;AAAEP,QAAAA,QAAQ,EAAE,CAAZ;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAtB;AAClB,YAAMO,OAAO,GAAG,IAAIC,QAAJ,EAAhB;AACAD,MAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBR,IAAxB;;AAEA,UAAI;AACF,cAAMS,UAAU,GAAG;AACjBC,UAAAA,OAAO,EAAEtC,YADQ;AAEjBuC,UAAAA,gBAAgB,EAAGpB,aAAD,IAAkC,KAAKqB,iBAAL,CAAuBrB,aAAvB,EAAsCC,cAAtC;AAFnC,SAAnB;AAKA,cAAMqB,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,IAAN,CAAW3C,GAAG,CAAC4C,KAAf,EAAsBT,OAAtB,EAA+BG,UAA/B,CAAvB;AACA,cAAMO,MAAM,GAAGH,QAAQ,CAACI,IAAT,CAAcA,IAAd,CAAmBC,IAAlC;AAEA,aAAKC,UAAL,CAAgBH,MAAhB;AACD,OAVD,CAUE,OAAOjB,KAAP,EAAc;AACd,aAAKM,cAAL,GAAsB;AAAEP,UAAAA,QAAQ,EAAE,CAAZ;AAAeC,UAAAA;AAAf,SAAtB;AACD;AACF,KA9CoC;;AAEnC,SAAKjB,aAAL,GAAqB,KAAKO,cAAL,CAAoBb,QAApB,CAArB;AACA,SAAK2B,OAAL,GAAe,OAAf;AACA,SAAKE,cAAL,GAAsB;AAAEP,MAAAA,QAAQ,EAAE,CAAZ;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAtB;AACA,SAAKd,cAAL,GAAsB,CAAC,CAAD,EAAI,CAAJ,CAAtB;AACD;;AAf2C","sourcesContent":["import axios from 'axios';\nimport { URL } from '@construction/url';\nimport { headerOption } from '@config/headerForImgur';\nimport { SetStateProcess } from '@types';\nimport Editor from './Editor';\n\nexport default class ImgEditor extends Editor {\n  public insertionText: string;\n\n  public maxSize: number;\n\n  public uploadingState: { progress: number; error: string };\n\n  public positionToMove: number[];\n\n  public constructor(editType: string) {\n    super();\n    this.insertionText = this.stringToInsert[editType];\n    this.maxSize = 5000000;\n    this.uploadingState = { progress: 0, error: '' };\n    this.positionToMove = [3, 3];\n  }\n\n  public editInput = (input: string, cursorPosition: number[]): { updatedText: string; cursorToGo: number[] } => {\n    const currentPositon = cursorPosition[0];\n    const updatedText = this.insertText(this.insertionText, input, currentPositon);\n    const [firstPoint, secondPoint] = this.positionToMove;\n    const cursorToGo = [firstPoint + currentPositon, secondPoint + currentPositon];\n    return { updatedText, cursorToGo };\n  };\n\n  public setImgText = (url: string): void => {\n    this.setImgString(url);\n    this.insertionText = this.stringToInsert.img;\n  };\n\n  public getUploadProgress = (ProgressEvent: ProgressEvent, setUploadState: SetStateProcess): void => {\n    const uploadingProgress = Math.round((ProgressEvent.loaded / ProgressEvent.total) * 100);\n    setUploadState({ progress: uploadingProgress, error: '' });\n  };\n\n  public uploadImg = async (file: File, setUploadState: SetStateProcess): Promise<void> => {\n    const isExcessSize = file.size > this.maxSize;\n    const isValidFile = file && isExcessSize;\n    if (!isValidFile) this.uploadingState = { progress: 0, error: 'NOT_VAILD_FILE' };\n    const imgData = new FormData();\n    imgData.append('image', file);\n\n    try {\n      const postConfig = {\n        headers: headerOption,\n        onUploadProgress: (ProgressEvent: ProgressEvent) => this.getUploadProgress(ProgressEvent, setUploadState),\n      };\n\n      const response = await axios.post(URL.IMGUR, imgData, postConfig);\n      const imgUrl = response.data.data.link;\n\n      this.setImgText(imgUrl);\n    } catch (error) {\n      this.uploadingState = { progress: 0, error };\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}