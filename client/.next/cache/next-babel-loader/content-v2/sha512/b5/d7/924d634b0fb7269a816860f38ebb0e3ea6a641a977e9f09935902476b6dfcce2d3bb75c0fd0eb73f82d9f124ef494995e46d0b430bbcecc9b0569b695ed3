{"ast":null,"code":"import _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport CurrentInsertion from './CurrentInsertion';\n\nvar AbstractTextEditor = /*#__PURE__*/function (_CurrentInsertion) {\n  _inherits(AbstractTextEditor, _CurrentInsertion);\n\n  var _super = _createSuper(AbstractTextEditor);\n\n  function AbstractTextEditor() {\n    var _this;\n\n    _classCallCheck(this, AbstractTextEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"pointStartText\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pointEndText\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickEditButton\", function (_ref) {\n      var input = _ref.input,\n          cursorPosition = _ref.cursorPosition,\n          moveCursor = _ref.moveCursor;\n      var currentCursorIndex = cursorPosition[0];\n      var isSelected = cursorPosition[0] !== cursorPosition[1];\n\n      _this.setIndexToInsert(currentCursorIndex);\n\n      _this.setIndexToGo(currentCursorIndex);\n\n      var updatedInput = input;\n\n      if (isSelected) {\n        updatedInput = _this.insertSelectedText({\n          input: input,\n          cursorPosition: cursorPosition,\n          moveCursor: moveCursor\n        });\n      } else {\n        updatedInput = _this.insertText(input);\n      }\n\n      _this.moveCursorAfterEdit(moveCursor);\n\n      return updatedInput;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_isInSameTag\", function (input, frontCursor, backCursor) {\n      return input.slice(frontCursor - _this.pointStartText.length, frontCursor).includes(_this.pointStartText) && input.slice(backCursor, backCursor + _this.pointEndText.length).includes(_this.pointEndText);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_insertTextBetweenIdxs\", function (input, frontIdx, backIdx, textToInsert) {\n      var updatedInput = input.slice(0, frontCursor - _this.pointStartText.length) + selectText + input.slice(backCursor + _this.pointEndText.length);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"insertSelectedText\", function (_ref2) {\n      var input = _ref2.input,\n          cursorPosition = _ref2.cursorPosition,\n          moveCursor = _ref2.moveCursor;\n\n      var _cursorPosition = _slicedToArray(cursorPosition, 2),\n          frontCursor = _cursorPosition[0],\n          backCursor = _cursorPosition[1];\n\n      var selectText = input.slice(frontCursor, backCursor);\n      var updatedInput = input;\n\n      if (_this._isInSameTag(input, frontCursor, backCursor)) {\n        updatedInput = input.slice(0, frontCursor - _this.pointStartText.length) + selectText + input.slice(backCursor + _this.pointEndText.length);\n        _this.indexToGo = [frontCursor - _this.pointStartText.length, frontCursor - _this.pointStartText.length + selectText.length];\n        return updatedInput;\n      }\n\n      updatedInput = input.slice(0, frontCursor) + _this.pointStartText + selectText + _this.pointEndText + input.slice(backCursor);\n      _this.indexToGo = [frontCursor + _this.pointStartText.length, frontCursor + _this.pointStartText.length + selectText.length];\n      return updatedInput;\n    });\n\n    return _this;\n  }\n\n  return AbstractTextEditor;\n}(CurrentInsertion);\n\nexport { AbstractTextEditor as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Abstract/TextEditor.ts"],"names":["CurrentInsertion","AbstractTextEditor","input","cursorPosition","moveCursor","currentCursorIndex","isSelected","setIndexToInsert","setIndexToGo","updatedInput","insertSelectedText","insertText","moveCursorAfterEdit","frontCursor","backCursor","slice","pointStartText","length","includes","pointEndText","frontIdx","backIdx","textToInsert","selectText","_isInSameTag","indexToGo"],"mappings":"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","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport CurrentInsertion from './CurrentInsertion';\n\nexport default abstract class AbstractTextEditor extends CurrentInsertion {\n  protected abstract pointStartText: string;\n\n  protected abstract pointEndText: string;\n\n  public onClickEditButton = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const currentCursorIndex = cursorPosition[0];\n    const isSelected = cursorPosition[0] !== cursorPosition[1];\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n    let updatedInput = input;\n    if (isSelected) {\n      updatedInput = this.insertSelectedText({ input, cursorPosition, moveCursor });\n    } else {\n      updatedInput = this.insertText(input);\n    }\n    this.moveCursorAfterEdit(moveCursor);\n    return updatedInput;\n  };\n\n  private _isInSameTag = (input: string, frontCursor: number, backCursor: number): boolean => {\n    return (\n      input.slice(frontCursor - this.pointStartText.length, frontCursor).includes(this.pointStartText) &&\n      input.slice(backCursor, backCursor + this.pointEndText.length).includes(this.pointEndText)\n    );\n  };\n\n  private _insertTextBetweenIdxs = (input: string, frontIdx: number, backIdx: number, textToInsert: string): string => {\n    const updatedInput =\n      input.slice(0, frontCursor - this.pointStartText.length) +\n      selectText +\n      input.slice(backCursor + this.pointEndText.length);\n  };\n\n  protected insertSelectedText = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const [frontCursor, backCursor] = cursorPosition;\n    const selectText = input.slice(frontCursor, backCursor);\n\n    let updatedInput = input;\n    if (this._isInSameTag(input, frontCursor, backCursor)) {\n      updatedInput =\n        input.slice(0, frontCursor - this.pointStartText.length) +\n        selectText +\n        input.slice(backCursor + this.pointEndText.length);\n      this.indexToGo = [\n        frontCursor - this.pointStartText.length,\n        frontCursor - this.pointStartText.length + selectText.length,\n      ];\n      return updatedInput;\n    }\n    updatedInput =\n      input.slice(0, frontCursor) + this.pointStartText + selectText + this.pointEndText + input.slice(backCursor);\n    this.indexToGo = [\n      frontCursor + this.pointStartText.length,\n      frontCursor + this.pointStartText.length + selectText.length,\n    ];\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}