{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\n\nvar useCursorPoint = function useCursorPoint(inputAreaElem) {\n  _s();\n\n  var initCursor = [0, 0];\n\n  var _useState = useState(initCursor),\n      cursorPosition = _useState[0],\n      setCursorPosition = _useState[1];\n\n  var infoOfCursorToGo = useRef([false, cursorPosition]);\n\n  var updateCusorPoint = function updateCusorPoint() {\n    var cursorPointStart = inputAreaElem.selectionStart;\n    var cursorPointEnd = inputAreaElem.selectionEnd;\n    var updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  var moveCursor = function moveCursor(cursorPositionToGo) {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputAreaElem.focus();\n  };\n\n  return {\n    cursorPosition: cursorPosition,\n    setCursorPosition: setCursorPosition,\n    infoOfCursorToGo: infoOfCursorToGo,\n    updateCusorPoint: updateCusorPoint,\n    moveCursor: moveCursor\n  };\n};\n\n_s(useCursorPoint, \"7giSGS5g5gupybRc1fRc6yDONII=\");\n\nexport default useCursorPoint;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useCursorPoint.tsx"],"names":["useState","useRef","useCursorPoint","inputAreaElem","initCursor","cursorPosition","setCursorPosition","infoOfCursorToGo","updateCusorPoint","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","updatedCursorPosition","moveCursor","cursorPositionToGo","current","focus"],"mappings":";;AAAA,SAA2CA,QAA3C,EAAgEC,MAAhE,QAA8E,OAA9E;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,aAAD,EAAwC;AAAA;;AAC7D,MAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAnB;;AAD6D,kBAEjBJ,QAAQ,CAACI,UAAD,CAFS;AAAA,MAEtDC,cAFsD;AAAA,MAEtCC,iBAFsC;;AAG7D,MAAMC,gBAAgB,GAAGN,MAAM,CAAsB,CAAC,KAAD,EAAQI,cAAR,CAAtB,CAA/B;;AAEA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,QAAMC,gBAAgB,GAAGN,aAAa,CAACO,cAAvC;AACA,QAAMC,cAAc,GAAGR,aAAa,CAACS,YAArC;AACA,QAAMC,qBAAqB,GAAG,CAACJ,gBAAD,EAAmBE,cAAnB,CAA9B;AACAL,IAAAA,iBAAiB,CAACO,qBAAD,CAAjB;AACD,GALD;;AAOA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,kBAAD,EAAkC;AACnDR,IAAAA,gBAAgB,CAACS,OAAjB,GAA2B,CAAC,IAAD,EAAOD,kBAAP,CAA3B;AACAZ,IAAAA,aAAa,CAACc,KAAd;AACD,GAHD;;AAKA,SAAO;AAAEZ,IAAAA,cAAc,EAAdA,cAAF;AAAkBC,IAAAA,iBAAiB,EAAjBA,iBAAlB;AAAqCC,IAAAA,gBAAgB,EAAhBA,gBAArC;AAAuDC,IAAAA,gBAAgB,EAAhBA,gBAAvD;AAAyEM,IAAAA,UAAU,EAAVA;AAAzE,GAAP;AACD,CAlBD;;GAAMZ,c;;AAoBN,eAAeA,cAAf","sourcesContent":["import React, { ReactElement, useCallback, useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst useCursorPoint = (inputAreaElem: HTMLTextAreaElement) => {\n  const initCursor = [0, 0];\n  const [cursorPosition, setCursorPosition] = useState(initCursor);\n  const infoOfCursorToGo = useRef<[boolean, number[]]>([false, cursorPosition]);\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputAreaElem.selectionStart;\n    const cursorPointEnd = inputAreaElem.selectionEnd;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = (cursorPositionToGo: number[]) => {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputAreaElem.focus();\n  };\n\n  return { cursorPosition, setCursorPosition, infoOfCursorToGo, updateCusorPoint, moveCursor };\n};\n\nexport default useCursorPoint;\n"]},"metadata":{},"sourceType":"module"}