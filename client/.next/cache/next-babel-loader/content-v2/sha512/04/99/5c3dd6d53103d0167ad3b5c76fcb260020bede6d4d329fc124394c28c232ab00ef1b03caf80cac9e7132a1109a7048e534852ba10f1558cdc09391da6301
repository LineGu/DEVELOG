{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/organisms/Editor/ButtonBox/ImgButtons.tsx\";\nimport React from 'react';\nimport { Image } from '@icons/index';\nimport Finder from '@atoms/Finder';\nimport { Editors } from '@utils/markdownEditor/index';\n\nfunction ImgButton(_ref) {\n  var onClick = _ref.onClick,\n      setUploadState = _ref.setUploadState;\n  var imgEditor = Editors.imgEditor;\n  var uploadImg = imgEditor.uploadImg;\n\n  var openFinder = function openFinder(event) {\n    var finderElem = event.currentTarget.nextSibling;\n    finderElem.click();\n  };\n\n  var selectImgAndUpload = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var _ref3, file, timer;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref3 = event.target.files, file = _ref3[0];\n\n              if (file) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              timer = setInterval(function () {\n                setUploadState(imgEditor.uploadingState);\n              }, 10);\n              _context.next = 6;\n              return uploadImg(file);\n\n            case 6:\n              onClick();\n              clearInterval(timer);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function selectImgAndUpload(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      onClick: openFinder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Finder, {\n      onChange: selectImgAndUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = ImgButton;\nexport default ImgButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImgButton\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/organisms/Editor/ButtonBox/ImgButtons.tsx"],"names":["React","Image","Finder","Editors","ImgButton","onClick","setUploadState","imgEditor","uploadImg","openFinder","event","finderElem","currentTarget","nextSibling","click","selectImgAndUpload","target","files","file","timer","setInterval","uploadingState","clearInterval"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAyD,OAAzD;AACA,SAASC,KAAT,QAAsB,cAAtB;AAIA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAQA,SAASC,SAAT,OAA+E;AAAA,MAA1DC,OAA0D,QAA1DA,OAA0D;AAAA,MAAjDC,cAAiD,QAAjDA,cAAiD;AAC7E,MAAMC,SAAS,GAAGJ,OAAO,CAACI,SAA1B;AAD6E,MAErEC,SAFqE,GAEvDD,SAFuD,CAErEC,SAFqE;;AAI7E,MAAMC,UAA2B,GAAG,SAA9BA,UAA8B,CAACC,KAAD,EAAW;AAC7C,QAAMC,UAAU,GAAGD,KAAK,CAACE,aAAN,CAAoBC,WAAvC;AACAF,IAAAA,UAAU,CAACG,KAAX;AACD,GAHD;;AAKA,MAAMC,kBAAqC;AAAA,yEAAG,iBAAOL,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACxBA,KAAK,CAACM,MAAN,CAAaC,KADW,EACjCC,IADiC,SACpC,CADoC;;AAAA,kBAEvCA,IAFuC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGtCC,cAAAA,KAHsC,GAG9BC,WAAW,CAAC,YAAM;AAC9Bd,gBAAAA,cAAc,CAACC,SAAS,CAACc,cAAX,CAAd;AACD,eAFwB,EAEtB,EAFsB,CAHmB;AAAA;AAAA,qBAMtCb,SAAS,CAACU,IAAD,CAN6B;;AAAA;AAO5Cb,cAAAA,OAAO;AACPiB,cAAAA,aAAa,CAACH,KAAD,CAAb;;AAR4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAArCJ,kBAAqC;AAAA;AAAA;AAAA,KAA3C;;AAWA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEN;AAAhB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEM;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;KA1BQX,S;AA4BT,eAAeA,SAAf","sourcesContent":["import React, { ReactElement, useEffect, useState } from 'react';\nimport { Image } from '@icons/index';\nimport { IOnClickSvgFunc, IOnChangeFileFunc } from '@eventInterfaces';\nimport { IEditFuncProps } from '@interfaces';\nimport { SetStateProcess } from '@types';\nimport Finder from '@atoms/Finder';\nimport { Editors } from '@utils/markdownEditor/index';\nimport ImgEditorType from '@utils/markdownEditor/ImgEditor';\n\ninterface IImgButtonProps {\n  onClick: IEditFuncProps;\n  setUploadState: SetStateProcess;\n}\n\nfunction ImgButton({ onClick, setUploadState }: IImgButtonProps): ReactElement {\n  const imgEditor = Editors.imgEditor as ImgEditorType;\n  const { uploadImg } = imgEditor;\n\n  const openFinder: IOnClickSvgFunc = (event) => {\n    const finderElem = event.currentTarget.nextSibling as HTMLButtonElement;\n    finderElem.click();\n  };\n\n  const selectImgAndUpload: IOnChangeFileFunc = async (event) => {\n    const { 0: file } = event.target.files as FileList;\n    if (!file) return;\n    const timer = setInterval(() => {\n      setUploadState(imgEditor.uploadingState);\n    }, 10);\n    await uploadImg(file);\n    onClick();\n    clearInterval(timer);\n  };\n\n  return (\n    <>\n      <Image onClick={openFinder} />\n      <Finder onChange={selectImgAndUpload} />\n    </>\n  );\n}\n\nexport default ImgButton;\n"]},"metadata":{},"sourceType":"module"}