{"ast":null,"code":"import FrontInsertEditor from './FrontInsertEditor';\nimport CurrentInsertEditor from './CurrentInsertEditor';\nvar Editors = {\n  h1Editor: new FrontInsertEditor('h1'),\n  h2Editor: new FrontInsertEditor('h2'),\n  h3Editor: new FrontInsertEditor('h3'),\n  quoteEditor: new FrontInsertEditor('quote'),\n  checkboxEditor: new FrontInsertEditor('checkbox'),\n  boldEditor: new CurrentInsertEditor('bold'),\n  italicEditor: new CurrentInsertEditor('italic'),\n  linkEditor: new CurrentInsertEditor('link'),\n  codeEditor: new CurrentInsertEditor('code'),\n  tableEditor: new CurrentInsertEditor('table')\n};\n\nvar editByButton = function editByButton(_ref) {\n  var input = _ref.input,\n      event = _ref.event,\n      cursorPosition = _ref.cursorPosition,\n      _ref$tableCount = _ref.tableCount,\n      tableCount = _ref$tableCount === void 0 ? [0, 0] : _ref$tableCount;\n  var editType = event.currentTarget.id;\n  var editorName = \"\".concat(editType, \"Editor\");\n  var editInputFunc = Editors[editorName].editInput;\n\n  if (editType === 'table') {\n    var tableEditor = Editors.tableEditor;\n    tableEditor.setTableText(tableCount);\n  }\n\n  var _editInputFunc = editInputFunc(input, cursorPosition),\n      updatedText = _editInputFunc.updatedText,\n      cursorToGo = _editInputFunc.cursorToGo;\n\n  return {\n    updatedText: updatedText,\n    cursorToGo: cursorToGo\n  };\n};\n\nexport default editByButton;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/index.ts"],"names":["FrontInsertEditor","CurrentInsertEditor","Editors","h1Editor","h2Editor","h3Editor","quoteEditor","checkboxEditor","boldEditor","italicEditor","linkEditor","codeEditor","tableEditor","editByButton","input","event","cursorPosition","tableCount","editType","currentTarget","id","editorName","editInputFunc","editInput","setTableText","updatedText","cursorToGo"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AAkBA,IAAMC,OAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,IAAIH,iBAAJ,CAAsB,IAAtB,CADgB;AAE1BI,EAAAA,QAAQ,EAAE,IAAIJ,iBAAJ,CAAsB,IAAtB,CAFgB;AAG1BK,EAAAA,QAAQ,EAAE,IAAIL,iBAAJ,CAAsB,IAAtB,CAHgB;AAI1BM,EAAAA,WAAW,EAAE,IAAIN,iBAAJ,CAAsB,OAAtB,CAJa;AAK1BO,EAAAA,cAAc,EAAE,IAAIP,iBAAJ,CAAsB,UAAtB,CALU;AAM1BQ,EAAAA,UAAU,EAAE,IAAIP,mBAAJ,CAAwB,MAAxB,CANc;AAO1BQ,EAAAA,YAAY,EAAE,IAAIR,mBAAJ,CAAwB,QAAxB,CAPY;AAQ1BS,EAAAA,UAAU,EAAE,IAAIT,mBAAJ,CAAwB,MAAxB,CARc;AAS1BU,EAAAA,UAAU,EAAE,IAAIV,mBAAJ,CAAwB,MAAxB,CATc;AAU1BW,EAAAA,WAAW,EAAE,IAAIX,mBAAJ,CAAwB,OAAxB;AAVa,CAA5B;;AAaA,IAAMY,YAAY,GAAG,SAAfA,YAAe,OAA4F;AAAA,MAAzFC,KAAyF,QAAzFA,KAAyF;AAAA,MAAlFC,KAAkF,QAAlFA,KAAkF;AAAA,MAA3EC,cAA2E,QAA3EA,cAA2E;AAAA,6BAA3DC,UAA2D;AAAA,MAA3DA,UAA2D,gCAA9C,CAAC,CAAD,EAAI,CAAJ,CAA8C;AAC/G,MAAMC,QAAQ,GAAGH,KAAK,CAACI,aAAN,CAAoBC,EAArC;AACA,MAAMC,UAAU,aAAMH,QAAN,WAAhB;AACA,MAAMI,aAAa,GAAGpB,OAAO,CAACmB,UAAD,CAAP,CAAoBE,SAA1C;;AAEA,MAAIL,QAAQ,KAAK,OAAjB,EAA0B;AACxB,QAAMN,WAAW,GAAGV,OAAO,CAACU,WAA5B;AACAA,IAAAA,WAAW,CAACY,YAAZ,CAAyBP,UAAzB;AACD;;AAR8G,uBAS3EK,aAAa,CAACR,KAAD,EAAQE,cAAR,CAT8D;AAAA,MASvGS,WATuG,kBASvGA,WATuG;AAAA,MAS1FC,UAT0F,kBAS1FA,UAT0F;;AAW/G,SAAO;AAAED,IAAAA,WAAW,EAAXA,WAAF;AAAeC,IAAAA,UAAU,EAAVA;AAAf,GAAP;AACD,CAZD;;AAcA,eAAeb,YAAf","sourcesContent":["import FrontInsertEditor from './FrontInsertEditor';\nimport CurrentInsertEditor from './CurrentInsertEditor';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  cursorPosition: number[];\n  tableCount?: number[];\n}\n\ninterface IResultOfEditor {\n  updatedText: string;\n  cursorToGo: number[];\n}\n\ntype editorType = {\n  [editorName: string]: FrontInsertEditor | CurrentInsertEditor;\n};\n\nconst Editors: editorType = {\n  h1Editor: new FrontInsertEditor('h1'),\n  h2Editor: new FrontInsertEditor('h2'),\n  h3Editor: new FrontInsertEditor('h3'),\n  quoteEditor: new FrontInsertEditor('quote'),\n  checkboxEditor: new FrontInsertEditor('checkbox'),\n  boldEditor: new CurrentInsertEditor('bold'),\n  italicEditor: new CurrentInsertEditor('italic'),\n  linkEditor: new CurrentInsertEditor('link'),\n  codeEditor: new CurrentInsertEditor('code'),\n  tableEditor: new CurrentInsertEditor('table'),\n};\n\nconst editByButton = ({ input, event, cursorPosition, tableCount = [0, 0] }: IEditTextProps): IResultOfEditor => {\n  const editType = event.currentTarget.id;\n  const editorName = `${editType}Editor`;\n  const editInputFunc = Editors[editorName].editInput;\n\n  if (editType === 'table') {\n    const tableEditor = Editors.tableEditor as CurrentInsertEditor;\n    tableEditor.setTableText(tableCount);\n  }\n  const { updatedText, cursorToGo } = editInputFunc(input, cursorPosition);\n\n  return { updatedText, cursorToGo };\n};\n\nexport default editByButton;\n"]},"metadata":{},"sourceType":"module"}