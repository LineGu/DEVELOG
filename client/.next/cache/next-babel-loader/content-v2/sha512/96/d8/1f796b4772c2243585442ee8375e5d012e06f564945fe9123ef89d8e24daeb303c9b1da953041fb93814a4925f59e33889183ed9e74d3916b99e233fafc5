{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CurrentInsertion from './CurrentInsertion';\nexport default class AbstractTextEditor extends CurrentInsertion {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"pointStartText\", void 0);\n\n    _defineProperty(this, \"pointEndText\", void 0);\n\n    _defineProperty(this, \"onClickEditButton\", ({\n      input,\n      cursorPosition,\n      moveCursor\n    }) => {\n      const currentCursorIndex = cursorPosition[0];\n      const isSelected = cursorPosition[0] !== cursorPosition[1];\n      this.setIndexToInsert(currentCursorIndex);\n      this.setIndexToGo(currentCursorIndex);\n      let updatedInput = input;\n\n      if (isSelected) {\n        updatedInput = this.onClickSelectedText({\n          input,\n          cursorPosition,\n          moveCursor\n        });\n      } else {\n        updatedInput = this.insertText(input);\n      }\n\n      this.moveCursorAfterEdit(moveCursor);\n      return updatedInput;\n    });\n\n    _defineProperty(this, \"onClickSelectedText\", ({\n      input,\n      cursorPosition,\n      moveCursor\n    }) => {\n      const [frontCursor, backCursor] = cursorPosition;\n      const selectText = input.slice(frontCursor, backCursor);\n      const isInSameTag = input.slice(frontCursor - this.pointStartText.length, frontCursor).includes(this.pointStartText) && input.slice(backCursor, backCursor + this.pointEndText.length).includes(this.pointEndText);\n      let updatedInput = input;\n\n      if (isInSameTag) {\n        updatedInput = input.slice(0, frontCursor - this.pointStartText.length) + selectText + input.slice(backCursor + this.pointStartText.length);\n        this.indexToGo = [frontCursor - this.pointStartText.length, frontCursor - this.pointStartText.length + selectText.length];\n        return updatedInput;\n      }\n\n      updatedInput = input.slice(0, frontCursor) + this.pointStartText + selectText + this.pointEndText + input.slice(backCursor);\n      return updatedInput;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Abstract/TextEditor.ts"],"names":["CurrentInsertion","AbstractTextEditor","input","cursorPosition","moveCursor","currentCursorIndex","isSelected","setIndexToInsert","setIndexToGo","updatedInput","onClickSelectedText","insertText","moveCursorAfterEdit","frontCursor","backCursor","selectText","slice","isInSameTag","pointStartText","length","includes","pointEndText","indexToGo"],"mappings":";;AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA,eAAe,MAAeC,kBAAf,SAA0CD,gBAA1C,CAA2D;AAAA;AAAA;;AAAA;;AAAA;;AAAA,+CAK7C,CAAC;AAAEE,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA;AAAzB,KAAD,KAAuE;AAChG,YAAMC,kBAAkB,GAAGF,cAAc,CAAC,CAAD,CAAzC;AACA,YAAMG,UAAU,GAAGH,cAAc,CAAC,CAAD,CAAd,KAAsBA,cAAc,CAAC,CAAD,CAAvD;AACA,WAAKI,gBAAL,CAAsBF,kBAAtB;AACA,WAAKG,YAAL,CAAkBH,kBAAlB;AACA,UAAII,YAAY,GAAGP,KAAnB;;AACA,UAAII,UAAJ,EAAgB;AACdG,QAAAA,YAAY,GAAG,KAAKC,mBAAL,CAAyB;AAAER,UAAAA,KAAF;AAASC,UAAAA,cAAT;AAAyBC,UAAAA;AAAzB,SAAzB,CAAf;AACD,OAFD,MAEO;AACLK,QAAAA,YAAY,GAAG,KAAKE,UAAL,CAAgBT,KAAhB,CAAf;AACD;;AACD,WAAKU,mBAAL,CAAyBR,UAAzB;AACA,aAAOK,YAAP;AACD,KAlBuE;;AAAA,iDAoBxC,CAAC;AAAEP,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA;AAAzB,KAAD,KAAuE;AACrG,YAAM,CAACS,WAAD,EAAcC,UAAd,IAA4BX,cAAlC;AACA,YAAMY,UAAU,GAAGb,KAAK,CAACc,KAAN,CAAYH,WAAZ,EAAyBC,UAAzB,CAAnB;AACA,YAAMG,WAAW,GACff,KAAK,CAACc,KAAN,CAAYH,WAAW,GAAG,KAAKK,cAAL,CAAoBC,MAA9C,EAAsDN,WAAtD,EAAmEO,QAAnE,CAA4E,KAAKF,cAAjF,KACAhB,KAAK,CAACc,KAAN,CAAYF,UAAZ,EAAwBA,UAAU,GAAG,KAAKO,YAAL,CAAkBF,MAAvD,EAA+DC,QAA/D,CAAwE,KAAKC,YAA7E,CAFF;AAIA,UAAIZ,YAAY,GAAGP,KAAnB;;AACA,UAAIe,WAAJ,EAAiB;AACfR,QAAAA,YAAY,GACVP,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeH,WAAW,GAAG,KAAKK,cAAL,CAAoBC,MAAjD,IACAJ,UADA,GAEAb,KAAK,CAACc,KAAN,CAAYF,UAAU,GAAG,KAAKI,cAAL,CAAoBC,MAA7C,CAHF;AAIA,aAAKG,SAAL,GAAiB,CACfT,WAAW,GAAG,KAAKK,cAAL,CAAoBC,MADnB,EAEfN,WAAW,GAAG,KAAKK,cAAL,CAAoBC,MAAlC,GAA2CJ,UAAU,CAACI,MAFvC,CAAjB;AAIA,eAAOV,YAAP;AACD;;AACDA,MAAAA,YAAY,GACVP,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeH,WAAf,IAA8B,KAAKK,cAAnC,GAAoDH,UAApD,GAAiE,KAAKM,YAAtE,GAAqFnB,KAAK,CAACc,KAAN,CAAYF,UAAZ,CADvF;AAEA,aAAOL,YAAP;AACD,KA1CuE;AAAA;;AAAA","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport CurrentInsertion from './CurrentInsertion';\n\nexport default abstract class AbstractTextEditor extends CurrentInsertion {\n  protected abstract pointStartText: string;\n\n  protected abstract pointEndText: string;\n\n  public onClickEditButton = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const currentCursorIndex = cursorPosition[0];\n    const isSelected = cursorPosition[0] !== cursorPosition[1];\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n    let updatedInput = input;\n    if (isSelected) {\n      updatedInput = this.onClickSelectedText({ input, cursorPosition, moveCursor });\n    } else {\n      updatedInput = this.insertText(input);\n    }\n    this.moveCursorAfterEdit(moveCursor);\n    return updatedInput;\n  };\n\n  protected onClickSelectedText = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const [frontCursor, backCursor] = cursorPosition;\n    const selectText = input.slice(frontCursor, backCursor);\n    const isInSameTag =\n      input.slice(frontCursor - this.pointStartText.length, frontCursor).includes(this.pointStartText) &&\n      input.slice(backCursor, backCursor + this.pointEndText.length).includes(this.pointEndText);\n\n    let updatedInput = input;\n    if (isInSameTag) {\n      updatedInput =\n        input.slice(0, frontCursor - this.pointStartText.length) +\n        selectText +\n        input.slice(backCursor + this.pointStartText.length);\n      this.indexToGo = [\n        frontCursor - this.pointStartText.length,\n        frontCursor - this.pointStartText.length + selectText.length,\n      ];\n      return updatedInput;\n    }\n    updatedInput =\n      input.slice(0, frontCursor) + this.pointStartText + selectText + this.pointEndText + input.slice(backCursor);\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}