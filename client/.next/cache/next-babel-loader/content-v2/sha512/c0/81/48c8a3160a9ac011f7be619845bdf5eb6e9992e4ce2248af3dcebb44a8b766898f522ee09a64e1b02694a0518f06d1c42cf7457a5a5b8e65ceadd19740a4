{"ast":null,"code":"import FrontInsertEditor from './FrontInsertEditor';\nimport CurrentInsertEditor from './CurrentInsertEditor';\nimport ImgEditor from './ImgEditor';\nexport const Editors = {\n  h1Editor: new FrontInsertEditor('h1'),\n  h2Editor: new FrontInsertEditor('h2'),\n  h3Editor: new FrontInsertEditor('h3'),\n  quoteEditor: new FrontInsertEditor('quote'),\n  checkboxEditor: new FrontInsertEditor('checkbox'),\n  boldEditor: new CurrentInsertEditor('bold'),\n  italicEditor: new CurrentInsertEditor('italic'),\n  linkEditor: new CurrentInsertEditor('link'),\n  codeEditor: new CurrentInsertEditor('code'),\n  tableEditor: new CurrentInsertEditor('table'),\n  imgEditor: new ImgEditor('img')\n};\n\nconst editByButton = props => {\n  var _event$currentTarget$;\n\n  const {\n    input,\n    event,\n    cursorPosition,\n    tableCount\n  } = props;\n  const editType = (_event$currentTarget$ = event === null || event === void 0 ? void 0 : event.currentTarget.id) !== null && _event$currentTarget$ !== void 0 ? _event$currentTarget$ : 'img';\n  const editorName = `${editType}Editor`;\n  const editInputFunc = Editors[editorName].editInput;\n\n  if (editType === 'table') {\n    const tableEditor = Editors.tableEditor;\n    tableEditor.setTableText(tableCount !== null && tableCount !== void 0 ? tableCount : [0, 0]);\n  }\n\n  const {\n    updatedText,\n    cursorToGo\n  } = editInputFunc(input, cursorPosition);\n  return {\n    updatedText,\n    cursorToGo\n  };\n};\n\nexport default editByButton;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/index.ts"],"names":["FrontInsertEditor","CurrentInsertEditor","ImgEditor","Editors","h1Editor","h2Editor","h3Editor","quoteEditor","checkboxEditor","boldEditor","italicEditor","linkEditor","codeEditor","tableEditor","imgEditor","editByButton","props","input","event","cursorPosition","tableCount","editType","currentTarget","id","editorName","editInputFunc","editInput","setTableText","updatedText","cursorToGo"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAkBA,OAAO,MAAMC,OAAmB,GAAG;AACjCC,EAAAA,QAAQ,EAAE,IAAIJ,iBAAJ,CAAsB,IAAtB,CADuB;AAEjCK,EAAAA,QAAQ,EAAE,IAAIL,iBAAJ,CAAsB,IAAtB,CAFuB;AAGjCM,EAAAA,QAAQ,EAAE,IAAIN,iBAAJ,CAAsB,IAAtB,CAHuB;AAIjCO,EAAAA,WAAW,EAAE,IAAIP,iBAAJ,CAAsB,OAAtB,CAJoB;AAKjCQ,EAAAA,cAAc,EAAE,IAAIR,iBAAJ,CAAsB,UAAtB,CALiB;AAMjCS,EAAAA,UAAU,EAAE,IAAIR,mBAAJ,CAAwB,MAAxB,CANqB;AAOjCS,EAAAA,YAAY,EAAE,IAAIT,mBAAJ,CAAwB,QAAxB,CAPmB;AAQjCU,EAAAA,UAAU,EAAE,IAAIV,mBAAJ,CAAwB,MAAxB,CARqB;AASjCW,EAAAA,UAAU,EAAE,IAAIX,mBAAJ,CAAwB,MAAxB,CATqB;AAUjCY,EAAAA,WAAW,EAAE,IAAIZ,mBAAJ,CAAwB,OAAxB,CAVoB;AAWjCa,EAAAA,SAAS,EAAE,IAAIZ,SAAJ,CAAc,KAAd;AAXsB,CAA5B;;AAcP,MAAMa,YAAY,GAAIC,KAAD,IAA4C;AAAA;;AAC/D,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,cAAhB;AAAgCC,IAAAA;AAAhC,MAA+CJ,KAArD;AACA,QAAMK,QAAQ,4BAAGH,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEI,aAAP,CAAqBC,EAAxB,yEAA8B,KAA5C;AACA,QAAMC,UAAU,GAAI,GAAEH,QAAS,QAA/B;AACA,QAAMI,aAAa,GAAGtB,OAAO,CAACqB,UAAD,CAAP,CAAoBE,SAA1C;;AAEA,MAAIL,QAAQ,KAAK,OAAjB,EAA0B;AACxB,UAAMR,WAAW,GAAGV,OAAO,CAACU,WAA5B;AACAA,IAAAA,WAAW,CAACc,YAAZ,CAAyBP,UAAzB,aAAyBA,UAAzB,cAAyBA,UAAzB,GAAuC,CAAC,CAAD,EAAI,CAAJ,CAAvC;AACD;;AAED,QAAM;AAAEQ,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA8BJ,aAAa,CAACR,KAAD,EAAQE,cAAR,CAAjD;AAEA,SAAO;AAAES,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAP;AACD,CAdD;;AAgBA,eAAed,YAAf","sourcesContent":["import FrontInsertEditor from './FrontInsertEditor';\nimport CurrentInsertEditor from './CurrentInsertEditor';\nimport ImgEditor from './ImgEditor';\n\ninterface IEditTextProps {\n  event?: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  cursorPosition: number[];\n  tableCount?: number[];\n}\n\ninterface IResultOfEditor {\n  updatedText: string;\n  cursorToGo: number[];\n}\n\ntype editorType = {\n  [editorName: string]: FrontInsertEditor | CurrentInsertEditor | ImgEditor;\n};\n\nexport const Editors: editorType = {\n  h1Editor: new FrontInsertEditor('h1'),\n  h2Editor: new FrontInsertEditor('h2'),\n  h3Editor: new FrontInsertEditor('h3'),\n  quoteEditor: new FrontInsertEditor('quote'),\n  checkboxEditor: new FrontInsertEditor('checkbox'),\n  boldEditor: new CurrentInsertEditor('bold'),\n  italicEditor: new CurrentInsertEditor('italic'),\n  linkEditor: new CurrentInsertEditor('link'),\n  codeEditor: new CurrentInsertEditor('code'),\n  tableEditor: new CurrentInsertEditor('table'),\n  imgEditor: new ImgEditor('img'),\n};\n\nconst editByButton = (props: IEditTextProps): IResultOfEditor => {\n  const { input, event, cursorPosition, tableCount } = props;\n  const editType = event?.currentTarget.id ?? 'img';\n  const editorName = `${editType}Editor`;\n  const editInputFunc = Editors[editorName].editInput;\n\n  if (editType === 'table') {\n    const tableEditor = Editors.tableEditor as CurrentInsertEditor;\n    tableEditor.setTableText(tableCount ?? [0, 0]);\n  }\n\n  const { updatedText, cursorToGo } = editInputFunc(input, cursorPosition);\n\n  return { updatedText, cursorToGo };\n};\n\nexport default editByButton;\n"]},"metadata":{},"sourceType":"module"}