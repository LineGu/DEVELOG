{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useRef, useEffect, useState } from 'react';\n\nvar useScroll = function useScroll() {\n  _s();\n\n  var _useState = useState(0),\n      scroll = _useState[0],\n      setScroll = _useState[1];\n\n  var screenHeight = useRef(1000);\n  var notifyLocation = useCallback(function () {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n  useEffect(function () {\n    document.addEventListener('scroll', notifyLocation);\n    screenHeight.current = window.innerHeight;\n    return function () {\n      return document.removeEventListener('scroll', notifyLocation);\n    };\n  }, []);\n  var percentagePosition = scroll / screenHeight.current * 100;\n  return {\n    position: percentagePosition\n  };\n};\n\n_s(useScroll, \"NYhgq7W5aRsqtX418CNxgB3sI2A=\");\n\nexport default useScroll;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useScroll.ts"],"names":["useCallback","useRef","useEffect","useState","useScroll","scroll","setScroll","screenHeight","notifyLocation","document","documentElement","scrollTop","addEventListener","current","window","innerHeight","removeEventListener","percentagePosition","position"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;;AAMA,IAAMC,SAAgC,GAAG,SAAnCA,SAAmC,GAAM;AAAA;;AAAA,kBACjBD,QAAQ,CAAS,CAAT,CADS;AAAA,MACtCE,MADsC;AAAA,MAC9BC,SAD8B;;AAE7C,MAAMC,YAAY,GAAGN,MAAM,CAAS,IAAT,CAA3B;AAEA,MAAMO,cAAc,GAAGR,WAAW,CAAC,YAAM;AACvCM,IAAAA,SAAS,CAACG,QAAQ,CAACC,eAAT,CAAyBC,SAA1B,CAAT;AACD,GAFiC,EAE/B,CAACN,MAAD,CAF+B,CAAlC;AAIAH,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,QAAQ,CAACG,gBAAT,CAA0B,QAA1B,EAAoCJ,cAApC;AACAD,IAAAA,YAAY,CAACM,OAAb,GAAuBC,MAAM,CAACC,WAA9B;AACA,WAAO;AAAA,aAAMN,QAAQ,CAACO,mBAAT,CAA6B,QAA7B,EAAuCR,cAAvC,CAAN;AAAA,KAAP;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,MAAMS,kBAAkB,GAAIZ,MAAM,GAAGE,YAAY,CAACM,OAAvB,GAAkC,GAA7D;AACA,SAAO;AAAEK,IAAAA,QAAQ,EAAED;AAAZ,GAAP;AACD,CAhBD;;GAAMb,S;;AAkBN,eAAeA,SAAf","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\ninterface IUseScrollProps {\n  position: number;\n}\n\nconst useScroll: () => IUseScrollProps = () => {\n  const [scroll, setScroll] = useState<number>(0);\n  const screenHeight = useRef<number>(1000);\n\n  const notifyLocation = useCallback(() => {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n\n  useEffect(() => {\n    document.addEventListener('scroll', notifyLocation);\n    screenHeight.current = window.innerHeight;\n    return () => document.removeEventListener('scroll', notifyLocation);\n  }, []);\n\n  const percentagePosition = (scroll / screenHeight.current) * 100;\n  return { position: percentagePosition };\n};\n\nexport default useScroll;\n"]},"metadata":{},"sourceType":"module"}