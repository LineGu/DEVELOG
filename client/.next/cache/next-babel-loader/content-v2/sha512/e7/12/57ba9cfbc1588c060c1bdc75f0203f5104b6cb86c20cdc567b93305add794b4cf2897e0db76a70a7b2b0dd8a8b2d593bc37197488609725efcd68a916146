{"ast":null,"code":"const blankList = ['\\\\', '', '&nbsp;'];\nexport const getLastText = input => {\n  return input.slice(input.length - 1, input.length);\n};\nexport const isEmptyLine = input => {\n  return input === '';\n};\nexport const hideLastSlash = input => {\n  return `${input}&nbsp;`;\n};\nexport const createTextsByLine = input => {\n  return input.split('\\n');\n};\nexport const applyBlankToMarkdown = input => {\n  if (isEmptyLine(input)) return `\\\\`;\n  return input;\n};\nexport const changeText = (TextsByLine, idxsToChange, textToChange) => {\n  const updatedTextsByLine = [...TextsByLine];\n  idxsToChange.forEach(idx => {\n    updatedTextsByLine[idx] = textToChange;\n  });\n  console.log(idxsToChange);\n  return updatedTextsByLine;\n};\nexport const insertText = (TextsByLine, idxsToChange, textToInsert) => {\n  let updatedTextsByLine = [...TextsByLine];\n  idxsToChange.forEach(idx => {\n    updatedTextsByLine = [...updatedTextsByLine.slice(0, idx), textToInsert, ...updatedTextsByLine.slice(idx)];\n  });\n  return updatedTextsByLine;\n};\nexport const findLastTextIdx = TextsByLine => {\n  let textIdx = -1;\n  TextsByLine.forEach((text, idx) => {\n    if (!blankList.includes(text)) textIdx = idx;\n  });\n  return textIdx;\n};\nexport const isBlankAfterLastText = (TextsByLine, idx) => {\n  const idxOfLastText = findLastTextIdx(TextsByLine);\n  if (idx > idxOfLastText && blankList.includes(TextsByLine[idx])) return true;\n  return false;\n};\nexport const isBlankBeforeText = (TextsByLine, idx) => {\n  const currentText = TextsByLine[idx];\n  const beforeText = TextsByLine[idx - 1];\n  if (!blankList.includes(currentText) && blankList.includes(beforeText)) return true;\n  return false;\n};\nexport const getBlankIdxsAfterLastText = TextsByLine => {\n  const blankIdxs = [];\n  TextsByLine.forEach((_, index) => {\n    if (isBlankAfterLastText(TextsByLine, index)) blankIdxs.push(index);\n  });\n  return blankIdxs;\n};\nexport const getBlankIdxsBeforeText = TextsByLine => {\n  const blankIdxs = [];\n  TextsByLine.forEach((_, index) => {\n    if (isBlankBeforeText(TextsByLine, index)) blankIdxs.push(index);\n  });\n  return blankIdxs;\n};\nexport const getBlankIdxsInCodeBox = TextsByLine => {\n  const idxsBlankInCodeBox = [];\n  let isInCodeBox = false;\n  TextsByLine.forEach((text, index) => {\n    if (text.slice(0, 3) === '```') isInCodeBox = !isInCodeBox;\n    if ((text === '\\\\' || text === '&nbsp;') && isInCodeBox) idxsBlankInCodeBox.push(index);\n  });\n  return idxsBlankInCodeBox;\n};\nexport const getBlankIdxsAfterTable = TextsByLine => {\n  const idxsSlashAfterTable = [];\n  TextsByLine.forEach((text, index) => {\n    if (index !== 0 && text.slice(0, 1) !== '|' && getLastText(TextsByLine[index - 1]) === '|') idxsSlashAfterTable.push(index);\n  });\n  return idxsSlashAfterTable;\n};","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdown/markdown.ts"],"names":["blankList","getLastText","input","slice","length","isEmptyLine","hideLastSlash","createTextsByLine","split","applyBlankToMarkdown","changeText","TextsByLine","idxsToChange","textToChange","updatedTextsByLine","forEach","idx","console","log","insertText","textToInsert","findLastTextIdx","textIdx","text","includes","isBlankAfterLastText","idxOfLastText","isBlankBeforeText","currentText","beforeText","getBlankIdxsAfterLastText","blankIdxs","_","index","push","getBlankIdxsBeforeText","getBlankIdxsInCodeBox","idxsBlankInCodeBox","isInCodeBox","getBlankIdxsAfterTable","idxsSlashAfterTable"],"mappings":"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","sourcesContent":["const blankList = ['\\\\', '', '&nbsp;'];\n\nexport const getLastText = (input: string): string => {\n  return input.slice(input.length - 1, input.length);\n};\n\nexport const isEmptyLine = (input: string): boolean => {\n  return input === '';\n};\n\nexport const hideLastSlash = (input: string): string => {\n  return `${input}&nbsp;`;\n};\n\nexport const createTextsByLine = (input: string): string[] => {\n  return input.split('\\n');\n};\n\nexport const applyBlankToMarkdown = (input: string): string => {\n  if (isEmptyLine(input)) return `\\\\`;\n  return input;\n};\n\nexport const changeText = (TextsByLine: string[], idxsToChange: number[], textToChange: string): string[] => {\n  const updatedTextsByLine = [...TextsByLine];\n  idxsToChange.forEach((idx) => {\n    updatedTextsByLine[idx] = textToChange;\n  });\n  console.log(idxsToChange);\n  return updatedTextsByLine;\n};\n\nexport const insertText = (TextsByLine: string[], idxsToChange: number[], textToInsert: string): string[] => {\n  let updatedTextsByLine = [...TextsByLine];\n  idxsToChange.forEach((idx) => {\n    updatedTextsByLine = [...updatedTextsByLine.slice(0, idx), textToInsert, ...updatedTextsByLine.slice(idx)];\n  });\n\n  return updatedTextsByLine;\n};\n\nexport const findLastTextIdx = (TextsByLine: string[]): number => {\n  let textIdx = -1;\n  TextsByLine.forEach((text, idx) => {\n    if (!blankList.includes(text)) textIdx = idx;\n  });\n  return textIdx;\n};\n\nexport const isBlankAfterLastText = (TextsByLine: string[], idx: number): boolean => {\n  const idxOfLastText = findLastTextIdx(TextsByLine);\n  if (idx > idxOfLastText && blankList.includes(TextsByLine[idx])) return true;\n  return false;\n};\n\nexport const isBlankBeforeText = (TextsByLine: string[], idx: number): boolean => {\n  const currentText = TextsByLine[idx];\n  const beforeText = TextsByLine[idx - 1];\n  if (!blankList.includes(currentText) && blankList.includes(beforeText)) return true;\n  return false;\n};\n\nexport const getBlankIdxsAfterLastText = (TextsByLine: string[]): number[] => {\n  const blankIdxs: number[] = [];\n  TextsByLine.forEach((_, index): void => {\n    if (isBlankAfterLastText(TextsByLine, index)) blankIdxs.push(index);\n  });\n  return blankIdxs;\n};\n\nexport const getBlankIdxsBeforeText = (TextsByLine: string[]): number[] => {\n  const blankIdxs: number[] = [];\n  TextsByLine.forEach((_, index): void => {\n    if (isBlankBeforeText(TextsByLine, index)) blankIdxs.push(index);\n  });\n  return blankIdxs;\n};\n\nexport const getBlankIdxsInCodeBox = (TextsByLine: string[]): number[] => {\n  const idxsBlankInCodeBox: number[] = [];\n  let isInCodeBox = false;\n  TextsByLine.forEach((text, index) => {\n    if (text.slice(0, 3) === '```') isInCodeBox = !isInCodeBox;\n    if ((text === '\\\\' || text === '&nbsp;') && isInCodeBox) idxsBlankInCodeBox.push(index);\n  });\n\n  return idxsBlankInCodeBox;\n};\n\nexport const getBlankIdxsAfterTable = (TextsByLine: string[]): number[] => {\n  const idxsSlashAfterTable: number[] = [];\n  TextsByLine.forEach((text, index) => {\n    if (index !== 0 && text.slice(0, 1) !== '|' && getLastText(TextsByLine[index - 1]) === '|')\n      idxsSlashAfterTable.push(index);\n  });\n  return idxsSlashAfterTable;\n};\n"]},"metadata":{},"sourceType":"module"}