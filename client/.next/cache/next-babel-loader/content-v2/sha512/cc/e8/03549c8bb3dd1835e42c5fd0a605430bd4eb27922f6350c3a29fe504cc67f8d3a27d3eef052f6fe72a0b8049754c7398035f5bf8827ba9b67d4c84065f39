{"ast":null,"code":"var findFrontOfLine = function findFrontOfLine(string, cursorPosition) {\n  var findingIndex = cursorPosition[0];\n  console.log(findingIndex);\n  var isFindFront = true;\n\n  while (isFindFront) {\n    if (string[findingIndex] === '\\n') {\n      isFindFront = false;\n      findingIndex += 1;\n      break;\n    }\n\n    if (findingIndex === 0) {\n      break;\n    }\n\n    findingIndex -= 1;\n  }\n\n  return findingIndex;\n};\n\nvar insertTextFront = function insertTextFront(_ref) {\n  var input = _ref.input,\n      positionToInsert = _ref.positionToInsert,\n      insertText = _ref.insertText;\n  var markDownForFront = ['# ', '## ', '### ', '> '];\n  var beforeText = input.slice(positionToInsert, 5);\n  var newInput = input.slice(0, positionToInsert) + insertText + input.slice(positionToInsert);\n  return newInput;\n};\n\nvar editInputText = function editInputText(_ref2) {\n  var event = _ref2.event,\n      input = _ref2.input,\n      setInput = _ref2.setInput,\n      cursorPosition = _ref2.cursorPosition;\n  var isSelected = cursorPosition[0] !== cursorPosition[1];\n  var iconClicked = event.currentTarget.className.baseVal;\n  var positionToInsert = findFrontOfLine(input, cursorPosition);\n  var insertText = '';\n\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      break;\n\n    default:\n      break;\n  }\n\n  var newInput = insertTextFront({\n    input: input,\n    positionToInsert: positionToInsert,\n    insertText: insertText\n  });\n  setInput(newInput);\n};\n\nexport default editInputText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/editInputText.ts"],"names":["findFrontOfLine","string","cursorPosition","findingIndex","console","log","isFindFront","insertTextFront","input","positionToInsert","insertText","markDownForFront","beforeText","slice","newInput","editInputText","event","setInput","isSelected","iconClicked","currentTarget","className","baseVal"],"mappings":"AAeA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAAiBC,cAAjB,EAAsD;AAC5E,MAAIC,YAAY,GAAGD,cAAc,CAAC,CAAD,CAAjC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,MAAIG,WAAW,GAAG,IAAlB;;AACA,SAAOA,WAAP,EAAoB;AAClB,QAAIL,MAAM,CAACE,YAAD,CAAN,KAAyB,IAA7B,EAAmC;AACjCG,MAAAA,WAAW,GAAG,KAAd;AACAH,MAAAA,YAAY,IAAI,CAAhB;AACA;AACD;;AACD,QAAIA,YAAY,KAAK,CAArB,EAAwB;AACtB;AACD;;AACDA,IAAAA,YAAY,IAAI,CAAhB;AACD;;AACD,SAAOA,YAAP;AACD,CAhBD;;AAkBA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,OAAwE;AAAA,MAArEC,KAAqE,QAArEA,KAAqE;AAAA,MAA9DC,gBAA8D,QAA9DA,gBAA8D;AAAA,MAA5CC,UAA4C,QAA5CA,UAA4C;AAC9F,MAAMC,gBAAgB,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,EAAsB,IAAtB,CAAzB;AACA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,KAAN,CAAYJ,gBAAZ,EAA8B,CAA9B,CAAnB;AAEA,MAAMK,QAAQ,GAAGN,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeJ,gBAAf,IAAmCC,UAAnC,GAAgDF,KAAK,CAACK,KAAN,CAAYJ,gBAAZ,CAAjE;AACA,SAAOK,QAAP;AACD,CAND;;AAQA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,QAAsE;AAAA,MAAnEC,KAAmE,SAAnEA,KAAmE;AAAA,MAA5DR,KAA4D,SAA5DA,KAA4D;AAAA,MAArDS,QAAqD,SAArDA,QAAqD;AAAA,MAA3Cf,cAA2C,SAA3CA,cAA2C;AAC1F,MAAMgB,UAAU,GAAGhB,cAAc,CAAC,CAAD,CAAd,KAAsBA,cAAc,CAAC,CAAD,CAAvD;AACA,MAAMiB,WAAW,GAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAA8BC,OAAlD;AACA,MAAMb,gBAAgB,GAAGT,eAAe,CAACQ,KAAD,EAAQN,cAAR,CAAxC;AACA,MAAIQ,UAAU,GAAG,EAAjB;;AACA,UAAQS,WAAR;AACE,SAAK,IAAL;AACET,MAAAA,UAAU,GAAG,IAAb;AACA;;AAEF,SAAK,IAAL;AACEA,MAAAA,UAAU,GAAG,KAAb;AACA;;AAEF,SAAK,IAAL;AACEA,MAAAA,UAAU,GAAG,MAAb;AACA;;AAEF,SAAK,MAAL;AACEA,MAAAA,UAAU,GAAG,SAAb;AACA;;AAEF,SAAK,QAAL;AACEA,MAAAA,UAAU,GAAG,OAAb;AACA;;AAEF,SAAK,MAAL;AACEA,MAAAA,UAAU,GAAG,aAAb;AACA;;AAEF,SAAK,OAAL;AACEA,MAAAA,UAAU,GAAG,IAAb;AACA;;AAEF;AACE;AA9BJ;;AAgCA,MAAMI,QAAQ,GAAGP,eAAe,CAAC;AAAEC,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,gBAAgB,EAAhBA,gBAAT;AAA2BC,IAAAA,UAAU,EAAVA;AAA3B,GAAD,CAAhC;AACAO,EAAAA,QAAQ,CAACH,QAAD,CAAR;AACD,CAvCD;;AAyCA,eAAeC,aAAf","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  setInput: Dispatch<SetStateAction<string>>;\n  cursorPosition: number[];\n}\n\ninterface IInsertFrontProps {\n  input: string;\n  positionToInsert: number;\n  insertText: string;\n}\n\nconst findFrontOfLine = (string: string, cursorPosition: number[]): number => {\n  let findingIndex = cursorPosition[0];\n  console.log(findingIndex);\n  let isFindFront = true;\n  while (isFindFront) {\n    if (string[findingIndex] === '\\n') {\n      isFindFront = false;\n      findingIndex += 1;\n      break;\n    }\n    if (findingIndex === 0) {\n      break;\n    }\n    findingIndex -= 1;\n  }\n  return findingIndex;\n};\n\nconst insertTextFront = ({ input, positionToInsert, insertText }: IInsertFrontProps): string => {\n  const markDownForFront = ['# ', '## ', '### ', '> '];\n  const beforeText = input.slice(positionToInsert, 5);\n\n  const newInput = input.slice(0, positionToInsert) + insertText + input.slice(positionToInsert);\n  return newInput;\n};\n\nconst editInputText = ({ event, input, setInput, cursorPosition }: IEditTextProps): void => {\n  const isSelected = cursorPosition[0] !== cursorPosition[1];\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      break;\n\n    default:\n      break;\n  }\n  const newInput = insertTextFront({ input, positionToInsert, insertText });\n  setInput(newInput);\n};\n\nexport default editInputText;\n"]},"metadata":{},"sourceType":"module"}