{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CurrentInsertion from './CurrentInsertion';\nexport default class AbstractTextEditor extends CurrentInsertion {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onClickEditButton\", ({\n      input,\n      cursorPosition,\n      moveCursor\n    }) => {\n      const currentCursorIndex = cursorPosition[0];\n      const isSelected = cursorPosition[0] !== cursorPosition[1];\n      this.setIndexToInsert(currentCursorIndex);\n      this.setIndexToGo(currentCursorIndex);\n      let updatedInput = input;\n      if (isSelected) updatedInput = this.delSelectText(input, cursorPosition);\n      const updatedText = this.insertText(updatedInput);\n      this.moveCursorAfterEdit(moveCursor);\n      return updatedText;\n    });\n\n    _defineProperty(this, \"delSelectText\", (input, cursorPosition) => {\n      const updatedInput = input.slice(0, cursorPosition[0]) + input.slice(cursorPosition[1]);\n      return updatedInput;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Abstract/TextEditor.ts"],"names":["CurrentInsertion","AbstractTextEditor","input","cursorPosition","moveCursor","currentCursorIndex","isSelected","setIndexToInsert","setIndexToGo","updatedInput","delSelectText","updatedText","insertText","moveCursorAfterEdit","slice"],"mappings":";;AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA,eAAe,MAAeC,kBAAf,SAA0CD,gBAA1C,CAA2D;AAAA;AAAA;;AAAA,+CAC7C,CAAC;AAAEE,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA;AAAzB,KAAD,KAAuE;AAChG,YAAMC,kBAAkB,GAAGF,cAAc,CAAC,CAAD,CAAzC;AACA,YAAMG,UAAU,GAAGH,cAAc,CAAC,CAAD,CAAd,KAAsBA,cAAc,CAAC,CAAD,CAAvD;AACA,WAAKI,gBAAL,CAAsBF,kBAAtB;AACA,WAAKG,YAAL,CAAkBH,kBAAlB;AAEA,UAAII,YAAY,GAAGP,KAAnB;AACA,UAAII,UAAJ,EAAgBG,YAAY,GAAG,KAAKC,aAAL,CAAmBR,KAAnB,EAA0BC,cAA1B,CAAf;AAEhB,YAAMQ,WAAW,GAAG,KAAKC,UAAL,CAAgBH,YAAhB,CAApB;AACA,WAAKI,mBAAL,CAAyBT,UAAzB;AAEA,aAAOO,WAAP;AACD,KAduE;;AAAA,2CAgBjD,CAACT,KAAD,EAAgBC,cAAhB,KAAqD;AAC1E,YAAMM,YAAY,GAAGP,KAAK,CAACY,KAAN,CAAY,CAAZ,EAAeX,cAAc,CAAC,CAAD,CAA7B,IAAoCD,KAAK,CAACY,KAAN,CAAYX,cAAc,CAAC,CAAD,CAA1B,CAAzD;AAEA,aAAOM,YAAP;AACD,KApBuE;AAAA;;AAAA","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport CurrentInsertion from './CurrentInsertion';\n\nexport default abstract class AbstractTextEditor extends CurrentInsertion {\n  public onClickEditButton = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const currentCursorIndex = cursorPosition[0];\n    const isSelected = cursorPosition[0] !== cursorPosition[1];\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n\n    let updatedInput = input;\n    if (isSelected) updatedInput = this.delSelectText(input, cursorPosition);\n\n    const updatedText = this.insertText(updatedInput);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n\n  public delSelectText = (input: string, cursorPosition: number[]): string => {\n    const updatedInput = input.slice(0, cursorPosition[0]) + input.slice(cursorPosition[1]);\n\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}