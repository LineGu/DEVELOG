{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/common/themeProvider.tsx\";\nimport React, { useState, createContext, useEffect } from 'react';\nimport Theme, { LightMode, DarkMode } from '@constants/Theme';\nexport const ThemeContext = /*#__PURE__*/createContext({});\n\nfunction ThemeModeProvider({\n  children,\n  defaultMode\n}) {\n  const {\n    0: mode,\n    1: setMode\n  } = useState(defaultMode);\n  useEffect(() => {\n    var _window$localStorage$;\n\n    const initMode = (_window$localStorage$ = window.localStorage.getItem('theme')) !== null && _window$localStorage$ !== void 0 ? _window$localStorage$ : 'LightMode';\n    setMode(initMode);\n  }, []);\n\n  const changeMode = () => {\n    const newMode = mode === 'LightMode' ? 'DarkMode' : 'LightMode';\n    window.localStorage.setItem('theme', `${newMode}`);\n    setMode(newMode);\n  };\n\n  const newTheme = mode === 'LightMode' ? LightMode : DarkMode;\n  Object.keys(newTheme).forEach(key => {\n    Theme[key] = newTheme[key];\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode,\n      changeMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\n\nexport default ThemeModeProvider;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/common/themeProvider.tsx"],"names":["React","useState","createContext","useEffect","Theme","LightMode","DarkMode","ThemeContext","ThemeModeProvider","children","defaultMode","mode","setMode","initMode","window","localStorage","getItem","changeMode","newMode","setItem","newTheme","Object","keys","forEach","key"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAwCC,aAAxC,EAAkEC,SAAlE,QAAmF,OAAnF;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAsD,kBAAtD;AAOA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAoB,EAApB,CAAlC;;AAEP,SAASM,iBAAT,CAA2B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA3B,EAAoF;AAClF,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,CAACS,WAAD,CAAhC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMU,QAAQ,4BAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAH,yEAA2C,WAAzD;AACAJ,IAAAA,OAAO,CAACC,QAAD,CAAP;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMI,UAAU,GAAG,MAAM;AACvB,UAAMC,OAAO,GAAGP,IAAI,KAAK,WAAT,GAAuB,UAAvB,GAAoC,WAApD;AACAG,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,EAAsC,GAAED,OAAQ,EAAhD;AACAN,IAAAA,OAAO,CAACM,OAAD,CAAP;AACD,GAJD;;AAMA,QAAME,QAAmB,GAAGT,IAAI,KAAK,WAAT,GAAuBN,SAAvB,GAAmCC,QAA/D;AAEAe,EAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA+BC,GAAD,IAAe;AAC3CpB,IAAAA,KAAK,CAACoB,GAAD,CAAL,GAAaJ,QAAQ,CAACI,GAAD,CAArB;AACD,GAFD;AAGA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEb,MAAAA,IAAF;AAAQM,MAAAA;AAAR,KAA9B;AAAA,cAAqDR;AAArD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,eAAeD,iBAAf","sourcesContent":["import React, { useState, ReactElement, createContext, ReactNode, useEffect } from 'react';\nimport { IThemeContextType } from '@types';\nimport Theme, { LightMode, DarkMode, ThemeType } from '@constants/Theme';\n\ninterface IProviderProps {\n  children: ReactNode;\n  defaultMode: string;\n}\n\nexport const ThemeContext = createContext<IThemeContextType>({});\n\nfunction ThemeModeProvider({ children, defaultMode }: IProviderProps): ReactElement {\n  const [mode, setMode] = useState(defaultMode);\n\n  useEffect(() => {\n    const initMode = window.localStorage.getItem('theme') ?? 'LightMode';\n    setMode(initMode);\n  }, []);\n\n  const changeMode = () => {\n    const newMode = mode === 'LightMode' ? 'DarkMode' : 'LightMode';\n    window.localStorage.setItem('theme', `${newMode}`);\n    setMode(newMode);\n  };\n\n  const newTheme: ThemeType = mode === 'LightMode' ? LightMode : DarkMode;\n\n  Object.keys(newTheme).forEach((key): void => {\n    Theme[key] = newTheme[key];\n  });\n  return <ThemeContext.Provider value={{ mode, changeMode }}>{children}</ThemeContext.Provider>;\n}\n\nexport default ThemeModeProvider;\n"]},"metadata":{},"sourceType":"module"}