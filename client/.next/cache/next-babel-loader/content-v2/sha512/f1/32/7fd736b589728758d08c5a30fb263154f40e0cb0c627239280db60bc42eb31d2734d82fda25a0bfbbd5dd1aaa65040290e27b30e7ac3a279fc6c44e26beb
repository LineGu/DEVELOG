{"ast":null,"code":"import _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Editor from './Editor';\n\nvar CurrentInsertEditor = /*#__PURE__*/function (_Editor) {\n  _inherits(CurrentInsertEditor, _Editor);\n\n  var _super = _createSuper(CurrentInsertEditor);\n\n  function CurrentInsertEditor(editType) {\n    var _this;\n\n    _classCallCheck(this, CurrentInsertEditor);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"insertionText\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"editType\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"positionToMove\", {\n      bold: [2, 5],\n      italic: [1, 4],\n      link: [1, 6],\n      code: [5, 9],\n      table: [0, 0]\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"editInput\", function (input, cursorPosition) {\n      var currentPositon = cursorPosition[0];\n\n      var updatedText = _this.insertText(_this.insertionText, input, currentPositon);\n\n      var _this$positionToMove$ = _slicedToArray(_this.positionToMove[_this.editType], 2),\n          firstPoint = _this$positionToMove$[0],\n          secondPoint = _this$positionToMove$[1];\n\n      var cursorToGo = [firstPoint + currentPositon, secondPoint + currentPositon];\n      return {\n        updatedText: updatedText,\n        cursorToGo: cursorToGo\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTableText\", function (tableCount) {\n      _this.setTableString(tableCount);\n\n      _this.insertionText = _this.stringToInsert.table;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setImgText\", function (url) {\n      _this.setImgString(url);\n\n      _this.insertionText = _this.stringToInsert.img;\n    });\n\n    _this.insertionText = _this.stringToInsert[editType];\n    _this.editType = editType;\n    return _this;\n  }\n\n  return CurrentInsertEditor;\n}(Editor);\n\nexport { CurrentInsertEditor as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/CurrentInsertEditor.ts"],"names":["Editor","CurrentInsertEditor","editType","bold","italic","link","code","table","input","cursorPosition","currentPositon","updatedText","insertText","insertionText","positionToMove","firstPoint","secondPoint","cursorToGo","tableCount","setTableString","stringToInsert","url","setImgString","img"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;;IAUqBC,mB;;;;;AAKnB,+BAAmBC,QAAnB,EAAqC;AAAA;;AAAA;;AACnC;;AADmC;;AAAA;;AAAA,qEAMM;AACzCC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,CADmC;AAEzCC,MAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFiC;AAGzCC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,CAHmC;AAIzCC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,CAJmC;AAKzCC,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AALkC,KANN;;AAAA,gEAclB,UAACC,KAAD,EAAgBC,cAAhB,EAA4F;AAC7G,UAAMC,cAAc,GAAGD,cAAc,CAAC,CAAD,CAArC;;AACA,UAAME,WAAW,GAAG,MAAKC,UAAL,CAAgB,MAAKC,aAArB,EAAoCL,KAApC,EAA2CE,cAA3C,CAApB;;AAF6G,iDAG3E,MAAKI,cAAL,CAAoB,MAAKZ,QAAzB,CAH2E;AAAA,UAGtGa,UAHsG;AAAA,UAG1FC,WAH0F;;AAI7G,UAAMC,UAAU,GAAG,CAACF,UAAU,GAAGL,cAAd,EAA8BM,WAAW,GAAGN,cAA5C,CAAnB;AACA,aAAO;AAAEC,QAAAA,WAAW,EAAXA,WAAF;AAAeM,QAAAA,UAAU,EAAVA;AAAf,OAAP;AACD,KApBoC;;AAAA,mEAsBf,UAACC,UAAD,EAAgC;AACpD,YAAKC,cAAL,CAAoBD,UAApB;;AACA,YAAKL,aAAL,GAAqB,MAAKO,cAAL,CAAoBb,KAAzC;AACD,KAzBoC;;AAAA,iEA2BjB,UAACc,GAAD,EAAuB;AACzC,YAAKC,YAAL,CAAkBD,GAAlB;;AACA,YAAKR,aAAL,GAAqB,MAAKO,cAAL,CAAoBG,GAAzC;AACD,KA9BoC;;AAEnC,UAAKV,aAAL,GAAqB,MAAKO,cAAL,CAAoBlB,QAApB,CAArB;AACA,UAAKA,QAAL,GAAgBA,QAAhB;AAHmC;AAIpC;;;EAT8CF,M;;SAA5BC,mB","sourcesContent":["import Editor from './Editor';\n\ntype positionToMoveObj = {\n  [type: string]: number[];\n  bold: number[];\n  italic: number[];\n  link: number[];\n  code: number[];\n};\n\nexport default class CurrentInsertEditor extends Editor {\n  public insertionText: string;\n\n  public editType: string;\n\n  public constructor(editType: string) {\n    super();\n    this.insertionText = this.stringToInsert[editType];\n    this.editType = editType;\n  }\n\n  public positionToMove: positionToMoveObj = {\n    bold: [2, 5],\n    italic: [1, 4],\n    link: [1, 6],\n    code: [5, 9],\n    table: [0, 0],\n  };\n\n  public editInput = (input: string, cursorPosition: number[]): { updatedText: string; cursorToGo: number[] } => {\n    const currentPositon = cursorPosition[0];\n    const updatedText = this.insertText(this.insertionText, input, currentPositon);\n    const [firstPoint, secondPoint] = this.positionToMove[this.editType];\n    const cursorToGo = [firstPoint + currentPositon, secondPoint + currentPositon];\n    return { updatedText, cursorToGo };\n  };\n\n  public setTableText = (tableCount: number[]): void => {\n    this.setTableString(tableCount);\n    this.insertionText = this.stringToInsert.table;\n  };\n\n  public setImgText = (url: string): void => {\n    this.setImgString(url);\n    this.insertionText = this.stringToInsert.img;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}