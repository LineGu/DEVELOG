{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/molecules/MarkdownPreview/MarkdownPreview.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport useDependencyTheme from '@hook/useDependencyTheme';\nimport { atelierCaveLight, a11yDark } from 'react-syntax-highlighter/dist/cjs/styles/hljs';\nimport MarkDownWrapper from './MarkdownStyle';\nconst StyledPreviewBox = styled(MarkDownWrapper).withConfig({\n  displayName: \"MarkdownPreview__StyledPreviewBox\",\n  componentId: \"sc-14yslkb-0\"\n})([\"width:50%;background-color:\", \";@media (max-width:\", \"){display:none;}\"], () => Theme.PREVIEW_BACK, () => Theme.PC);\n\nconst CodeBox = ({\n  value,\n  language\n}) => {\n  const {\n    mode\n  } = useDependencyTheme();\n  const style = mode === 'LightMode' ? atelierCaveLight : a11yDark;\n  return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n    language: language !== null && language !== void 0 ? language : '',\n    style: style,\n    customStyle: {\n      lineHeight: '1.4em',\n      fontSize: '1.2em',\n      borderRadius: '0.5em',\n      backgroundColor: Theme.CODE_BOX\n    },\n    children: value !== null && value !== void 0 ? value : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\nconst LinkRenderer = props => /*#__PURE__*/_jsxDEV(\"a\", {\n  href: `http://${props.href}`,\n  target: \"_blank\",\n  rel: \"external nofollow noopener noreferrer\",\n  children: props.children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 3\n}, this);\n\nfunction MarkdownPreview({\n  input\n}) {\n  let source = input.replace(/\\n/gi, '\\\\\\n');\n\n  if (source.slice(source.length - 1, source.length) === '\\n') {\n    source += '&nbsp;';\n  }\n\n  const strList = source.split('\\n');\n  let isFirstSlash = false;\n  source.split('\\n').forEach((str, index) => {\n    if (str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;') {\n      strList[index - 1] += '\\n&nbsp;';\n    }\n\n    if (str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\') {\n      strList[index] = str.slice(0, str.length - 1);\n    }\n\n    if (str !== '\\\\') {\n      isFirstSlash = false;\n    }\n\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\\\n&nbsp;';\n    }\n\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\';\n    }\n  });\n  source = strList.join('\\n');\n  return /*#__PURE__*/_jsxDEV(StyledPreviewBox, {\n    children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      plugins: [[gfm, {\n        tableCellPadding: 'true'\n      }]],\n      source: source,\n      className: \"preview\",\n      renderers: {\n        code: CodeBox,\n        link: LinkRenderer\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MarkdownPreview;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/molecules/MarkdownPreview/MarkdownPreview.tsx"],"names":["React","styled","Theme","ReactMarkdown","gfm","SyntaxHighlighter","useDependencyTheme","atelierCaveLight","a11yDark","MarkDownWrapper","StyledPreviewBox","PREVIEW_BACK","PC","CodeBox","value","language","mode","style","lineHeight","fontSize","borderRadius","backgroundColor","CODE_BOX","LinkRenderer","props","href","children","MarkdownPreview","input","source","replace","slice","length","strList","split","isFirstSlash","forEach","str","index","join","tableCellPadding","code","link"],"mappings":"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","sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport useDependencyTheme from '@hook/useDependencyTheme';\nimport { atelierCaveLight, a11yDark } from 'react-syntax-highlighter/dist/cjs/styles/hljs';\nimport { ILinkProps } from '@interfaces';\nimport MarkDownWrapper from './MarkdownStyle';\n\ninterface ICodeBoxProps {\n  value: string;\n  language: string;\n  className: string;\n}\n\ninterface IPreviewProps {\n  input: string;\n}\n\nconst StyledPreviewBox = styled(MarkDownWrapper)`\n  width: 50%;\n  background-color: ${() => Theme.PREVIEW_BACK};\n  @media (max-width: ${() => Theme.PC}) {\n    display: none;\n  }\n`;\n\nconst CodeBox = ({ value, language }: ICodeBoxProps): ReactElement => {\n  const { mode } = useDependencyTheme();\n  const style = mode === 'LightMode' ? atelierCaveLight : a11yDark;\n  return (\n    <SyntaxHighlighter\n      language={language ?? ''}\n      style={style}\n      customStyle={{\n        lineHeight: '1.4em',\n        fontSize: '1.2em',\n        borderRadius: '0.5em',\n        backgroundColor: Theme.CODE_BOX,\n      }}\n    >\n      {value ?? ''}\n    </SyntaxHighlighter>\n  );\n};\n\nconst LinkRenderer = (props: ILinkProps): ReactElement => (\n  <a href={`http://${props.href}`} target=\"_blank\" rel=\"external nofollow noopener noreferrer\">\n    {props.children}\n  </a>\n);\n\nfunction MarkdownPreview({ input }: IPreviewProps): ReactElement {\n  let source = input.replace(/\\n/gi, '\\\\\\n');\n\n  if (source.slice(source.length - 1, source.length) === '\\n') {\n    source += '&nbsp;';\n  }\n\n  const strList = source.split('\\n');\n  let isFirstSlash = false;\n  source.split('\\n').forEach((str, index) => {\n    if (str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;') {\n      strList[index - 1] += '\\n&nbsp;';\n    }\n\n    if (str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\') {\n      strList[index] = str.slice(0, str.length - 1);\n    }\n    if (str !== '\\\\') {\n      isFirstSlash = false;\n    }\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\\\n&nbsp;';\n    }\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\';\n    }\n  });\n  source = strList.join('\\n');\n\n  return (\n    <StyledPreviewBox>\n      <ReactMarkdown\n        plugins={[[gfm, { tableCellPadding: 'true' }]]}\n        source={source}\n        className=\"preview\"\n        renderers={{ code: CodeBox, link: LinkRenderer }}\n      />\n    </StyledPreviewBox>\n  );\n}\n\nexport default MarkdownPreview;\n"]},"metadata":{},"sourceType":"module"}