{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Editor from './Editor';\nexport default class FrontInsertEditor extends Editor {\n  constructor(editType) {\n    super();\n\n    _defineProperty(this, \"insertionText\", void 0);\n\n    _defineProperty(this, \"editInput\", (input, cursorPosition) => {\n      console.log(cursorPosition);\n      const [frontEdge, backEdge] = this.findSideEdges(input, cursorPosition);\n      const updatedText = this.insertText(this.insertionText, input, frontEdge);\n      const cursorToGo = [backEdge, backEdge];\n      return {\n        updatedText,\n        cursorToGo\n      };\n    });\n\n    this.insertionText = this.stringToInsert[editType];\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/FrontInsertEditor.ts"],"names":["Editor","FrontInsertEditor","constructor","editType","input","cursorPosition","console","log","frontEdge","backEdge","findSideEdges","updatedText","insertText","insertionText","cursorToGo","stringToInsert"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,MAAhC,CAAuC;AAG7CE,EAAAA,WAAP,CAAmBC,QAAnB,EAAqC;AACnC;;AADmC;;AAAA,uCAKlB,CAACC,KAAD,EAAgBC,cAAhB,KAA4F;AAC7GC,MAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACA,YAAM,CAACG,SAAD,EAAYC,QAAZ,IAAwB,KAAKC,aAAL,CAAmBN,KAAnB,EAA0BC,cAA1B,CAA9B;AACA,YAAMM,WAAW,GAAG,KAAKC,UAAL,CAAgB,KAAKC,aAArB,EAAoCT,KAApC,EAA2CI,SAA3C,CAApB;AAEA,YAAMM,UAAU,GAAG,CAACL,QAAD,EAAWA,QAAX,CAAnB;AACA,aAAO;AAAEE,QAAAA,WAAF;AAAeG,QAAAA;AAAf,OAAP;AACD,KAZoC;;AAEnC,SAAKD,aAAL,GAAqB,KAAKE,cAAL,CAAoBZ,QAApB,CAArB;AACD;;AANmD","sourcesContent":["import Editor from './Editor';\n\nexport default class FrontInsertEditor extends Editor {\n  public insertionText: string;\n\n  public constructor(editType: string) {\n    super();\n    this.insertionText = this.stringToInsert[editType];\n  }\n\n  public editInput = (input: string, cursorPosition: number[]): { updatedText: string; cursorToGo: number[] } => {\n    console.log(cursorPosition);\n    const [frontEdge, backEdge] = this.findSideEdges(input, cursorPosition);\n    const updatedText = this.insertText(this.insertionText, input, frontEdge);\n\n    const cursorToGo = [backEdge, backEdge];\n    return { updatedText, cursorToGo };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}