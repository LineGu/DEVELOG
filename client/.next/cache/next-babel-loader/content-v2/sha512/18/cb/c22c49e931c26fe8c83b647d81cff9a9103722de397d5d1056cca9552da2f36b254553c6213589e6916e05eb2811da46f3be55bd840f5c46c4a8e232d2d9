{"ast":null,"code":"import { useCallback, useRef, useEffect, useState } from 'react';\n\nconst useScroll = () => {\n  const {\n    0: scroll,\n    1: setScroll\n  } = useState(0);\n  const screenHeight = useRef(1000);\n  const notifyLocation = useCallback(() => {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n  useEffect(() => {\n    document.addEventListener('scroll', notifyLocation);\n    screenHeight.current = window.innerHeight;\n    return () => document.removeEventListener('scroll', notifyLocation);\n  }, []);\n  const percentagePosition = scroll / screenHeight.current * 100;\n  return {\n    position: percentagePosition\n  };\n};\n\nexport default useScroll;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useScroll.ts"],"names":["useCallback","useRef","useEffect","useState","useScroll","scroll","setScroll","screenHeight","notifyLocation","document","documentElement","scrollTop","addEventListener","current","window","innerHeight","removeEventListener","percentagePosition","position"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;;AAMA,MAAMC,SAAgC,GAAG,MAAM;AAC7C,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBH,QAAQ,CAAS,CAAT,CAApC;AACA,QAAMI,YAAY,GAAGN,MAAM,CAAS,IAAT,CAA3B;AAEA,QAAMO,cAAc,GAAGR,WAAW,CAAC,MAAM;AACvCM,IAAAA,SAAS,CAACG,QAAQ,CAACC,eAAT,CAAyBC,SAA1B,CAAT;AACD,GAFiC,EAE/B,CAACN,MAAD,CAF+B,CAAlC;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACG,gBAAT,CAA0B,QAA1B,EAAoCJ,cAApC;AACAD,IAAAA,YAAY,CAACM,OAAb,GAAuBC,MAAM,CAACC,WAA9B;AACA,WAAO,MAAMN,QAAQ,CAACO,mBAAT,CAA6B,QAA7B,EAAuCR,cAAvC,CAAb;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMS,kBAAkB,GAAIZ,MAAM,GAAGE,YAAY,CAACM,OAAvB,GAAkC,GAA7D;AACA,SAAO;AAAEK,IAAAA,QAAQ,EAAED;AAAZ,GAAP;AACD,CAhBD;;AAkBA,eAAeb,SAAf","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\ninterface IUseScrollProps {\n  position: number;\n}\n\nconst useScroll: () => IUseScrollProps = () => {\n  const [scroll, setScroll] = useState<number>(0);\n  const screenHeight = useRef<number>(1000);\n\n  const notifyLocation = useCallback(() => {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n\n  useEffect(() => {\n    document.addEventListener('scroll', notifyLocation);\n    screenHeight.current = window.innerHeight;\n    return () => document.removeEventListener('scroll', notifyLocation);\n  }, []);\n\n  const percentagePosition = (scroll / screenHeight.current) * 100;\n  return { position: percentagePosition };\n};\n\nexport default useScroll;\n"]},"metadata":{},"sourceType":"module"}