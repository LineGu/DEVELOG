{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Theme from '@theme/index';\nimport useDependencyTheme from './useDependencyTheme';\nvar REPEAT_START_TIMING = 3000;\nvar TEXT_PERIOD = 4000;\n\nvar useTextLoop = function useTextLoop(introduceList) {\n  _s();\n\n  useDependencyTheme();\n\n  var _useState = useState('100%'),\n      margin = _useState[0],\n      setMargin = _useState[1];\n\n  var _useState2 = useState(Theme.POINT),\n      color = _useState2[0],\n      setColor = _useState2[1];\n\n  var _useState3 = useState('100%'),\n      opacity = _useState3[0],\n      setOpacity = _useState3[1];\n\n  var _useState4 = useState(introduceList[0]),\n      introduce = _useState4[0],\n      setIntro = _useState4[1];\n\n  useEffect(function () {\n    var isMounted = true;\n    var newColor = color;\n    var currentListIndex = 1;\n    setMargin('1%');\n    var setTimingText = setTimeout(function () {\n      if (!isMounted) {\n        clearTimeout(setTimingText);\n        return;\n      }\n\n      setMargin('100%');\n      setOpacity('0%');\n      var hideText = setInterval(function () {\n        if (!isMounted) {\n          clearInterval(hideText);\n          return;\n        }\n\n        setMargin('100%');\n        setOpacity('0%');\n      }, TEXT_PERIOD);\n    }, REPEAT_START_TIMING);\n    var timerToShow = setInterval(function () {\n      if (!isMounted) {\n        clearInterval(timerToShow);\n        return;\n      }\n\n      setMargin('1%');\n      newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n      setColor(newColor);\n      setOpacity('100%');\n      setIntro(introduceList[currentListIndex]);\n      currentListIndex += 1;\n      var isOverList = currentListIndex > introduceList.length - 1;\n      currentListIndex = isOverList ? 0 : currentListIndex;\n    }, TEXT_PERIOD);\n    return function cleanUp() {\n      isMounted = false;\n    };\n  }, []);\n  return {\n    margin: margin,\n    color: color,\n    opacity: opacity,\n    introduce: introduce\n  };\n};\n\n_s(useTextLoop, \"2nvp3Bu/8HXfAF14yP+mhGPDnvU=\", false, function () {\n  return [useDependencyTheme];\n});\n\nexport default useTextLoop;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useTextLoop.tsx"],"names":["useState","useEffect","Theme","useDependencyTheme","REPEAT_START_TIMING","TEXT_PERIOD","useTextLoop","introduceList","margin","setMargin","POINT","color","setColor","opacity","setOpacity","introduce","setIntro","isMounted","newColor","currentListIndex","setTimingText","setTimeout","clearTimeout","hideText","setInterval","clearInterval","timerToShow","BLACK","isOverList","length","cleanUp"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AAMA,IAAMC,mBAAmB,GAAG,IAA5B;AACA,IAAMC,WAAW,GAAG,IAApB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,aAAD,EAA8C;AAAA;;AAChEJ,EAAAA,kBAAkB;;AAD8C,kBAEpCH,QAAQ,CAAS,MAAT,CAF4B;AAAA,MAEzDQ,MAFyD;AAAA,MAEjDC,SAFiD;;AAAA,mBAGtCT,QAAQ,CAASE,KAAK,CAACQ,KAAf,CAH8B;AAAA,MAGzDC,KAHyD;AAAA,MAGlDC,QAHkD;;AAAA,mBAIlCZ,QAAQ,CAAS,MAAT,CAJ0B;AAAA,MAIzDa,OAJyD;AAAA,MAIhDC,UAJgD;;AAAA,mBAKlCd,QAAQ,CAASO,aAAa,CAAC,CAAD,CAAtB,CAL0B;AAAA,MAKzDQ,SALyD;AAAA,MAK9CC,QAL8C;;AAOhEf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,SAAS,GAAG,IAAhB;AACA,QAAIC,QAAQ,GAAGP,KAAf;AACA,QAAIQ,gBAAgB,GAAG,CAAvB;AAEAV,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA,QAAMW,aAAa,GAAGC,UAAU,CAAC,YAAM;AACrC,UAAI,CAACJ,SAAL,EAAgB;AACdK,QAAAA,YAAY,CAACF,aAAD,CAAZ;AACA;AACD;;AACDX,MAAAA,SAAS,CAAC,MAAD,CAAT;AACAK,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMS,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,YAAI,CAACP,SAAL,EAAgB;AACdQ,UAAAA,aAAa,CAACF,QAAD,CAAb;AACA;AACD;;AACDd,QAAAA,SAAS,CAAC,MAAD,CAAT;AACAK,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAP2B,EAOzBT,WAPyB,CAA5B;AAQD,KAf+B,EAe7BD,mBAf6B,CAAhC;AAiBA,QAAMsB,WAAW,GAAGF,WAAW,CAAC,YAAM;AACpC,UAAI,CAACP,SAAL,EAAgB;AACdQ,QAAAA,aAAa,CAACC,WAAD,CAAb;AACA;AACD;;AACDjB,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAS,MAAAA,QAAQ,GAAGA,QAAQ,KAAKhB,KAAK,CAACyB,KAAnB,GAA2BzB,KAAK,CAACQ,KAAjC,GAAyCR,KAAK,CAACyB,KAA1D;AACAf,MAAAA,QAAQ,CAACM,QAAD,CAAR;AACAJ,MAAAA,UAAU,CAAC,MAAD,CAAV;AACAE,MAAAA,QAAQ,CAACT,aAAa,CAACY,gBAAD,CAAd,CAAR;AAEAA,MAAAA,gBAAgB,IAAI,CAApB;AACA,UAAMS,UAAU,GAAGT,gBAAgB,GAAGZ,aAAa,CAACsB,MAAd,GAAuB,CAA7D;AACAV,MAAAA,gBAAgB,GAAGS,UAAU,GAAG,CAAH,GAAOT,gBAApC;AACD,KAd8B,EAc5Bd,WAd4B,CAA/B;AAgBA,WAAO,SAASyB,OAAT,GAAmB;AACxBb,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GA1CQ,EA0CN,EA1CM,CAAT;AA4CA,SAAO;AAAET,IAAAA,MAAM,EAANA,MAAF;AAAUG,IAAAA,KAAK,EAALA,KAAV;AAAiBE,IAAAA,OAAO,EAAPA,OAAjB;AAA0BE,IAAAA,SAAS,EAATA;AAA1B,GAAP;AACD,CApDD;;GAAMT,W;UACJH,kB;;;AAqDF,eAAeG,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport Theme from '@theme/index';\nimport { IDynamicStyledProps, IColorProps } from '@interfaces';\nimport useDependencyTheme from './useDependencyTheme';\n\ninterface ITextLoopReturn extends IDynamicStyledProps, IColorProps {\n  introduce: string;\n}\n\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\n\nconst useTextLoop = (introduceList: string[]): ITextLoopReturn => {\n  useDependencyTheme();\n  const [margin, setMargin] = useState<string>('100%');\n  const [color, setColor] = useState<string>(Theme.POINT);\n  const [opacity, setOpacity] = useState<string>('100%');\n  const [introduce, setIntro] = useState<string>(introduceList[0]);\n\n  useEffect(() => {\n    let isMounted = true;\n    let newColor = color;\n    let currentListIndex = 1;\n\n    setMargin('1%');\n    const setTimingText = setTimeout(() => {\n      if (!isMounted) {\n        clearTimeout(setTimingText);\n        return;\n      }\n      setMargin('100%');\n      setOpacity('0%');\n      const hideText = setInterval(() => {\n        if (!isMounted) {\n          clearInterval(hideText);\n          return;\n        }\n        setMargin('100%');\n        setOpacity('0%');\n      }, TEXT_PERIOD);\n    }, REPEAT_START_TIMING);\n\n    const timerToShow = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(timerToShow);\n        return;\n      }\n      setMargin('1%');\n      newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n      setColor(newColor);\n      setOpacity('100%');\n      setIntro(introduceList[currentListIndex]);\n\n      currentListIndex += 1;\n      const isOverList = currentListIndex > introduceList.length - 1;\n      currentListIndex = isOverList ? 0 : currentListIndex;\n    }, TEXT_PERIOD);\n\n    return function cleanUp() {\n      isMounted = false;\n    };\n  }, []);\n\n  return { margin, color, opacity, introduce };\n};\n\nexport default useTextLoop;\n"]},"metadata":{},"sourceType":"module"}