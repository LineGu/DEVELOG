{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AbstractEditor from './Editor';\nexport default class AbstractLineEditor extends AbstractEditor {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"similarText\", void 0);\n\n    _defineProperty(this, \"setIndexToInsert\", (currentCursorIndex, input) => {\n      const frontPart = input.slice(0, currentCursorIndex);\n      this.indexToInsert = frontPart.lastIndexOf('\\n') + 1;\n    });\n\n    _defineProperty(this, \"setIndexToGo\", (currentCursorIndex, input) => {\n      const backPart = input.slice(currentCursorIndex);\n      const isLastLine = backPart.indexOf('\\n') === -1;\n      const backLenOfLine = isLastLine ? backPart.length : backPart.indexOf('\\n');\n      const backmostIndex = currentCursorIndex + backLenOfLine + this.textToInsert.length;\n      this.indexToGo = [backmostIndex, backmostIndex];\n    });\n\n    _defineProperty(this, \"onClickEditButton\", ({\n      input,\n      currentCursorIndex,\n      moveCursor\n    }) => {\n      this.setIndexToInsert(currentCursorIndex, input);\n      this.setIndexToGo(currentCursorIndex, input);\n      let updatedText = input;\n      if (this.hasSimilarText(input)) this.delSimilarText(input);\n      updatedText = this.insertText(input);\n      this.moveCursorAfterEdit(moveCursor);\n      return updatedText;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Abstract/LineEditor.ts"],"names":["AbstractEditor","AbstractLineEditor","currentCursorIndex","input","frontPart","slice","indexToInsert","lastIndexOf","backPart","isLastLine","indexOf","backLenOfLine","length","backmostIndex","textToInsert","indexToGo","moveCursor","setIndexToInsert","setIndexToGo","updatedText","hasSimilarText","delSimilarText","insertText","moveCursorAfterEdit"],"mappings":";;AACA,OAAOA,cAAP,MAA2B,UAA3B;AAEA,eAAe,MAAeC,kBAAf,SAA0CD,cAA1C,CAAyD;AAAA;AAAA;;AAAA;;AAAA,8CAOzC,CAACE,kBAAD,EAA6BC,KAA7B,KAAqD;AAChF,YAAMC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeH,kBAAf,CAAlB;AACA,WAAKI,aAAL,GAAqBF,SAAS,CAACG,WAAV,CAAsB,IAAtB,IAA8B,CAAnD;AACD,KAVqE;;AAAA,0CAY7C,CAACL,kBAAD,EAA6BC,KAA7B,KAAqD;AAC5E,YAAMK,QAAQ,GAAGL,KAAK,CAACE,KAAN,CAAYH,kBAAZ,CAAjB;AACA,YAAMO,UAAU,GAAGD,QAAQ,CAACE,OAAT,CAAiB,IAAjB,MAA2B,CAAC,CAA/C;AACA,YAAMC,aAAa,GAAGF,UAAU,GAAGD,QAAQ,CAACI,MAAZ,GAAqBJ,QAAQ,CAACE,OAAT,CAAiB,IAAjB,CAArD;AACA,YAAMG,aAAa,GAAGX,kBAAkB,GAAGS,aAArB,GAAqC,KAAKG,YAAL,CAAkBF,MAA7E;AACA,WAAKG,SAAL,GAAiB,CAACF,aAAD,EAAgBA,aAAhB,CAAjB;AACD,KAlBqE;;AAAA,+CAoB3C,CAAC;AAAEV,MAAAA,KAAF;AAASD,MAAAA,kBAAT;AAA6Bc,MAAAA;AAA7B,KAAD,KAA2E;AACpG,WAAKC,gBAAL,CAAsBf,kBAAtB,EAA0CC,KAA1C;AACA,WAAKe,YAAL,CAAkBhB,kBAAlB,EAAsCC,KAAtC;AAEA,UAAIgB,WAAW,GAAGhB,KAAlB;AAEA,UAAI,KAAKiB,cAAL,CAAoBjB,KAApB,CAAJ,EAAgC,KAAKkB,cAAL,CAAoBlB,KAApB;AAChCgB,MAAAA,WAAW,GAAG,KAAKG,UAAL,CAAgBnB,KAAhB,CAAd;AACA,WAAKoB,mBAAL,CAAyBP,UAAzB;AAEA,aAAOG,WAAP;AACD,KA/BqE;AAAA;;AAAA","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport AbstractEditor from './Editor';\n\nexport default abstract class AbstractLineEditor extends AbstractEditor {\n  protected abstract similarText: string;\n\n  protected abstract hasSimilarText(input: string): boolean;\n\n  protected abstract delSimilarText(input: string): string;\n\n  protected setIndexToInsert = (currentCursorIndex: number, input: string): void => {\n    const frontPart = input.slice(0, currentCursorIndex);\n    this.indexToInsert = frontPart.lastIndexOf('\\n') + 1;\n  };\n\n  protected setIndexToGo = (currentCursorIndex: number, input: string): void => {\n    const backPart = input.slice(currentCursorIndex);\n    const isLastLine = backPart.indexOf('\\n') === -1;\n    const backLenOfLine = isLastLine ? backPart.length : backPart.indexOf('\\n');\n    const backmostIndex = currentCursorIndex + backLenOfLine + this.textToInsert.length;\n    this.indexToGo = [backmostIndex, backmostIndex];\n  };\n\n  public onClickEditButton = ({ input, currentCursorIndex, moveCursor }: IOnClickEditButton): string => {\n    this.setIndexToInsert(currentCursorIndex, input);\n    this.setIndexToGo(currentCursorIndex, input);\n\n    let updatedText = input;\n\n    if (this.hasSimilarText(input)) this.delSimilarText(input);\n    updatedText = this.insertText(input);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}