{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\n\nvar useCursorPoint = function useCursorPoint(inputAreaElem) {\n  _s();\n\n  var initCursor = [0, 0];\n\n  var _useState = useState(initCursor),\n      cursorPosition = _useState[0],\n      setCursorPosition = _useState[1];\n\n  var infoOfCursorToGo = useRef([false, cursorPosition]);\n  var inputElem = inputAreaElem;\n\n  var updateCusorPoint = function updateCusorPoint() {\n    var _inputElem$selectionS, _inputElem$selectionE;\n\n    var cursorPointStart = (_inputElem$selectionS = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionStart) !== null && _inputElem$selectionS !== void 0 ? _inputElem$selectionS : 0;\n    var cursorPointEnd = (_inputElem$selectionE = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionEnd) !== null && _inputElem$selectionE !== void 0 ? _inputElem$selectionE : 0;\n    var updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  var moveCursor = function moveCursor(cursorPositionToGo) {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.focus();\n  };\n\n  useEffect(function () {\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('click', updateCusorPoint);\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('keyup', updateCusorPoint);\n  }, []);\n  return {\n    cursorPosition: cursorPosition,\n    setCursorPosition: setCursorPosition,\n    infoOfCursorToGo: infoOfCursorToGo,\n    updateCusorPoint: updateCusorPoint,\n    moveCursor: moveCursor\n  };\n};\n\n_s(useCursorPoint, \"1Jd83XEHsRWZz/oylGel7mUQ/oE=\");\n\nexport default useCursorPoint;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useCursorPoint.tsx"],"names":["useState","useRef","useEffect","useCursorPoint","inputAreaElem","initCursor","cursorPosition","setCursorPosition","infoOfCursorToGo","inputElem","updateCusorPoint","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","updatedCursorPosition","moveCursor","cursorPositionToGo","current","focus","addEventListener"],"mappings":";;AAAA,SAAgBA,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;AAWA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,aAAD,EAAkE;AAAA;;AACvF,MAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAnB;;AADuF,kBAE3CL,QAAQ,CAACK,UAAD,CAFmC;AAAA,MAEhFC,cAFgF;AAAA,MAEhEC,iBAFgE;;AAGvF,MAAMC,gBAAgB,GAAGP,MAAM,CAAsB,CAAC,KAAD,EAAQK,cAAR,CAAtB,CAA/B;AAEA,MAAMG,SAAS,GAAGL,aAAlB;;AAEA,MAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAC7B,QAAMC,gBAAgB,4BAAGF,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEG,cAAd,yEAAgC,CAAtD;AACA,QAAMC,cAAc,4BAAGJ,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEK,YAAd,yEAA8B,CAAlD;AACA,QAAMC,qBAAqB,GAAG,CAACJ,gBAAD,EAAmBE,cAAnB,CAA9B;AACAN,IAAAA,iBAAiB,CAACQ,qBAAD,CAAjB;AACD,GALD;;AAOA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,kBAAD,EAAkC;AACnDT,IAAAA,gBAAgB,CAACU,OAAjB,GAA2B,CAAC,IAAD,EAAOD,kBAAP,CAA3B;AACAR,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEU,KAAX;AACD,GAHD;;AAKAjB,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEW,gBAAX,CAA4B,OAA5B,EAAqCV,gBAArC;AACAD,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEW,gBAAX,CAA4B,OAA5B,EAAqCV,gBAArC;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO;AAAEJ,IAAAA,cAAc,EAAdA,cAAF;AAAkBC,IAAAA,iBAAiB,EAAjBA,iBAAlB;AAAqCC,IAAAA,gBAAgB,EAAhBA,gBAArC;AAAuDE,IAAAA,gBAAgB,EAAhBA,gBAAvD;AAAyEM,IAAAA,UAAU,EAAVA;AAAzE,GAAP;AACD,CAzBD;;GAAMb,c;;AA2BN,eAAeA,cAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { setStateNumberArr } from '@types';\n\ninterface ICursorHookReturn {\n  cursorPosition: number[];\n  setCursorPosition: setStateNumberArr;\n  infoOfCursorToGo: React.MutableRefObject<[boolean, number[]]>;\n  updateCusorPoint: () => void;\n  moveCursor: (cursorPositionToGo: number[]) => void;\n}\n\nconst useCursorPoint = (inputAreaElem: HTMLTextAreaElement | null): ICursorHookReturn => {\n  const initCursor = [0, 0];\n  const [cursorPosition, setCursorPosition] = useState(initCursor);\n  const infoOfCursorToGo = useRef<[boolean, number[]]>([false, cursorPosition]);\n\n  const inputElem = inputAreaElem;\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputElem?.selectionStart ?? 0;\n    const cursorPointEnd = inputElem?.selectionEnd ?? 0;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = (cursorPositionToGo: number[]) => {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputElem?.focus();\n  };\n\n  useEffect(() => {\n    inputElem?.addEventListener('click', updateCusorPoint);\n    inputElem?.addEventListener('keyup', updateCusorPoint);\n  }, []);\n\n  return { cursorPosition, setCursorPosition, infoOfCursorToGo, updateCusorPoint, moveCursor };\n};\n\nexport default useCursorPoint;\n"]},"metadata":{},"sourceType":"module"}