{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/theme/themeProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport Theme, { LightMode, DarkMode } from './index';\nexport var ThemeContext = /*#__PURE__*/createContext({});\n\nfunction ThemeModeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var defaultMode = 'LightMode';\n\n  var _useState = useState(defaultMode),\n      mode = _useState[0],\n      setMode = _useState[1];\n\n  useEffect(function () {\n    var _window$localStorage$;\n\n    var initMode = (_window$localStorage$ = window.localStorage.getItem('theme')) !== null && _window$localStorage$ !== void 0 ? _window$localStorage$ : 'LightMode';\n    setMode(initMode);\n  }, []);\n\n  var changeMode = function changeMode() {\n    var newMode = mode === 'LightMode' ? 'DarkMode' : 'LightMode';\n    window.localStorage.setItem('theme', \"\".concat(newMode));\n    setMode(newMode);\n  };\n\n  var newTheme = mode === 'LightMode' ? LightMode : DarkMode;\n  Object.keys(newTheme).forEach(function (key) {\n    Theme[key] = newTheme[key];\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode: mode,\n      changeMode: changeMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ThemeModeProvider, \"XSo8lQCnNiB4BJD40Cc+Lrr01P4=\");\n\n_c = ThemeModeProvider;\nexport default ThemeModeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeModeProvider\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/theme/themeProvider.tsx"],"names":["React","useState","createContext","useEffect","Theme","LightMode","DarkMode","ThemeContext","ThemeModeProvider","children","defaultMode","mode","setMode","initMode","window","localStorage","getItem","changeMode","newMode","setItem","newTheme","Object","keys","forEach","key"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAwCC,aAAxC,EAAkEC,SAAlE,QAAmF,OAAnF;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAsD,SAAtD;AAWA,OAAO,IAAMC,YAAY,gBAAGL,aAAa,CAAoB,EAApB,CAAlC;;AAEP,SAASM,iBAAT,OAA0E;AAAA;;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AACxE,MAAMC,WAAW,GAAG,WAApB;;AADwE,kBAEhDT,QAAQ,CAACS,WAAD,CAFwC;AAAA,MAEjEC,IAFiE;AAAA,MAE3DC,OAF2D;;AAGxET,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAMU,QAAQ,4BAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAH,yEAA2C,WAAzD;AACAJ,IAAAA,OAAO,CAACC,QAAD,CAAP;AACD,GAHQ,EAGN,EAHM,CAAT;;AAIA,MAAMI,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAMC,OAAO,GAAGP,IAAI,KAAK,WAAT,GAAuB,UAAvB,GAAoC,WAApD;AACAG,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,YAAwCD,OAAxC;AACAN,IAAAA,OAAO,CAACM,OAAD,CAAP;AACD,GAJD;;AAMA,MAAME,QAAmB,GAAGT,IAAI,KAAK,WAAT,GAAuBN,SAAvB,GAAmCC,QAA/D;AAEAe,EAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8B,UAACC,GAAD,EAAe;AAC3CpB,IAAAA,KAAK,CAACoB,GAAD,CAAL,GAAaJ,QAAQ,CAACI,GAAD,CAArB;AACD,GAFD;AAGA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEb,MAAAA,IAAI,EAAJA,IAAF;AAAQM,MAAAA,UAAU,EAAVA;AAAR,KAA9B;AAAA,cAAqDR;AAArD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnBQD,iB;;KAAAA,iB;AAqBT,eAAeA,iBAAf","sourcesContent":["import React, { useState, ReactElement, createContext, ReactNode, useEffect } from 'react';\nimport Theme, { LightMode, DarkMode, ThemeType } from './index';\n\ninterface IThemeContextType {\n  mode?: string;\n  changeMode?: () => void;\n}\n\ninterface ProviderPropsType {\n  children: ReactNode;\n}\n\nexport const ThemeContext = createContext<IThemeContextType>({});\n\nfunction ThemeModeProvider({ children }: ProviderPropsType): ReactElement {\n  const defaultMode = 'LightMode';\n  const [mode, setMode] = useState(defaultMode);\n  useEffect(() => {\n    const initMode = window.localStorage.getItem('theme') ?? 'LightMode';\n    setMode(initMode);\n  }, []);\n  const changeMode = () => {\n    const newMode = mode === 'LightMode' ? 'DarkMode' : 'LightMode';\n    window.localStorage.setItem('theme', `${newMode}`);\n    setMode(newMode);\n  };\n\n  const newTheme: ThemeType = mode === 'LightMode' ? LightMode : DarkMode;\n\n  Object.keys(newTheme).forEach((key): void => {\n    Theme[key] = newTheme[key];\n  });\n  return <ThemeContext.Provider value={{ mode, changeMode }}>{children}</ThemeContext.Provider>;\n}\n\nexport default ThemeModeProvider;\n"]},"metadata":{},"sourceType":"module"}