{"ast":null,"code":"import _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { applyBlankToMarkdown, createTextsByLine } from '@utils/markdown/markdown';\n\nvar Controller = function Controller() {\n  _classCallCheck(this, Controller);\n\n  _defineProperty(this, \"_blankStr\", '\\\\\\n');\n\n  _defineProperty(this, \"applyLineBlank\", function (input) {\n    var TextsByLine = createTextsByLine(input);\n    TextsByLine = TextsByLine.map(function (text) {\n      return applyBlankToMarkdown(text);\n    });\n    var updatedInput = TextsByLine.join('\\n'); // let updatedInput = input.replace(/\\n/gi, this._blankStr);\n    // let TextsByLine = createTextsByLine(updatedInput);\n    // const lastLineIdx = TextsByLine.length - 1;\n    // const lastLine = TextsByLine[lastLineIdx];\n    // if (isEmptyLine(lastLine)) updatedInput = hideLastSlash(updatedInput);\n    // TextsByLine = createTextsByLine(updatedInput);\n\n    console.log(TextsByLine); // let isFirstSlash = false;\n    // // TextsByLine.forEach((str, index) => {\n    // //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    // //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n    // //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    // //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n    // //   const isEmptyLine = str === '\\\\';\n    // //   if (!isEmptyLine) isFirstSlash = false;\n    // //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\\\n&nbsp;';\n    // //   }\n    // //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\';\n    // //   }\n    // // });\n\n    updatedInput = TextsByLine.join('\\n');\n    return updatedInput;\n  });\n};\n\nexport { Controller as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/Controller/index.ts"],"names":["applyBlankToMarkdown","createTextsByLine","Controller","input","TextsByLine","map","text","updatedInput","join","console","log"],"mappings":";;AAAA,SAASA,oBAAT,EAA2DC,iBAA3D,QAAoF,0BAApF;;IAEqBC,U;;;qCACC,M;;0CAEH,UAACC,KAAD,EAA2B;AAC1C,QAAIC,WAAW,GAAGH,iBAAiB,CAACE,KAAD,CAAnC;AACAC,IAAAA,WAAW,GAAGA,WAAW,CAACC,GAAZ,CAAgB,UAACC,IAAD;AAAA,aAAUN,oBAAoB,CAACM,IAAD,CAA9B;AAAA,KAAhB,CAAd;AACA,QAAIC,YAAY,GAAGH,WAAW,CAACI,IAAZ,CAAiB,IAAjB,CAAnB,CAH0C,CAI1C;AAEA;AACA;AACA;AAEA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ,EAZ0C,CAa1C;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,IAAAA,YAAY,GAAGH,WAAW,CAACI,IAAZ,CAAiB,IAAjB,CAAf;AACA,WAAOD,YAAP;AACD,G;;;SAvCkBL,U","sourcesContent":["import { applyBlankToMarkdown, isEmptyLine, hideLastSlash, createTextsByLine } from '@utils/markdown/markdown';\n\nexport default class Controller {\n  private _blankStr = '\\\\\\n';\n\n  applyLineBlank = (input: string): string => {\n    let TextsByLine = createTextsByLine(input);\n    TextsByLine = TextsByLine.map((text) => applyBlankToMarkdown(text));\n    let updatedInput = TextsByLine.join('\\n');\n    // let updatedInput = input.replace(/\\n/gi, this._blankStr);\n\n    // let TextsByLine = createTextsByLine(updatedInput);\n    // const lastLineIdx = TextsByLine.length - 1;\n    // const lastLine = TextsByLine[lastLineIdx];\n\n    // if (isEmptyLine(lastLine)) updatedInput = hideLastSlash(updatedInput);\n    // TextsByLine = createTextsByLine(updatedInput);\n    console.log(TextsByLine);\n    // let isFirstSlash = false;\n    // // TextsByLine.forEach((str, index) => {\n    // //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    // //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n\n    // //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    // //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n\n    // //   const isEmptyLine = str === '\\\\';\n    // //   if (!isEmptyLine) isFirstSlash = false;\n\n    // //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\\\n&nbsp;';\n    // //   }\n    // //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\';\n    // //   }\n    // // });\n\n    updatedInput = TextsByLine.join('\\n');\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}