{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useRef, useEffect, useState } from 'react';\n\nvar useScroll = function useScroll() {\n  _s();\n\n  var initialHeight = 1000;\n\n  var _useState = useState(0),\n      scroll = _useState[0],\n      setScroll = _useState[1];\n\n  var screenHeight = useRef(initialHeight);\n  var notifyLocation = useCallback(function () {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n\n  var applyWindowHeight = function applyWindowHeight() {\n    screenHeight.current = window.innerHeight;\n  };\n\n  useEffect(function () {\n    document.addEventListener('scroll', notifyLocation);\n    document.addEventListener('resize', applyWindowHeight);\n    applyWindowHeight();\n    return function () {\n      document.removeEventListener('scroll', notifyLocation);\n      document.removeEventListener('resize', applyWindowHeight);\n    };\n  }, []);\n  var percentagePosition = scroll / screenHeight.current * 100;\n  return {\n    position: percentagePosition\n  };\n};\n\n_s(useScroll, \"NYhgq7W5aRsqtX418CNxgB3sI2A=\");\n\nexport default useScroll;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useScroll.ts"],"names":["useCallback","useRef","useEffect","useState","useScroll","initialHeight","scroll","setScroll","screenHeight","notifyLocation","document","documentElement","scrollTop","applyWindowHeight","current","window","innerHeight","addEventListener","removeEventListener","percentagePosition","position"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;;AAMA,IAAMC,SAAgC,GAAG,SAAnCA,SAAmC,GAAM;AAAA;;AAC7C,MAAMC,aAAa,GAAG,IAAtB;;AAD6C,kBAEjBF,QAAQ,CAAS,CAAT,CAFS;AAAA,MAEtCG,MAFsC;AAAA,MAE9BC,SAF8B;;AAG7C,MAAMC,YAAY,GAAGP,MAAM,CAASI,aAAT,CAA3B;AAEA,MAAMI,cAAc,GAAGT,WAAW,CAAC,YAAM;AACvCO,IAAAA,SAAS,CAACG,QAAQ,CAACC,eAAT,CAAyBC,SAA1B,CAAT;AACD,GAFiC,EAE/B,CAACN,MAAD,CAF+B,CAAlC;;AAIA,MAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BL,IAAAA,YAAY,CAACM,OAAb,GAAuBC,MAAM,CAACC,WAA9B;AACD,GAFD;;AAIAd,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,QAAQ,CAACO,gBAAT,CAA0B,QAA1B,EAAoCR,cAApC;AACAC,IAAAA,QAAQ,CAACO,gBAAT,CAA0B,QAA1B,EAAoCJ,iBAApC;AACAA,IAAAA,iBAAiB;AACjB,WAAO,YAAM;AACXH,MAAAA,QAAQ,CAACQ,mBAAT,CAA6B,QAA7B,EAAuCT,cAAvC;AACAC,MAAAA,QAAQ,CAACQ,mBAAT,CAA6B,QAA7B,EAAuCL,iBAAvC;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT;AAUA,MAAMM,kBAAkB,GAAIb,MAAM,GAAGE,YAAY,CAACM,OAAvB,GAAkC,GAA7D;AAEA,SAAO;AAAEM,IAAAA,QAAQ,EAAED;AAAZ,GAAP;AACD,CA1BD;;GAAMf,S;;AA4BN,eAAeA,SAAf","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\ninterface IUseScrollProps {\n  position: number;\n}\n\nconst useScroll: () => IUseScrollProps = () => {\n  const initialHeight = 1000;\n  const [scroll, setScroll] = useState<number>(0);\n  const screenHeight = useRef<number>(initialHeight);\n\n  const notifyLocation = useCallback(() => {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n\n  const applyWindowHeight = () => {\n    screenHeight.current = window.innerHeight;\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', notifyLocation);\n    document.addEventListener('resize', applyWindowHeight);\n    applyWindowHeight();\n    return () => {\n      document.removeEventListener('scroll', notifyLocation);\n      document.removeEventListener('resize', applyWindowHeight);\n    };\n  }, []);\n\n  const percentagePosition = (scroll / screenHeight.current) * 100;\n\n  return { position: percentagePosition };\n};\n\nexport default useScroll;\n"]},"metadata":{},"sourceType":"module"}