{"ast":null,"code":"const findFrontOfLine = (string, cursorPosition) => {\n  let findingIndex = cursorPosition[0];\n  let isFindFront = true;\n\n  while (isFindFront) {\n    if (string[findingIndex - 1] === '\\n') {\n      isFindFront = false;\n      break;\n    }\n\n    if (findingIndex === 0) {\n      break;\n    }\n\n    findingIndex -= 1;\n  }\n\n  return findingIndex;\n};\n\nconst insertTextFront = ({\n  input,\n  positionToInsert,\n  insertText\n}) => {\n  const markDownForFront = ['# ', '## ', '### ', '> '];\n  const beforeText = input.slice(positionToInsert, 5);\n  const newInput = input.slice(0, positionToInsert) + insertText + input.slice(positionToInsert);\n  return newInput;\n};\n\nconst editInputText = ({\n  event,\n  input,\n  setInput,\n  cursorPosition\n}) => {\n  const isSelected = cursorPosition[0] !== cursorPosition[1];\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      break;\n\n    default:\n      break;\n  }\n\n  const newInput = insertTextFront({\n    input,\n    positionToInsert,\n    insertText\n  });\n  setInput(newInput);\n};\n\nexport default editInputText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/editInputText.ts"],"names":["findFrontOfLine","string","cursorPosition","findingIndex","isFindFront","insertTextFront","input","positionToInsert","insertText","markDownForFront","beforeText","slice","newInput","editInputText","event","setInput","isSelected","iconClicked","currentTarget","className","baseVal"],"mappings":"AAeA,MAAMA,eAAe,GAAG,CAACC,MAAD,EAAiBC,cAAjB,KAAsD;AAC5E,MAAIC,YAAY,GAAGD,cAAc,CAAC,CAAD,CAAjC;AACA,MAAIE,WAAW,GAAG,IAAlB;;AACA,SAAOA,WAAP,EAAoB;AAClB,QAAIH,MAAM,CAACE,YAAY,GAAG,CAAhB,CAAN,KAA6B,IAAjC,EAAuC;AACrCC,MAAAA,WAAW,GAAG,KAAd;AAEA;AACD;;AACD,QAAID,YAAY,KAAK,CAArB,EAAwB;AACtB;AACD;;AACDA,IAAAA,YAAY,IAAI,CAAhB;AACD;;AACD,SAAOA,YAAP;AACD,CAfD;;AAiBA,MAAME,eAAe,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,gBAAT;AAA2BC,EAAAA;AAA3B,CAAD,KAAwE;AAC9F,QAAMC,gBAAgB,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,EAAsB,IAAtB,CAAzB;AACA,QAAMC,UAAU,GAAGJ,KAAK,CAACK,KAAN,CAAYJ,gBAAZ,EAA8B,CAA9B,CAAnB;AAEA,QAAMK,QAAQ,GAAGN,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeJ,gBAAf,IAAmCC,UAAnC,GAAgDF,KAAK,CAACK,KAAN,CAAYJ,gBAAZ,CAAjE;AACA,SAAOK,QAAP;AACD,CAND;;AAQA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASR,EAAAA,KAAT;AAAgBS,EAAAA,QAAhB;AAA0Bb,EAAAA;AAA1B,CAAD,KAAsE;AAC1F,QAAMc,UAAU,GAAGd,cAAc,CAAC,CAAD,CAAd,KAAsBA,cAAc,CAAC,CAAD,CAAvD;AACA,QAAMe,WAAW,GAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAA8BC,OAAlD;AACA,QAAMb,gBAAgB,GAAGP,eAAe,CAACM,KAAD,EAAQJ,cAAR,CAAxC;AACA,MAAIM,UAAU,GAAG,EAAjB;;AACA,UAAQS,WAAR;AACE,SAAK,IAAL;AACET,MAAAA,UAAU,GAAG,IAAb;AACA;;AAEF,SAAK,IAAL;AACEA,MAAAA,UAAU,GAAG,KAAb;AACA;;AAEF,SAAK,IAAL;AACEA,MAAAA,UAAU,GAAG,MAAb;AACA;;AAEF,SAAK,MAAL;AACEA,MAAAA,UAAU,GAAG,SAAb;AACA;;AAEF,SAAK,QAAL;AACEA,MAAAA,UAAU,GAAG,OAAb;AACA;;AAEF,SAAK,MAAL;AACEA,MAAAA,UAAU,GAAG,aAAb;AACA;;AAEF,SAAK,OAAL;AACEA,MAAAA,UAAU,GAAG,IAAb;AACA;;AAEF;AACE;AA9BJ;;AAgCA,QAAMI,QAAQ,GAAGP,eAAe,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,gBAAT;AAA2BC,IAAAA;AAA3B,GAAD,CAAhC;AACAO,EAAAA,QAAQ,CAACH,QAAD,CAAR;AACD,CAvCD;;AAyCA,eAAeC,aAAf","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  setInput: Dispatch<SetStateAction<string>>;\n  cursorPosition: number[];\n}\n\ninterface IInsertFrontProps {\n  input: string;\n  positionToInsert: number;\n  insertText: string;\n}\n\nconst findFrontOfLine = (string: string, cursorPosition: number[]): number => {\n  let findingIndex = cursorPosition[0];\n  let isFindFront = true;\n  while (isFindFront) {\n    if (string[findingIndex - 1] === '\\n') {\n      isFindFront = false;\n\n      break;\n    }\n    if (findingIndex === 0) {\n      break;\n    }\n    findingIndex -= 1;\n  }\n  return findingIndex;\n};\n\nconst insertTextFront = ({ input, positionToInsert, insertText }: IInsertFrontProps): string => {\n  const markDownForFront = ['# ', '## ', '### ', '> '];\n  const beforeText = input.slice(positionToInsert, 5);\n\n  const newInput = input.slice(0, positionToInsert) + insertText + input.slice(positionToInsert);\n  return newInput;\n};\n\nconst editInputText = ({ event, input, setInput, cursorPosition }: IEditTextProps): void => {\n  const isSelected = cursorPosition[0] !== cursorPosition[1];\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      break;\n\n    default:\n      break;\n  }\n  const newInput = insertTextFront({ input, positionToInsert, insertText });\n  setInput(newInput);\n};\n\nexport default editInputText;\n"]},"metadata":{},"sourceType":"module"}