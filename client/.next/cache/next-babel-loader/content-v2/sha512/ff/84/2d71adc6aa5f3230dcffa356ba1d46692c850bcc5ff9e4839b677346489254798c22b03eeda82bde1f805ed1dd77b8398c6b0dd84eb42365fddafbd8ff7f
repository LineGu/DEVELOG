{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/atoms/TextInput/TextInput.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nvar StyledTextInput = styled.textarea.withConfig({\n  displayName: \"TextInput__StyledTextInput\",\n  componentId: \"udzm0i-0\"\n})([\"border:none;outline:none;resize:none;pointer-events:auto;\"]);\n_c = StyledTextInput;\n\nfunction TextInput(textAreaProperty) {\n  var placeholder = textAreaProperty.placeholder,\n      _onChange = textAreaProperty.onChange,\n      _onFocus = textAreaProperty.onFocus,\n      _onBlur = textAreaProperty.onBlur,\n      _onKeyDown = textAreaProperty.onKeyDown,\n      className = textAreaProperty.className,\n      state = textAreaProperty.state,\n      setState = textAreaProperty.setState;\n  return /*#__PURE__*/_jsxDEV(StyledTextInput, {\n    className: className,\n    placeholder: placeholder,\n    spellCheck: \"false\",\n    value: state,\n    onChange: function onChange(event) {\n      if (_onChange) {\n        _onChange(event);\n\n        return;\n      }\n\n      var TextAreaValue = event.target.value;\n      setState(TextAreaValue);\n    },\n    onFocus: function onFocus() {\n      if (!_onFocus) return;\n\n      _onFocus();\n    },\n    onBlur: function onBlur() {\n      if (!_onBlur) return;\n\n      _onBlur();\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (!_onKeyDown) return;\n\n      _onKeyDown(event);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = TextInput;\nexport default TextInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledTextInput\");\n$RefreshReg$(_c2, \"TextInput\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/atoms/TextInput/TextInput.tsx"],"names":["React","styled","StyledTextInput","textarea","TextInput","textAreaProperty","placeholder","onChange","onFocus","onBlur","onKeyDown","className","state","setState","event","TextAreaValue","target","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,IAAMC,eAAe,GAAGD,MAAM,CAACE,QAAV;AAAA;AAAA;AAAA,iEAArB;KAAMD,e;;AAON,SAASE,SAAT,CAAmBC,gBAAnB,EAAoE;AAAA,MAC1DC,WAD0D,GACwBD,gBADxB,CAC1DC,WAD0D;AAAA,MAC7CC,SAD6C,GACwBF,gBADxB,CAC7CE,QAD6C;AAAA,MACnCC,QADmC,GACwBH,gBADxB,CACnCG,OADmC;AAAA,MAC1BC,OAD0B,GACwBJ,gBADxB,CAC1BI,MAD0B;AAAA,MAClBC,UADkB,GACwBL,gBADxB,CAClBK,SADkB;AAAA,MACPC,SADO,GACwBN,gBADxB,CACPM,SADO;AAAA,MACIC,KADJ,GACwBP,gBADxB,CACIO,KADJ;AAAA,MACWC,QADX,GACwBR,gBADxB,CACWQ,QADX;AAGlE,sBACE,QAAC,eAAD;AACE,IAAA,SAAS,EAAEF,SADb;AAEE,IAAA,WAAW,EAAEL,WAFf;AAGE,IAAA,UAAU,EAAC,OAHb;AAIE,IAAA,KAAK,EAAEM,KAJT;AAKE,IAAA,QAAQ,EAAE,kBAACE,KAAD,EAAW;AACnB,UAAIP,SAAJ,EAAc;AACZA,QAAAA,SAAQ,CAACO,KAAD,CAAR;;AACA;AACD;;AACD,UAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAnC;AACAJ,MAAAA,QAAQ,CAACE,aAAD,CAAR;AACD,KAZH;AAaE,IAAA,OAAO,EAAE,mBAAM;AACb,UAAI,CAACP,QAAL,EAAc;;AACdA,MAAAA,QAAO;AACR,KAhBH;AAiBE,IAAA,MAAM,EAAE,kBAAM;AACZ,UAAI,CAACC,OAAL,EAAa;;AACbA,MAAAA,OAAM;AACP,KApBH;AAqBE,IAAA,SAAS,EAAE,mBAACK,KAAD,EAAW;AACpB,UAAI,CAACJ,UAAL,EAAgB;;AAChBA,MAAAA,UAAS,CAACI,KAAD,CAAT;AACD;AAxBH;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;MA/BQV,S;AAiCT,eAAeA,SAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { ITextInputProps } from '@interfaces';\n\nconst StyledTextInput = styled.textarea`\n  border: none;\n  outline: none;\n  resize: none;\n  pointer-events: auto;\n`;\n\nfunction TextInput(textAreaProperty: ITextInputProps): ReactElement {\n  const { placeholder, onChange, onFocus, onBlur, onKeyDown, className, state, setState } = textAreaProperty;\n\n  return (\n    <StyledTextInput\n      className={className}\n      placeholder={placeholder}\n      spellCheck=\"false\"\n      value={state}\n      onChange={(event) => {\n        if (onChange) {\n          onChange(event);\n          return;\n        }\n        const TextAreaValue = event.target.value;\n        setState(TextAreaValue);\n      }}\n      onFocus={() => {\n        if (!onFocus) return;\n        onFocus();\n      }}\n      onBlur={() => {\n        if (!onBlur) return;\n        onBlur();\n      }}\n      onKeyDown={(event) => {\n        if (!onKeyDown) return;\n        onKeyDown(event);\n      }}\n    />\n  );\n}\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}