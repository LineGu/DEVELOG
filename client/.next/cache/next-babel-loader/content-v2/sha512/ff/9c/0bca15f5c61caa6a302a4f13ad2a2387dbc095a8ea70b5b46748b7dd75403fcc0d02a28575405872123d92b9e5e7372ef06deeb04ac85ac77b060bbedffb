{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isEmptyLine, hideLastSlash, createTextsByLine } from '@utils/markdown/markdown';\nexport default class Controller {\n  constructor() {\n    _defineProperty(this, \"_blankStr\", '\\\\\\n');\n\n    _defineProperty(this, \"applyLineBlank\", input => {\n      let updatedInput = input.replace(/\\n/gi, this._blankStr);\n      let TextsByLine = createTextsByLine(updatedInput);\n      const lastLineIdx = TextsByLine.length - 1;\n      const lastLine = TextsByLine[lastLineIdx];\n      if (isEmptyLine(lastLine)) updatedInput = hideLastSlash(updatedInput);\n      TextsByLine = createTextsByLine(updatedInput);\n      console.log(updatedInput); // let isFirstSlash = false;\n      // // TextsByLine.forEach((str, index) => {\n      // //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n      // //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n      // //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n      // //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n      // //   const isEmptyLine = str === '\\\\';\n      // //   if (!isEmptyLine) isFirstSlash = false;\n      // //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      // //     isFirstSlash = true;\n      // //     strList[index] = '\\n\\\\\\n&nbsp;';\n      // //   }\n      // //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      // //     isFirstSlash = true;\n      // //     strList[index] = '\\n\\\\';\n      // //   }\n      // // });\n\n      updatedInput = TextsByLine.join('\\n');\n      return updatedInput;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/Controller/index.ts"],"names":["isEmptyLine","hideLastSlash","createTextsByLine","Controller","input","updatedInput","replace","_blankStr","TextsByLine","lastLineIdx","length","lastLine","console","log","join"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,iBAArC,QAA8D,0BAA9D;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAAA;AAAA,uCACV,MADU;;AAAA,4CAGZC,KAAD,IAA2B;AAC1C,UAAIC,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAc,MAAd,EAAsB,KAAKC,SAA3B,CAAnB;AACA,UAAIC,WAAW,GAAGN,iBAAiB,CAACG,YAAD,CAAnC;AACA,YAAMI,WAAW,GAAGD,WAAW,CAACE,MAAZ,GAAqB,CAAzC;AACA,YAAMC,QAAQ,GAAGH,WAAW,CAACC,WAAD,CAA5B;AAEA,UAAIT,WAAW,CAACW,QAAD,CAAf,EAA2BN,YAAY,GAAGJ,aAAa,CAACI,YAAD,CAA5B;AAC3BG,MAAAA,WAAW,GAAGN,iBAAiB,CAACG,YAAD,CAA/B;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ,EAR0C,CAS1C;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAAA,YAAY,GAAGG,WAAW,CAACM,IAAZ,CAAiB,IAAjB,CAAf;AACA,aAAOT,YAAP;AACD,KAnC6B;AAAA;;AAAA","sourcesContent":["import { isEmptyLine, hideLastSlash, createTextsByLine } from '@utils/markdown/markdown';\n\nexport default class Controller {\n  private _blankStr = '\\\\\\n';\n\n  applyLineBlank = (input: string): string => {\n    let updatedInput = input.replace(/\\n/gi, this._blankStr);\n    let TextsByLine = createTextsByLine(updatedInput);\n    const lastLineIdx = TextsByLine.length - 1;\n    const lastLine = TextsByLine[lastLineIdx];\n\n    if (isEmptyLine(lastLine)) updatedInput = hideLastSlash(updatedInput);\n    TextsByLine = createTextsByLine(updatedInput);\n    console.log(updatedInput);\n    // let isFirstSlash = false;\n    // // TextsByLine.forEach((str, index) => {\n    // //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    // //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n\n    // //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    // //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n\n    // //   const isEmptyLine = str === '\\\\';\n    // //   if (!isEmptyLine) isFirstSlash = false;\n\n    // //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\\\n&nbsp;';\n    // //   }\n    // //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\';\n    // //   }\n    // // });\n\n    updatedInput = TextsByLine.join('\\n');\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}