{"ast":null,"code":"import _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar Editor = /*#__PURE__*/function () {\n  function Editor() {\n    _classCallCheck(this, Editor);\n\n    _defineProperty(this, \"insertionText\", void 0);\n\n    _defineProperty(this, \"stringToInsert\", {\n      h1: '# ',\n      h2: '## ',\n      h3: '### ',\n      bold: '**텍스트**',\n      italic: '_텍스트_',\n      link: '[링크텍스트](링크)',\n      quote: '> ',\n      code: '\\n```\\nCode\\n```\\n',\n      checkbox: '- [ ] ',\n      img: '',\n      table: ''\n    });\n\n    _defineProperty(this, \"insertText\", function (text, input, indexForInsertion) {\n      var frontPart = input.slice(0, indexForInsertion);\n      var backPart = input.slice(indexForInsertion);\n      var updatedText = frontPart + text + backPart;\n      return updatedText;\n    });\n\n    _defineProperty(this, \"findSideEdges\", function (input, cursorPosition) {\n      var currentPoint = cursorPosition[0];\n      var frontPart = input.slice(0, currentPoint);\n      var backPart = input.slice(currentPoint);\n      var frontEdgeIndex = frontPart.lastIndexOf('\\n') + 1;\n      var backEdgeIndex = frontEdgeIndex + backPart.indexOf('\\n') + 1;\n      console.log([frontPart, backPart]);\n      return [frontEdgeIndex, backEdgeIndex];\n    });\n  }\n\n  _createClass(Editor, [{\n    key: \"createImgString\",\n    value: function createImgString(url) {\n      this.stringToInsert.img = \"\\n![](\".concat(url, \")\\n\");\n    }\n  }, {\n    key: \"createTableString\",\n    value: function createTableString(tableCount) {\n      var _ref = tableCount !== null && tableCount !== void 0 ? tableCount : [-1, -1],\n          _ref2 = _slicedToArray(_ref, 2),\n          row = _ref2[0],\n          column = _ref2[1];\n\n      var rowText = \"|\".concat('    |'.repeat(row), \"\\n|\").concat('----|'.repeat(row));\n      var columnText = '\\n'.concat('|', '    |'.repeat(row));\n      this.stringToInsert.table = \"\\n\\n\".concat(rowText).concat(columnText.repeat(column - 1), \"\\n\\n\");\n    }\n  }]);\n\n  return Editor;\n}();\n\nexport { Editor as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/Editor.ts"],"names":["Editor","h1","h2","h3","bold","italic","link","quote","code","checkbox","img","table","text","input","indexForInsertion","frontPart","slice","backPart","updatedText","cursorPosition","currentPoint","frontEdgeIndex","lastIndexOf","backEdgeIndex","indexOf","console","log","url","stringToInsert","tableCount","row","column","rowText","repeat","columnText"],"mappings":";;;;;IAe8BA,M;;;;;;4CAGM;AAChCC,MAAAA,EAAE,EAAE,IAD4B;AAEhCC,MAAAA,EAAE,EAAE,KAF4B;AAGhCC,MAAAA,EAAE,EAAE,MAH4B;AAIhCC,MAAAA,IAAI,EAAE,SAJ0B;AAKhCC,MAAAA,MAAM,EAAE,OALwB;AAMhCC,MAAAA,IAAI,EAAE,aAN0B;AAOhCC,MAAAA,KAAK,EAAE,IAPyB;AAQhCC,MAAAA,IAAI,EAAE,oBAR0B;AAShCC,MAAAA,QAAQ,EAAE,QATsB;AAUhCC,MAAAA,GAAG,EAAE,EAV2B;AAWhCC,MAAAA,KAAK,EAAE;AAXyB,K;;wCAgBd,UAACC,IAAD,EAAeC,KAAf,EAA8BC,iBAA9B,EAAoE;AACtF,UAAMC,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeF,iBAAf,CAAlB;AACA,UAAMG,QAAQ,GAAGJ,KAAK,CAACG,KAAN,CAAYF,iBAAZ,CAAjB;AACA,UAAMI,WAAW,GAAGH,SAAS,GAAGH,IAAZ,GAAmBK,QAAvC;AACA,aAAOC,WAAP;AACD,K;;2CAEsB,UAACL,KAAD,EAAgBM,cAAhB,EAAuD;AAC5E,UAAMC,YAAY,GAAGD,cAAc,CAAC,CAAD,CAAnC;AACA,UAAMJ,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeI,YAAf,CAAlB;AACA,UAAMH,QAAQ,GAAGJ,KAAK,CAACG,KAAN,CAAYI,YAAZ,CAAjB;AACA,UAAMC,cAAc,GAAGN,SAAS,CAACO,WAAV,CAAsB,IAAtB,IAA8B,CAArD;AACA,UAAMC,aAAa,GAAGF,cAAc,GAAGJ,QAAQ,CAACO,OAAT,CAAiB,IAAjB,CAAjB,GAA0C,CAAhE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACX,SAAD,EAAYE,QAAZ,CAAZ;AACA,aAAO,CAACI,cAAD,EAAiBE,aAAjB,CAAP;AACD,K;;;;;oCAEsBI,G,EAAmB;AACxC,WAAKC,cAAL,CAAoBlB,GAApB,mBAAmCiB,GAAnC;AACD;;;sCAEwBE,U,EAA4B;AAAA,iBAC7BA,UAD6B,aAC7BA,UAD6B,cAC7BA,UAD6B,GACf,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CADe;AAAA;AAAA,UAC5CC,GAD4C;AAAA,UACvCC,MADuC;;AAEnD,UAAMC,OAAO,cAAO,QAAQC,MAAR,CAAeH,GAAf,CAAP,gBAAgC,QAAQG,MAAR,CAAeH,GAAf,CAAhC,CAAb;AACA,UAAMI,UAAU,GAAM,IAAN,QAAa,GAAb,EAAmB,QAAQD,MAAR,CAAeH,GAAf,CAAnB,CAAhB;AAEA,WAAKF,cAAL,CAAoBjB,KAApB,iBAAmCqB,OAAnC,SAA6CE,UAAU,CAACD,MAAX,CAAkBF,MAAM,GAAG,CAA3B,CAA7C;AACD;;;;;;SA9C2B/B,M","sourcesContent":["type editType = {\n  [index: string]: string;\n  h1: string;\n  h2: string;\n  h3: string;\n  bold: string;\n  italic: string;\n  link: string;\n  quote: string;\n  code: string;\n  checkbox: string;\n  img: string;\n  table: string;\n};\n\nexport default abstract class Editor {\n  public abstract insertionText: string;\n\n  public stringToInsert: editType = {\n    h1: '# ',\n    h2: '## ',\n    h3: '### ',\n    bold: '**텍스트**',\n    italic: '_텍스트_',\n    link: '[링크텍스트](링크)',\n    quote: '> ',\n    code: '\\n```\\nCode\\n```\\n',\n    checkbox: '- [ ] ',\n    img: '',\n    table: '',\n  };\n\n  public abstract editInput(input: string, cursorPosition: number[]): { updatedText: string; cursorToGo: number[] };\n\n  public insertText = (text: string, input: string, indexForInsertion: number): string => {\n    const frontPart = input.slice(0, indexForInsertion);\n    const backPart = input.slice(indexForInsertion);\n    const updatedText = frontPart + text + backPart;\n    return updatedText;\n  };\n\n  public findSideEdges = (input: string, cursorPosition: number[]): number[] => {\n    const currentPoint = cursorPosition[0];\n    const frontPart = input.slice(0, currentPoint);\n    const backPart = input.slice(currentPoint);\n    const frontEdgeIndex = frontPart.lastIndexOf('\\n') + 1;\n    const backEdgeIndex = frontEdgeIndex + backPart.indexOf('\\n') + 1;\n    console.log([frontPart, backPart]);\n    return [frontEdgeIndex, backEdgeIndex];\n  };\n\n  public createImgString(url: string): void {\n    this.stringToInsert.img = `\\n![](${url})\\n`;\n  }\n\n  public createTableString(tableCount: number[]): void {\n    const [row, column] = tableCount ?? [-1, -1];\n    const rowText = `|${'    |'.repeat(row)}\\n|${'----|'.repeat(row)}`;\n    const columnText = `${'\\n'}${'|'}${'    |'.repeat(row)}`;\n\n    this.stringToInsert.table = `\\n\\n${rowText}${columnText.repeat(column - 1)}\\n\\n`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}