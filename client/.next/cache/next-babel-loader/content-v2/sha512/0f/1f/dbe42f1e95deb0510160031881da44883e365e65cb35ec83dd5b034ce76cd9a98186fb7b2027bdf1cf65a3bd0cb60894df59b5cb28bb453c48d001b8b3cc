{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/molecules/TableModal/Block.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useCallback } from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport addTable from '@utils/addTable';\nvar BoxUnit = styled.div.withConfig({\n  displayName: \"Block__BoxUnit\",\n  componentId: \"sc-1h0y9qe-0\"\n})([\"width:20px;height:20px;margin:2px;padding:0;border:1px solid \", \";background-color:\", \";\"], function (_ref) {\n  var color = _ref.color;\n  return color === Theme.HEADER_BACK ? Theme.OUT_LINE : Theme.HEADER_BACK;\n}, function (_ref2) {\n  var color = _ref2.color;\n  return color;\n});\n_c = BoxUnit;\n\nfunction Block(_ref3) {\n  _s();\n\n  var _this = this;\n\n  var blockPorps = _ref3.blockPorps;\n  var checkedPoint = blockPorps.checkedPoint,\n      tableProps = blockPorps.tableProps,\n      setCheckedPoint = blockPorps.setCheckedPoint,\n      resetCheckedPoint = blockPorps.resetCheckedPoint;\n  var rowBlockLength = 10;\n  var columnBlockLength = 8;\n  var rowBlockCount = new Array(rowBlockLength).fill(0);\n  var columnBlockCount = new Array(columnBlockLength).fill(0);\n\n  var _checkedPoint = _slicedToArray(checkedPoint, 2),\n      xPoint = _checkedPoint[0],\n      yPoint = _checkedPoint[1];\n\n  var addTableByClick = useCallback(function () {\n    var rowCount = xPoint + 1,\n        columnCount = yPoint + 1;\n\n    var newTableProps = _objectSpread({\n      tableCount: [rowCount, columnCount]\n    }, tableProps);\n\n    addTable(newTableProps);\n    resetCheckedPoint();\n  }, [checkedPoint]);\n  var updateCheckedPoint = useCallback(function (event) {\n    var _event$currentTarget$ = event.currentTarget.id.split(','),\n        _event$currentTarget$2 = _slicedToArray(_event$currentTarget$, 2),\n        xPointStr = _event$currentTarget$2[0],\n        yPointStr = _event$currentTarget$2[1];\n\n    var newCheckedPoint = [parseInt(xPointStr, 10), parseInt(yPointStr, 10)];\n    setCheckedPoint(newCheckedPoint);\n    event.stopPropagation();\n  }, []);\n  var setBoxColor = useCallback(function (columnNum, rowNum) {\n    var isCheckedBlock = checkedPoint[0] >= columnNum && checkedPoint[1] >= rowNum;\n    return isCheckedBlock ? Theme.HEADER_BACK : Theme.MODAL_EDIT;\n  }, [checkedPoint]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: columnBlockCount.map(function (__, rowNum) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"block_row_box\",\n        onClick: addTableByClick,\n        onMouseOver: function onMouseOver(event) {\n          return event.stopPropagation();\n        },\n        children: rowBlockCount.map(function (_, colNum) {\n          return /*#__PURE__*/_jsxDEV(BoxUnit, {\n            id: \"\".concat(colNum, \",\").concat(rowNum),\n            onMouseOver: updateCheckedPoint,\n            color: setBoxColor(colNum, rowNum)\n          }, colNum, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, _this);\n    })\n  }, \"d\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Block, \"b0e2TGu4FVcL/8cwVdoY0bYtyNA=\");\n\n_c2 = Block;\nexport default Block;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BoxUnit\");\n$RefreshReg$(_c2, \"Block\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/molecules/TableModal/Block.tsx"],"names":["React","Fragment","useCallback","styled","Theme","addTable","BoxUnit","div","color","HEADER_BACK","OUT_LINE","Block","blockPorps","checkedPoint","tableProps","setCheckedPoint","resetCheckedPoint","rowBlockLength","columnBlockLength","rowBlockCount","Array","fill","columnBlockCount","xPoint","yPoint","addTableByClick","rowCount","columnCount","newTableProps","tableCount","updateCheckedPoint","event","currentTarget","id","split","xPointStr","yPointStr","newCheckedPoint","parseInt","stopPropagation","setBoxColor","columnNum","rowNum","isCheckedBlock","MODAL_EDIT","map","__","_","colNum"],"mappings":"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","sourcesContent":["import React, { Fragment, ReactElement, useCallback } from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport addTable from '@utils/addTable';\nimport { setStateNumberArr } from '@types';\nimport { IOnHoverDivFunc } from '@eventInterfaces';\nimport { ITableProps } from '@interfaces';\n\ninterface IBlockProps {\n  blockPorps: {\n    checkedPoint: number[];\n    setCheckedPoint: setStateNumberArr;\n    resetCheckedPoint: () => void;\n    tableProps: ITableProps;\n  };\n}\n\nconst BoxUnit = styled.div<{ color: string }>`\n  width: 20px;\n  height: 20px;\n  margin: 2px;\n  padding: 0;\n  border: 1px solid ${({ color }) => (color === Theme.HEADER_BACK ? Theme.OUT_LINE : Theme.HEADER_BACK)};\n  background-color: ${({ color }) => color};\n`;\n\nfunction Block({ blockPorps }: IBlockProps): ReactElement {\n  const { checkedPoint, tableProps, setCheckedPoint, resetCheckedPoint } = blockPorps;\n  const rowBlockLength = 10;\n  const columnBlockLength = 8;\n  const rowBlockCount = new Array(rowBlockLength).fill(0);\n  const columnBlockCount = new Array(columnBlockLength).fill(0);\n  const [xPoint, yPoint] = checkedPoint;\n\n  const addTableByClick = useCallback(() => {\n    const [rowCount, columnCount] = [xPoint + 1, yPoint + 1];\n    const newTableProps = { tableCount: [rowCount, columnCount], ...tableProps };\n    addTable(newTableProps);\n    resetCheckedPoint();\n  }, [checkedPoint]);\n\n  const updateCheckedPoint: IOnHoverDivFunc = useCallback((event) => {\n    const [xPointStr, yPointStr] = event.currentTarget.id.split(',');\n    const newCheckedPoint = [parseInt(xPointStr, 10), parseInt(yPointStr, 10)];\n    setCheckedPoint(newCheckedPoint);\n    event.stopPropagation();\n  }, []);\n\n  const setBoxColor = useCallback(\n    (columnNum, rowNum) => {\n      const isCheckedBlock = checkedPoint[0] >= columnNum && checkedPoint[1] >= rowNum;\n      return isCheckedBlock ? Theme.HEADER_BACK : Theme.MODAL_EDIT;\n    },\n    [checkedPoint],\n  );\n\n  return (\n    <Fragment key=\"d\">\n      {columnBlockCount.map((__, rowNum) => (\n        <div className=\"block_row_box\" onClick={addTableByClick} onMouseOver={(event) => event.stopPropagation()}>\n          {rowBlockCount.map((_, colNum) => (\n            <BoxUnit\n              key={colNum}\n              id={`${colNum},${rowNum}`}\n              onMouseOver={updateCheckedPoint}\n              color={setBoxColor(colNum, rowNum)}\n            />\n          ))}\n        </div>\n      ))}\n    </Fragment>\n  );\n}\n\nexport default Block;\n"]},"metadata":{},"sourceType":"module"}