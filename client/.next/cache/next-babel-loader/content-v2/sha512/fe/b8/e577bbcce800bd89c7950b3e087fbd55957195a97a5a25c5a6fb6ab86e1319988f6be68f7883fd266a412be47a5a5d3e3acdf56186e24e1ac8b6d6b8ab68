{"ast":null,"code":"import Theme from '@constants/Theme';\nimport { fadeInTextBox, fadeOutTextBox } from '@utils/animaiton/fadeText';\nvar TEXT_PERIOD = 4000;\nvar MINIMUM_GAP_BOXES = '1%';\n\nvar changeNextOrder = function changeNextOrder(_ref) {\n  var isMounted = _ref.isMounted,\n      color = _ref.color,\n      textList = _ref.textList,\n      setColor = _ref.setColor,\n      setIntro = _ref.setIntro;\n  var currentListIndex = 1;\n  var newColor = color;\n  var timerToChange = setInterval(function () {\n    if (!isMounted) {\n      clearInterval(timerToChange);\n      return;\n    }\n\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    var isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nvar animateIntroduceText = function animateIntroduceText(props) {\n  var textList = props.textList,\n      isMounted = props.isMounted,\n      color = props.color,\n      setMargin = props.setMargin,\n      setColor = props.setColor,\n      setOpacity = props.setOpacity,\n      setIntro = props.setIntro;\n  setMargin(MINIMUM_GAP_BOXES);\n  fadeOutTextBox({\n    isMounted: isMounted,\n    setMargin: setMargin,\n    setOpacity: setOpacity\n  });\n  fadeInTextBox({\n    isMounted: isMounted,\n    setMargin: setMargin,\n    setOpacity: setOpacity\n  });\n  changeNextOrder({\n    isMounted: isMounted,\n    color: color,\n    textList: textList,\n    setColor: setColor,\n    setIntro: setIntro\n  });\n};\n\nexport default animateIntroduceText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/animaiton/animateText.ts"],"names":["Theme","fadeInTextBox","fadeOutTextBox","TEXT_PERIOD","MINIMUM_GAP_BOXES","changeNextOrder","isMounted","color","textList","setColor","setIntro","currentListIndex","newColor","timerToChange","setInterval","clearInterval","BLACK","POINT","isOverList","length","animateIntroduceText","props","setMargin","setOpacity"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,2BAA9C;AAuBA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,iBAAiB,GAAG,IAA1B;;AAEA,IAAMC,eAAiC,GAAG,SAApCA,eAAoC,OAAwD;AAAA,MAArDC,SAAqD,QAArDA,SAAqD;AAAA,MAA1CC,KAA0C,QAA1CA,KAA0C;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAChG,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,QAAQ,GAAGL,KAAf;AACA,MAAMM,aAAa,GAAGC,WAAW,CAAC,YAAM;AACtC,QAAI,CAACR,SAAL,EAAgB;AACdS,MAAAA,aAAa,CAACF,aAAD,CAAb;AACA;AACD;;AACDD,IAAAA,QAAQ,GAAGA,QAAQ,KAAKZ,KAAK,CAACgB,KAAnB,GAA2BhB,KAAK,CAACiB,KAAjC,GAAyCjB,KAAK,CAACgB,KAA1D;AACAP,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACAF,IAAAA,QAAQ,CAACF,QAAQ,CAACG,gBAAD,CAAT,CAAR;AACAA,IAAAA,gBAAgB,IAAI,CAApB;AACA,QAAMO,UAAU,GAAGP,gBAAgB,GAAGH,QAAQ,CAACW,MAAT,GAAkB,CAAxD;AACAR,IAAAA,gBAAgB,GAAGO,UAAU,GAAG,CAAH,GAAOP,gBAApC;AACD,GAXgC,EAW9BR,WAX8B,CAAjC;AAYD,CAfD;;AAiBA,IAAMiB,oBAAsC,GAAG,SAAzCA,oBAAyC,CAACC,KAAD,EAAW;AAAA,MAChDb,QADgD,GAC0Ba,KAD1B,CAChDb,QADgD;AAAA,MACtCF,SADsC,GAC0Be,KAD1B,CACtCf,SADsC;AAAA,MAC3BC,KAD2B,GAC0Bc,KAD1B,CAC3Bd,KAD2B;AAAA,MACpBe,SADoB,GAC0BD,KAD1B,CACpBC,SADoB;AAAA,MACTb,QADS,GAC0BY,KAD1B,CACTZ,QADS;AAAA,MACCc,UADD,GAC0BF,KAD1B,CACCE,UADD;AAAA,MACab,QADb,GAC0BW,KAD1B,CACaX,QADb;AAExDY,EAAAA,SAAS,CAAClB,iBAAD,CAAT;AAEAF,EAAAA,cAAc,CAAC;AAAEI,IAAAA,SAAS,EAATA,SAAF;AAAagB,IAAAA,SAAS,EAATA,SAAb;AAAwBC,IAAAA,UAAU,EAAVA;AAAxB,GAAD,CAAd;AACAtB,EAAAA,aAAa,CAAC;AAAEK,IAAAA,SAAS,EAATA,SAAF;AAAagB,IAAAA,SAAS,EAATA,SAAb;AAAwBC,IAAAA,UAAU,EAAVA;AAAxB,GAAD,CAAb;AACAlB,EAAAA,eAAe,CAAC;AAAEC,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,KAAK,EAALA,KAAb;AAAoBC,IAAAA,QAAQ,EAARA,QAApB;AAA8BC,IAAAA,QAAQ,EAARA,QAA9B;AAAwCC,IAAAA,QAAQ,EAARA;AAAxC,GAAD,CAAf;AACD,CAPD;;AASA,eAAeU,oBAAf","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\nimport { IColorProps } from '@types';\nimport Theme from '@constants/Theme';\nimport { fadeInTextBox, fadeOutTextBox } from '@utils/animaiton/fadeText';\n\ninterface IFadeInOutProps {\n  isMounted: boolean;\n  setMargin: Dispatch<SetStateAction<string>>;\n  setOpacity: Dispatch<SetStateAction<string>>;\n}\n\ninterface IChangeOrderProps extends IColorProps {\n  isMounted: boolean;\n  textList: string[];\n  setColor: Dispatch<SetStateAction<string>>;\n  setIntro: Dispatch<SetStateAction<string>>;\n}\n\ninterface IChangeOrderFunc {\n  (props: IChangeOrderProps): void;\n}\n\ninterface IAnimateTextFunc {\n  (props: IFadeInOutProps & IChangeOrderProps): void;\n}\n\nconst TEXT_PERIOD = 4000;\nconst MINIMUM_GAP_BOXES = '1%';\n\nconst changeNextOrder: IChangeOrderFunc = ({ isMounted, color, textList, setColor, setIntro }) => {\n  let currentListIndex = 1;\n  let newColor = color;\n  const timerToChange = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToChange);\n      return;\n    }\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    const isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nconst animateIntroduceText: IAnimateTextFunc = (props) => {\n  const { textList, isMounted, color, setMargin, setColor, setOpacity, setIntro } = props;\n  setMargin(MINIMUM_GAP_BOXES);\n\n  fadeOutTextBox({ isMounted, setMargin, setOpacity });\n  fadeInTextBox({ isMounted, setMargin, setOpacity });\n  changeNextOrder({ isMounted, color, textList, setColor, setIntro });\n};\n\nexport default animateIntroduceText;\n"]},"metadata":{},"sourceType":"module"}