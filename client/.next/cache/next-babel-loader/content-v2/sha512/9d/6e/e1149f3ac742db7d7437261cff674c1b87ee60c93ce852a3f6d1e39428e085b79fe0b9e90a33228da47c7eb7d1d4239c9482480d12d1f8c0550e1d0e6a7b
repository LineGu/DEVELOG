{"ast":null,"code":"const applyLineBlank = input => {\n  let updatedInput = input.replace(/\\n/gi, '\\\\\\n');\n  const hasBlankInLastLine = updatedInput.slice(updatedInput.length - 1, updatedInput.length) === '\\n';\n  if (hasBlankInLastLine) updatedInput += '&nbsp;';\n  const strList = updatedInput.split('\\n');\n  let isFirstSlash = false;\n  updatedInput.split('\\n').forEach((str, index) => {\n    const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n    const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n    const isEmptyLine = str === '\\\\';\n    if (!isEmptyLine) isFirstSlash = false;\n\n    if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\\\n&nbsp;';\n    }\n\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\';\n    }\n  });\n  updatedInput = strList.join('\\n');\n  return updatedInput;\n};\n\nexport default applyLineBlank;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdown/applyLineBlank.ts"],"names":["applyLineBlank","input","updatedInput","replace","hasBlankInLastLine","slice","length","strList","split","isFirstSlash","forEach","str","index","isEndEmptyLines","hasSlashAtEndOfLine","isEmptyLine","join"],"mappings":"AAAA,MAAMA,cAAc,GAAIC,KAAD,IAA2B;AAChD,MAAIC,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAc,MAAd,EAAsB,MAAtB,CAAnB;AAEA,QAAMC,kBAAkB,GAAGF,YAAY,CAACG,KAAb,CAAmBH,YAAY,CAACI,MAAb,GAAsB,CAAzC,EAA4CJ,YAAY,CAACI,MAAzD,MAAqE,IAAhG;AACA,MAAIF,kBAAJ,EAAwBF,YAAY,IAAI,QAAhB;AAExB,QAAMK,OAAO,GAAGL,YAAY,CAACM,KAAb,CAAmB,IAAnB,CAAhB;AAEA,MAAIC,YAAY,GAAG,KAAnB;AACAP,EAAAA,YAAY,CAACM,KAAb,CAAmB,IAAnB,EAAyBE,OAAzB,CAAiC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/C,UAAMC,eAAe,GAAG,EAAEF,GAAG,KAAK,IAAR,IAAgBJ,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,KAAuB,IAAvC,IAA+CD,GAAG,KAAK,QAAzD,CAAxB;AACA,QAAI,CAACE,eAAL,EAAsBN,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,IAAsB,UAAtB;AAEtB,UAAME,mBAAmB,GAAGH,GAAG,CAACL,MAAJ,KAAe,CAAf,IAAoBK,GAAG,CAACN,KAAJ,CAAUM,GAAG,CAACL,MAAJ,GAAa,CAAvB,EAA0BK,GAAG,CAACL,MAA9B,MAA0C,IAA1F;AACA,QAAIQ,mBAAJ,EAAyBP,OAAO,CAACK,KAAD,CAAP,GAAiBD,GAAG,CAACN,KAAJ,CAAU,CAAV,EAAaM,GAAG,CAACL,MAAJ,GAAa,CAA1B,CAAjB;AAEzB,UAAMS,WAAW,GAAGJ,GAAG,KAAK,IAA5B;AACA,QAAI,CAACI,WAAL,EAAkBN,YAAY,GAAG,KAAf;;AAElB,QAAIM,WAAW,IAAIN,YAAY,KAAK,KAAhC,IAAyCF,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,KAAuB,IAApE,EAA0E;AACxEH,MAAAA,YAAY,GAAG,IAAf;AACAF,MAAAA,OAAO,CAACK,KAAD,CAAP,GAAiB,cAAjB;AACD;;AACD,QAAID,GAAG,KAAK,IAAR,IAAgBF,YAAY,KAAK,KAAjC,IAA0CF,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,KAAuB,IAArE,EAA2E;AACzEH,MAAAA,YAAY,GAAG,IAAf;AACAF,MAAAA,OAAO,CAACK,KAAD,CAAP,GAAiB,MAAjB;AACD;AACF,GAlBD;AAoBAV,EAAAA,YAAY,GAAGK,OAAO,CAACS,IAAR,CAAa,IAAb,CAAf;AACA,SAAOd,YAAP;AACD,CA/BD;;AAiCA,eAAeF,cAAf","sourcesContent":["const applyLineBlank = (input: string): string => {\n  let updatedInput = input.replace(/\\n/gi, '\\\\\\n');\n\n  const hasBlankInLastLine = updatedInput.slice(updatedInput.length - 1, updatedInput.length) === '\\n';\n  if (hasBlankInLastLine) updatedInput += '&nbsp;';\n\n  const strList = updatedInput.split('\\n');\n\n  let isFirstSlash = false;\n  updatedInput.split('\\n').forEach((str, index) => {\n    const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n\n    const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n\n    const isEmptyLine = str === '\\\\';\n    if (!isEmptyLine) isFirstSlash = false;\n\n    if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\\\n&nbsp;';\n    }\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\';\n    }\n  });\n\n  updatedInput = strList.join('\\n');\n  return updatedInput;\n};\n\nexport default applyLineBlank;\n"]},"metadata":{},"sourceType":"module"}