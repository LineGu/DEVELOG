{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport Theme from '@theme/index';\nimport useDependencyTheme from './useDependencyTheme';\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\n\nconst useTextLoop = introduceList => {\n  useDependencyTheme();\n  const {\n    0: margin,\n    1: setMargin\n  } = useState('100%');\n  const {\n    0: color,\n    1: setColor\n  } = useState(Theme.POINT);\n  const {\n    0: opacity,\n    1: setOpacity\n  } = useState('100%');\n  const {\n    0: introduce,\n    1: setIntro\n  } = useState(introduceList[0]);\n  useEffect(() => {\n    let isMounted = true;\n    let newColor = color;\n    let currentListIndex = 1;\n    setMargin('1%');\n    const setTimingText = setTimeout(() => {\n      if (!isMounted) {\n        clearTimeout(setTimingText);\n        return;\n      }\n\n      setMargin('100%');\n      setOpacity('0%');\n      const hideText = setInterval(() => {\n        if (!isMounted) {\n          clearInterval(hideText);\n          return;\n        }\n\n        setMargin('100%');\n        setOpacity('0%');\n      }, TEXT_PERIOD);\n    }, REPEAT_START_TIMING);\n    const timerToShow = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(timerToShow);\n        return;\n      }\n\n      setMargin('1%');\n      newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n      setColor(newColor);\n      setOpacity('100%');\n      setIntro(introduceList[currentListIndex]);\n      currentListIndex += 1;\n      const isOverList = currentListIndex > introduceList.length - 1;\n      currentListIndex = isOverList ? 0 : currentListIndex;\n    }, TEXT_PERIOD);\n    return function cleanUp() {\n      isMounted = false;\n    };\n  }, []);\n  return {\n    margin,\n    color,\n    opacity,\n    introduce\n  };\n};\n\nexport default useTextLoop;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useTextLoop.tsx"],"names":["useState","useEffect","Theme","useDependencyTheme","REPEAT_START_TIMING","TEXT_PERIOD","useTextLoop","introduceList","margin","setMargin","color","setColor","POINT","opacity","setOpacity","introduce","setIntro","isMounted","newColor","currentListIndex","setTimingText","setTimeout","clearTimeout","hideText","setInterval","clearInterval","timerToShow","BLACK","isOverList","length","cleanUp"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AAMA,MAAMC,mBAAmB,GAAG,IAA5B;AACA,MAAMC,WAAW,GAAG,IAApB;;AAEA,MAAMC,WAAW,GAAIC,aAAD,IAA8C;AAChEJ,EAAAA,kBAAkB;AAClB,QAAM;AAAA,OAACK,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAS,MAAT,CAApC;AACA,QAAM;AAAA,OAACU,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAASE,KAAK,CAACU,KAAf,CAAlC;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAS,MAAT,CAAtC;AACA,QAAM;AAAA,OAACe,SAAD;AAAA,OAAYC;AAAZ,MAAwBhB,QAAQ,CAASO,aAAa,CAAC,CAAD,CAAtB,CAAtC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,SAAS,GAAG,IAAhB;AACA,QAAIC,QAAQ,GAAGR,KAAf;AACA,QAAIS,gBAAgB,GAAG,CAAvB;AAEAV,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA,UAAMW,aAAa,GAAGC,UAAU,CAAC,MAAM;AACrC,UAAI,CAACJ,SAAL,EAAgB;AACdK,QAAAA,YAAY,CAACF,aAAD,CAAZ;AACA;AACD;;AACDX,MAAAA,SAAS,CAAC,MAAD,CAAT;AACAK,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAI,CAACP,SAAL,EAAgB;AACdQ,UAAAA,aAAa,CAACF,QAAD,CAAb;AACA;AACD;;AACDd,QAAAA,SAAS,CAAC,MAAD,CAAT;AACAK,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAP2B,EAOzBT,WAPyB,CAA5B;AAQD,KAf+B,EAe7BD,mBAf6B,CAAhC;AAiBA,UAAMsB,WAAW,GAAGF,WAAW,CAAC,MAAM;AACpC,UAAI,CAACP,SAAL,EAAgB;AACdQ,QAAAA,aAAa,CAACC,WAAD,CAAb;AACA;AACD;;AACDjB,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAS,MAAAA,QAAQ,GAAGA,QAAQ,KAAKhB,KAAK,CAACyB,KAAnB,GAA2BzB,KAAK,CAACU,KAAjC,GAAyCV,KAAK,CAACyB,KAA1D;AACAhB,MAAAA,QAAQ,CAACO,QAAD,CAAR;AACAJ,MAAAA,UAAU,CAAC,MAAD,CAAV;AACAE,MAAAA,QAAQ,CAACT,aAAa,CAACY,gBAAD,CAAd,CAAR;AAEAA,MAAAA,gBAAgB,IAAI,CAApB;AACA,YAAMS,UAAU,GAAGT,gBAAgB,GAAGZ,aAAa,CAACsB,MAAd,GAAuB,CAA7D;AACAV,MAAAA,gBAAgB,GAAGS,UAAU,GAAG,CAAH,GAAOT,gBAApC;AACD,KAd8B,EAc5Bd,WAd4B,CAA/B;AAgBA,WAAO,SAASyB,OAAT,GAAmB;AACxBb,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GA1CQ,EA0CN,EA1CM,CAAT;AA4CA,SAAO;AAAET,IAAAA,MAAF;AAAUE,IAAAA,KAAV;AAAiBG,IAAAA,OAAjB;AAA0BE,IAAAA;AAA1B,GAAP;AACD,CApDD;;AAsDA,eAAeT,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport Theme from '@theme/index';\nimport { IDynamicStyledProps, IColorProps } from '@interfaces';\nimport useDependencyTheme from './useDependencyTheme';\n\ninterface ITextLoopReturn extends IDynamicStyledProps, IColorProps {\n  introduce: string;\n}\n\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\n\nconst useTextLoop = (introduceList: string[]): ITextLoopReturn => {\n  useDependencyTheme();\n  const [margin, setMargin] = useState<string>('100%');\n  const [color, setColor] = useState<string>(Theme.POINT);\n  const [opacity, setOpacity] = useState<string>('100%');\n  const [introduce, setIntro] = useState<string>(introduceList[0]);\n\n  useEffect(() => {\n    let isMounted = true;\n    let newColor = color;\n    let currentListIndex = 1;\n\n    setMargin('1%');\n    const setTimingText = setTimeout(() => {\n      if (!isMounted) {\n        clearTimeout(setTimingText);\n        return;\n      }\n      setMargin('100%');\n      setOpacity('0%');\n      const hideText = setInterval(() => {\n        if (!isMounted) {\n          clearInterval(hideText);\n          return;\n        }\n        setMargin('100%');\n        setOpacity('0%');\n      }, TEXT_PERIOD);\n    }, REPEAT_START_TIMING);\n\n    const timerToShow = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(timerToShow);\n        return;\n      }\n      setMargin('1%');\n      newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n      setColor(newColor);\n      setOpacity('100%');\n      setIntro(introduceList[currentListIndex]);\n\n      currentListIndex += 1;\n      const isOverList = currentListIndex > introduceList.length - 1;\n      currentListIndex = isOverList ? 0 : currentListIndex;\n    }, TEXT_PERIOD);\n\n    return function cleanUp() {\n      isMounted = false;\n    };\n  }, []);\n\n  return { margin, color, opacity, introduce };\n};\n\nexport default useTextLoop;\n"]},"metadata":{},"sourceType":"module"}