{"ast":null,"code":"import { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\n\nconst useUploadImg = async file => {\n  const {\n    0: uploadProgress,\n    1: setUploadProgress\n  } = useState(0);\n  const isUploadingState = useRef(false);\n  const uploadInfo = {\n    data: '',\n    process: isUploadingState.current ? uploadProgress : 0,\n    error: ''\n  };\n  const isExcessSize = file.size > 5000000;\n  if (isUploadingState.current) return uploadInfo;\n\n  const getUploadProgress = ProgressEvent => {\n    const progress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100);\n    setUploadProgress(progress);\n  };\n\n  if (file && isExcessSize) {\n    uploadInfo.error = 'EXCESS';\n    return uploadInfo;\n  }\n\n  const imgData = new FormData();\n  imgData.append('image', file);\n\n  try {\n    const postConfig = {\n      headers: headerOption,\n      onUploadProgress: ProgressEvent => getUploadProgress(ProgressEvent)\n    };\n    isUploadingState.current = true;\n    const response = await axios.post(url.IMGUR, imgData, postConfig);\n    const imgLink = response.data.data.link;\n    uploadInfo.data = imgLink;\n    isUploadingState.current = false;\n    return uploadInfo;\n  } catch (err) {\n    uploadInfo.error = err;\n    return uploadInfo;\n  }\n};\n\nexport default useUploadImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useUploadImg.ts"],"names":["useState","useRef","axios","headerOption","url","useUploadImg","file","uploadProgress","setUploadProgress","isUploadingState","uploadInfo","data","process","current","error","isExcessSize","size","getUploadProgress","ProgressEvent","progress","Math","round","loaded","total","imgData","FormData","append","postConfig","headers","onUploadProgress","response","post","IMGUR","imgLink","link","err"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAQA,MAAMC,YAAY,GAAG,MAAOC,IAAP,IAA4C;AAC/D,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCR,QAAQ,CAAS,CAAT,CAApD;AACA,QAAMS,gBAAgB,GAAGR,MAAM,CAAC,KAAD,CAA/B;AACA,QAAMS,UAAU,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,OAAO,EAAEH,gBAAgB,CAACI,OAAjB,GAA2BN,cAA3B,GAA4C,CAFpC;AAGjBO,IAAAA,KAAK,EAAE;AAHU,GAAnB;AAKA,QAAMC,YAAY,GAAGT,IAAI,CAACU,IAAL,GAAY,OAAjC;AACA,MAAIP,gBAAgB,CAACI,OAArB,EAA8B,OAAOH,UAAP;;AAE9B,QAAMO,iBAAiB,GAAIC,aAAD,IAAkC;AAC1D,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACK,KAAtC,GAA+C,GAA1D,CAAjB;AACAf,IAAAA,iBAAiB,CAACW,QAAD,CAAjB;AACD,GAHD;;AAKA,MAAIb,IAAI,IAAIS,YAAZ,EAA0B;AACxBL,IAAAA,UAAU,CAACI,KAAX,GAAmB,QAAnB;AACA,WAAOJ,UAAP;AACD;;AAED,QAAMc,OAAO,GAAG,IAAIC,QAAJ,EAAhB;AACAD,EAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBpB,IAAxB;;AAEA,MAAI;AACF,UAAMqB,UAAU,GAAG;AACjBC,MAAAA,OAAO,EAAEzB,YADQ;AAEjB0B,MAAAA,gBAAgB,EAAGX,aAAD,IAAkCD,iBAAiB,CAACC,aAAD;AAFpD,KAAnB;AAIAT,IAAAA,gBAAgB,CAACI,OAAjB,GAA2B,IAA3B;AACA,UAAMiB,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAN,CAAW3B,GAAG,CAAC4B,KAAf,EAAsBR,OAAtB,EAA+BG,UAA/B,CAAvB;AACA,UAAMM,OAAO,GAAGH,QAAQ,CAACnB,IAAT,CAAcA,IAAd,CAAmBuB,IAAnC;AACAxB,IAAAA,UAAU,CAACC,IAAX,GAAkBsB,OAAlB;AACAxB,IAAAA,gBAAgB,CAACI,OAAjB,GAA2B,KAA3B;AACA,WAAOH,UAAP;AACD,GAXD,CAWE,OAAOyB,GAAP,EAAY;AACZzB,IAAAA,UAAU,CAACI,KAAX,GAAmBqB,GAAnB;AACA,WAAOzB,UAAP;AACD;AACF,CAvCD;;AAyCA,eAAeL,YAAf","sourcesContent":["import { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\n\ninterface IuploadInfo {\n  data: string;\n  process: number;\n  error: string;\n}\n\nconst useUploadImg = async (file: File): Promise<IuploadInfo> => {\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const isUploadingState = useRef(false);\n  const uploadInfo = {\n    data: '',\n    process: isUploadingState.current ? uploadProgress : 0,\n    error: '',\n  };\n  const isExcessSize = file.size > 5000000;\n  if (isUploadingState.current) return uploadInfo;\n\n  const getUploadProgress = (ProgressEvent: ProgressEvent) => {\n    const progress = Math.round((ProgressEvent.loaded / ProgressEvent.total) * 100);\n    setUploadProgress(progress);\n  };\n\n  if (file && isExcessSize) {\n    uploadInfo.error = 'EXCESS';\n    return uploadInfo;\n  }\n\n  const imgData = new FormData();\n  imgData.append('image', file);\n\n  try {\n    const postConfig = {\n      headers: headerOption,\n      onUploadProgress: (ProgressEvent: ProgressEvent) => getUploadProgress(ProgressEvent),\n    };\n    isUploadingState.current = true;\n    const response = await axios.post(url.IMGUR, imgData, postConfig);\n    const imgLink = response.data.data.link;\n    uploadInfo.data = imgLink;\n    isUploadingState.current = false;\n    return uploadInfo;\n  } catch (err) {\n    uploadInfo.error = err;\n    return uploadInfo;\n  }\n};\n\nexport default useUploadImg;\n"]},"metadata":{},"sourceType":"module"}