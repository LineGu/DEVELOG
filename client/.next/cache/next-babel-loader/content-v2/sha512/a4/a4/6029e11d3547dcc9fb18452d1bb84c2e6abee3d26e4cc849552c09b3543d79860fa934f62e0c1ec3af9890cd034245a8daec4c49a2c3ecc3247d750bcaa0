{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/atoms/TextInput/TextInput.tsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nconst StyledTextInput = styled.textarea.withConfig({\n  displayName: \"TextInput__StyledTextInput\",\n  componentId: \"udzm0i-0\"\n})([\"border:none;outline:none;resize:none;pointer-events:auto;\"]);\n\nfunction TextInput(textAreaProperty) {\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    placeholder,\n    onChange,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    className\n  } = textAreaProperty;\n  return /*#__PURE__*/_jsxDEV(StyledTextInput, {\n    className: className,\n    placeholder: placeholder,\n    spellCheck: \"false\",\n    value: text,\n    onChange: event => {\n      if (onChange) {\n        onChange({\n          event,\n          setText\n        });\n        return;\n      }\n\n      setText(event.target.value);\n    },\n    onFocus: event => {\n      if (!onFocus) return;\n      onFocus(event);\n    },\n    onBlur: event => {\n      if (!onBlur) return;\n      onBlur(event);\n    },\n    onKeyDown: event => {\n      if (!onKeyDown) return;\n      onKeyDown({\n        event,\n        text,\n        setText\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\nexport default TextInput;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/atoms/TextInput/TextInput.tsx"],"names":["React","useState","styled","StyledTextInput","textarea","TextInput","textAreaProperty","text","setText","placeholder","onChange","onFocus","onBlur","onKeyDown","className","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAwBA,MAAMC,eAAe,GAAGD,MAAM,CAACE,QAAV;AAAA;AAAA;AAAA,iEAArB;;AAOA,SAASC,SAAT,CAAmBC,gBAAnB,EAAoE;AAClE,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEQ,IAAAA,WAAF;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,MAAlC;AAA0CC,IAAAA,SAA1C;AAAqDC,IAAAA;AAArD,MAAmER,gBAAzE;AAEA,sBACE,QAAC,eAAD;AACE,IAAA,SAAS,EAAEQ,SADb;AAEE,IAAA,WAAW,EAAEL,WAFf;AAGE,IAAA,UAAU,EAAC,OAHb;AAIE,IAAA,KAAK,EAAEF,IAJT;AAKE,IAAA,QAAQ,EAAGQ,KAAD,IAAW;AACnB,UAAIL,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAAC;AAAEK,UAAAA,KAAF;AAASP,UAAAA;AAAT,SAAD,CAAR;AACA;AACD;;AACDA,MAAAA,OAAO,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD,KAXH;AAYE,IAAA,OAAO,EAAGF,KAAD,IAAW;AAClB,UAAI,CAACJ,OAAL,EAAc;AACdA,MAAAA,OAAO,CAACI,KAAD,CAAP;AACD,KAfH;AAgBE,IAAA,MAAM,EAAGA,KAAD,IAAW;AACjB,UAAI,CAACH,MAAL,EAAa;AACbA,MAAAA,MAAM,CAACG,KAAD,CAAN;AACD,KAnBH;AAoBE,IAAA,SAAS,EAAGA,KAAD,IAAW;AACpB,UAAI,CAACF,SAAL,EAAgB;AAChBA,MAAAA,SAAS,CAAC;AAAEE,QAAAA,KAAF;AAASR,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAD,CAAT;AACD;AAvBH;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;AAED,eAAeH,SAAf","sourcesContent":["import React, { Dispatch, ReactElement, SetStateAction, useState } from 'react';\nimport styled from 'styled-components';\nimport { IComponentProps } from '@interfaces';\n\ninterface ITextState {\n  text?: string;\n  setText: Dispatch<SetStateAction<string>>;\n}\n\ninterface IChangeEventProps extends ITextState {\n  event: React.ChangeEvent<HTMLTextAreaElement>;\n}\n\ninterface IKeyboardEventProps extends ITextState {\n  event: React.KeyboardEvent<HTMLTextAreaElement>;\n}\n\ninterface ITextInputProps extends IComponentProps {\n  placeholder: string;\n  onChange?: (props: IChangeEventProps) => void;\n  onFocus?: (event?: React.FocusEvent<HTMLTextAreaElement>, setState?: Dispatch<SetStateAction<string>>) => void;\n  onBlur?: (event?: React.FocusEvent<HTMLTextAreaElement>, setState?: Dispatch<SetStateAction<string>>) => void;\n  onKeyDown?: (props: IKeyboardEventProps) => void;\n}\n\nconst StyledTextInput = styled.textarea`\n  border: none;\n  outline: none;\n  resize: none;\n  pointer-events: auto;\n`;\n\nfunction TextInput(textAreaProperty: ITextInputProps): ReactElement {\n  const [text, setText] = useState('');\n  const { placeholder, onChange, onFocus, onBlur, onKeyDown, className } = textAreaProperty;\n\n  return (\n    <StyledTextInput\n      className={className}\n      placeholder={placeholder}\n      spellCheck=\"false\"\n      value={text}\n      onChange={(event) => {\n        if (onChange) {\n          onChange({ event, setText });\n          return;\n        }\n        setText(event.target.value);\n      }}\n      onFocus={(event) => {\n        if (!onFocus) return;\n        onFocus(event);\n      }}\n      onBlur={(event) => {\n        if (!onBlur) return;\n        onBlur(event);\n      }}\n      onKeyDown={(event) => {\n        if (!onKeyDown) return;\n        onKeyDown({ event, text, setText });\n      }}\n    />\n  );\n}\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}