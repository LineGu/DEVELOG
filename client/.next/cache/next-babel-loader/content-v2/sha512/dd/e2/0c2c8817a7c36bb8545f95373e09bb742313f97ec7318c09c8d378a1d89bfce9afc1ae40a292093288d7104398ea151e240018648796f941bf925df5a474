{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/theme/themeProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from 'react';\nimport Theme, { LightMode, DarkMode } from './index';\nexport var ThemeContext = /*#__PURE__*/createContext({});\n\nfunction ThemeModeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState('LightMode'),\n      mode = _useState[0],\n      setMode = _useState[1];\n\n  var changeMode = function changeMode() {\n    var newMode = mode === 'LightMode' ? 'DarkMode' : 'LightMode';\n    setMode(newMode);\n  };\n\n  var newTheme = mode === 'LightMode' ? LightMode : DarkMode;\n  Object.keys(newTheme).forEach(function (key) {\n    Theme[key] = newTheme[key];\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode: mode,\n      changeMode: changeMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ThemeModeProvider, \"LLvYm/Ftv8vIoGAMM10gvGnr7ao=\");\n\n_c = ThemeModeProvider;\nexport default ThemeModeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeModeProvider\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/theme/themeProvider.tsx"],"names":["React","useState","createContext","Theme","LightMode","DarkMode","ThemeContext","ThemeModeProvider","children","mode","setMode","changeMode","newMode","newTheme","Object","keys","forEach","key"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAwCC,aAAxC,QAAwE,OAAxE;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAsD,SAAtD;AAWA,OAAO,IAAMC,YAAY,gBAAGJ,aAAa,CAAmB,EAAnB,CAAlC;;AAEP,SAASK,iBAAT,OAA0E;AAAA;;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;;AAAA,kBAChDP,QAAQ,CAAC,WAAD,CADwC;AAAA,MACjEQ,IADiE;AAAA,MAC3DC,OAD2D;;AAGxE,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAMC,OAAO,GAAGH,IAAI,KAAK,WAAT,GAAuB,UAAvB,GAAoC,WAApD;AACAC,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GAHD;;AAKA,MAAMC,QAAmB,GAAGJ,IAAI,KAAK,WAAT,GAAuBL,SAAvB,GAAmCC,QAA/D;AAEAS,EAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8B,UAACC,GAAD,EAAe;AAC3Cd,IAAAA,KAAK,CAACc,GAAD,CAAL,GAAaJ,QAAQ,CAACI,GAAD,CAArB;AACD,GAFD;AAGA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAER,MAAAA,IAAI,EAAJA,IAAF;AAAQE,MAAAA,UAAU,EAAVA;AAAR,KAA9B;AAAA,cAAqDH;AAArD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAdQD,iB;;KAAAA,iB;AAgBT,eAAeA,iBAAf","sourcesContent":["import React, { useState, ReactElement, createContext, ReactNode } from 'react';\nimport Theme, { LightMode, DarkMode, ThemeType } from './index';\n\ntype themeContextType = {\n  mode?: string;\n  changeMode?: () => void;\n};\n\ntype providerPropsType = {\n  children: ReactNode;\n};\n\nexport const ThemeContext = createContext<themeContextType>({});\n\nfunction ThemeModeProvider({ children }: providerPropsType): ReactElement {\n  const [mode, setMode] = useState('LightMode');\n\n  const changeMode = () => {\n    const newMode = mode === 'LightMode' ? 'DarkMode' : 'LightMode';\n    setMode(newMode);\n  };\n\n  const newTheme: ThemeType = mode === 'LightMode' ? LightMode : DarkMode;\n\n  Object.keys(newTheme).forEach((key): void => {\n    Theme[key] = newTheme[key];\n  });\n  return <ThemeContext.Provider value={{ mode, changeMode }}>{children}</ThemeContext.Provider>;\n}\n\nexport default ThemeModeProvider;\n"]},"metadata":{},"sourceType":"module"}