{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Theme from '@theme/index';\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\nconst MINIMUM_GAP_BOXES = '1%';\nconst MAXIMUM_GAP_BOXES = '100%';\nconst NUM_HIDE_TEXT = '0%';\nconst NUM_SHOW_TEXT = '100%';\n\nconst fadeOut = props => {\n  const {\n    isMounted,\n    setMargin,\n    setOpacity,\n    timer\n  } = props;\n\n  if (!isMounted) {\n    clearTimeout(timer);\n    return;\n  }\n\n  setMargin(MAXIMUM_GAP_BOXES);\n  setOpacity(NUM_HIDE_TEXT);\n};\n\nconst fadeOutTextBox = props => {\n  const setTimingText = setTimeout(() => {\n    fadeOut(_objectSpread(_objectSpread({}, props), {}, {\n      timer: setTimingText\n    }));\n    const hideText = setInterval(() => {\n      fadeOut(_objectSpread(_objectSpread({}, props), {}, {\n        timer: hideText\n      }));\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n};\n\nconst fadeInTextBox = ({\n  isMounted,\n  setMargin,\n  setOpacity\n}) => {\n  const timerToShow = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToShow);\n      return;\n    }\n\n    setMargin(MINIMUM_GAP_BOXES);\n    setOpacity(NUM_SHOW_TEXT);\n  }, TEXT_PERIOD);\n};\n\nconst changeNextOrder = ({\n  isMounted,\n  color,\n  textList,\n  setColor,\n  setIntro\n}) => {\n  let currentListIndex = 1;\n  let newColor = color;\n  const timerToChange = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToChange);\n      return;\n    }\n\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    const isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nconst animateIntroduceText = props => {\n  const {\n    textList,\n    isMounted,\n    color,\n    setMargin,\n    setColor,\n    setOpacity,\n    setIntro\n  } = props;\n  setMargin(MINIMUM_GAP_BOXES);\n  fadeOutTextBox({\n    isMounted,\n    setMargin,\n    setOpacity\n  });\n  fadeInTextBox({\n    isMounted,\n    setMargin,\n    setOpacity\n  });\n  changeNextOrder({\n    isMounted,\n    color,\n    textList,\n    setColor,\n    setIntro\n  });\n};\n\nexport default animateIntroduceText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/animateText.ts"],"names":["Theme","REPEAT_START_TIMING","TEXT_PERIOD","MINIMUM_GAP_BOXES","MAXIMUM_GAP_BOXES","NUM_HIDE_TEXT","NUM_SHOW_TEXT","fadeOut","props","isMounted","setMargin","setOpacity","timer","clearTimeout","fadeOutTextBox","setTimingText","setTimeout","hideText","setInterval","fadeInTextBox","timerToShow","clearInterval","changeNextOrder","color","textList","setColor","setIntro","currentListIndex","newColor","timerToChange","BLACK","POINT","isOverList","length","animateIntroduceText"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\nimport { IColorProps } from '@interfaces';\nimport Theme from '@theme/index';\n\ninterface IFadeTextProps {\n  isMounted: boolean;\n  setMargin: Dispatch<SetStateAction<string>>;\n  setOpacity: Dispatch<SetStateAction<string>>;\n}\n\ninterface IFadeProps extends IFadeTextProps {\n  timer: NodeJS.Timeout;\n}\ninterface IFadeFunc {\n  (props: IFadeProps): void;\n}\n\ninterface IChangeOrderProps extends IColorProps {\n  isMounted: boolean;\n  textList: string[];\n  setColor: Dispatch<SetStateAction<string>>;\n  setIntro: Dispatch<SetStateAction<string>>;\n}\n\ninterface IFadeTextFunc {\n  (props: IFadeTextProps): void;\n}\n\ninterface IChangeOrderFunc {\n  (props: IChangeOrderProps): void;\n}\n\ninterface IAnimateTextFunc {\n  (props: IFadeTextProps & IChangeOrderProps): void;\n}\n\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\nconst MINIMUM_GAP_BOXES = '1%';\nconst MAXIMUM_GAP_BOXES = '100%';\nconst NUM_HIDE_TEXT = '0%';\nconst NUM_SHOW_TEXT = '100%';\n\nconst fadeOut: IFadeFunc = (props) => {\n  const { isMounted, setMargin, setOpacity, timer } = props;\n  if (!isMounted) {\n    clearTimeout(timer);\n    return;\n  }\n  setMargin(MAXIMUM_GAP_BOXES);\n  setOpacity(NUM_HIDE_TEXT);\n};\n\nconst fadeOutTextBox: IFadeTextFunc = (props) => {\n  const setTimingText = setTimeout(() => {\n    fadeOut({ ...props, timer: setTimingText });\n    const hideText = setInterval(() => {\n      fadeOut({ ...props, timer: hideText });\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n};\n\nconst fadeInTextBox: IFadeTextFunc = ({ isMounted, setMargin, setOpacity }) => {\n  const timerToShow = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToShow);\n      return;\n    }\n    setMargin(MINIMUM_GAP_BOXES);\n    setOpacity(NUM_SHOW_TEXT);\n  }, TEXT_PERIOD);\n};\n\nconst changeNextOrder: IChangeOrderFunc = ({ isMounted, color, textList, setColor, setIntro }) => {\n  let currentListIndex = 1;\n  let newColor = color;\n  const timerToChange = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToChange);\n      return;\n    }\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    const isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nconst animateIntroduceText: IAnimateTextFunc = (props) => {\n  const { textList, isMounted, color, setMargin, setColor, setOpacity, setIntro } = props;\n  setMargin(MINIMUM_GAP_BOXES);\n\n  fadeOutTextBox({ isMounted, setMargin, setOpacity });\n  fadeInTextBox({ isMounted, setMargin, setOpacity });\n  changeNextOrder({ isMounted, color, textList, setColor, setIntro });\n};\n\nexport default animateIntroduceText;\n"]},"metadata":{},"sourceType":"module"}