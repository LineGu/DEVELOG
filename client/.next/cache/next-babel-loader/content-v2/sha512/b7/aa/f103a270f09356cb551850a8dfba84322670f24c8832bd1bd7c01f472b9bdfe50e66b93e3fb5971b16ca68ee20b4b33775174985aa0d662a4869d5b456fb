{"ast":null,"code":"import _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport CurrentInsertion from '../Abstract/CurrentInsertion';\n\nvar TableEditor = /*#__PURE__*/function (_CurrentInsertion) {\n  _inherits(TableEditor, _CurrentInsertion);\n\n  var _super = _createSuper(TableEditor);\n\n  function TableEditor() {\n    var _this;\n\n    _classCallCheck(this, TableEditor);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"textToInsert\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"indexToInsert\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"indexToGo\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"indexsToMove\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickEditButton\", function (_ref) {\n      var input = _ref.input,\n          currentCursorIndex = _ref.currentCursorIndex,\n          moveCursor = _ref.moveCursor,\n          tableCount = _ref.tableCount;\n\n      _this.setTextToInsert(tableCount);\n\n      _this.setIndexToInsert(currentCursorIndex);\n\n      _this.setIndexToGo(currentCursorIndex);\n\n      var updatedText = _this.insertText(input);\n\n      _this.moveCursorAfterEdit(moveCursor);\n\n      return updatedText;\n    });\n\n    _this.textToInsert = '';\n    _this.indexsToMove = [3, 3];\n    _this.indexToInsert = 0;\n    _this.indexToGo = [0, 0];\n    return _this;\n  }\n\n  _createClass(TableEditor, [{\n    key: \"setTextToInsert\",\n    value: function setTextToInsert(tableCount) {\n      var _ref2 = tableCount !== null && tableCount !== void 0 ? tableCount : [-1, -1],\n          _ref3 = _slicedToArray(_ref2, 2),\n          row = _ref3[0],\n          column = _ref3[1];\n\n      var rowText = \"|\".concat('    |'.repeat(row), \"\\n|\").concat('----|'.repeat(row));\n      var columnText = '\\n'.concat('|', '    |'.repeat(row));\n      this.textToInsert = \"\\n\\n\".concat(rowText).concat(columnText.repeat(column - 1), \"\\n\\n\");\n    }\n  }]);\n\n  return TableEditor;\n}(CurrentInsertion);\n\nexport { TableEditor as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/Editors/Table.ts"],"names":["CurrentInsertion","TableEditor","input","currentCursorIndex","moveCursor","tableCount","setTextToInsert","setIndexToInsert","setIndexToGo","updatedText","insertText","moveCursorAfterEdit","textToInsert","indexsToMove","indexToInsert","indexToGo","row","column","rowText","repeat","columnText"],"mappings":";;;;;;;;;;;;;AACA,OAAOA,gBAAP,MAA6B,8BAA7B;;IAMqBC,W;;;;;AASnB,yBAAc;AAAA;;AAAA;;AACZ;;AADY;;AAAA;;AAAA;;AAAA;;AAAA,wEAea,gBAAoF;AAAA,UAAjFC,KAAiF,QAAjFA,KAAiF;AAAA,UAA1EC,kBAA0E,QAA1EA,kBAA0E;AAAA,UAAtDC,UAAsD,QAAtDA,UAAsD;AAAA,UAA1CC,UAA0C,QAA1CA,UAA0C;;AAC7G,YAAKC,eAAL,CAAqBD,UAArB;;AACA,YAAKE,gBAAL,CAAsBJ,kBAAtB;;AACA,YAAKK,YAAL,CAAkBL,kBAAlB;;AACA,UAAMM,WAAW,GAAG,MAAKC,UAAL,CAAgBR,KAAhB,CAApB;;AACA,YAAKS,mBAAL,CAAyBP,UAAzB;;AAEA,aAAOK,WAAP;AACD,KAvBa;;AAEZ,UAAKG,YAAL,GAAoB,EAApB;AACA,UAAKC,YAAL,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA,UAAKC,aAAL,GAAqB,CAArB;AACA,UAAKC,SAAL,GAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;AALY;AAMb;;;;oCAEyBV,U,EAA4B;AAAA,kBAC9BA,UAD8B,aAC9BA,UAD8B,cAC9BA,UAD8B,GAChB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CADgB;AAAA;AAAA,UAC7CW,GAD6C;AAAA,UACxCC,MADwC;;AAEpD,UAAMC,OAAO,cAAO,QAAQC,MAAR,CAAeH,GAAf,CAAP,gBAAgC,QAAQG,MAAR,CAAeH,GAAf,CAAhC,CAAb;AACA,UAAMI,UAAU,GAAM,IAAN,QAAa,GAAb,EAAmB,QAAQD,MAAR,CAAeH,GAAf,CAAnB,CAAhB;AACA,WAAKJ,YAAL,iBAA2BM,OAA3B,SAAqCE,UAAU,CAACD,MAAX,CAAkBF,MAAM,GAAG,CAA3B,CAArC;AACD;;;;EAtBsCjB,gB;;SAApBC,W","sourcesContent":["import { IOnClickEditButton } from '@interfaces';\nimport CurrentInsertion from '../Abstract/CurrentInsertion';\n\ninterface ITableEditProps extends IOnClickEditButton {\n  tableCount: number[];\n}\n\nexport default class TableEditor extends CurrentInsertion {\n  protected textToInsert: string;\n\n  protected indexToInsert: number;\n\n  protected indexToGo: number[];\n\n  protected indexsToMove: number[];\n\n  constructor() {\n    super();\n    this.textToInsert = '';\n    this.indexsToMove = [3, 3];\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n  protected setTextToInsert(tableCount: number[]): void {\n    const [row, column] = tableCount ?? [-1, -1];\n    const rowText = `|${'    |'.repeat(row)}\\n|${'----|'.repeat(row)}`;\n    const columnText = `${'\\n'}${'|'}${'    |'.repeat(row)}`;\n    this.textToInsert = `\\n\\n${rowText}${columnText.repeat(column - 1)}\\n\\n`;\n  }\n\n  public onClickEditButton = ({ input, currentCursorIndex, moveCursor, tableCount }: ITableEditProps): string => {\n    this.setTextToInsert(tableCount);\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n    const updatedText = this.insertText(input);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}