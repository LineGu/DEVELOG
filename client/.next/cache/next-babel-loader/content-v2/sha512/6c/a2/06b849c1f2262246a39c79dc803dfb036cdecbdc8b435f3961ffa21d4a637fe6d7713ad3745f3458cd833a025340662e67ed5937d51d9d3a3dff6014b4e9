{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/users/[id].tsx\",\n    _this = this;\n\nimport React from 'react';\nimport Layout from '../../components/Layout';\nimport ListDetail from '../../components/ListDetail';\n\nvar StaticPropsDetail = function StaticPropsDetail(_ref) {\n  var item = _ref.item,\n      errors = _ref.errors;\n\n  if (errors) {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      title: \"Error | Next.js + TypeScript Example\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'red'\n          },\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, _this), \" \", errors]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"\".concat(item ? item.name : 'User Detail', \" | Next.js + TypeScript Example\"),\n    children: item && /*#__PURE__*/_jsxDEV(ListDetail, {\n      item: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = StaticPropsDetail;\nexport var __N_SSG = true;\nexport default StaticPropsDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"StaticPropsDetail\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/users/[id].tsx"],"names":["React","Layout","ListDetail","StaticPropsDetail","item","errors","color","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAoC,OAApC;AAIA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;AAOA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA2C;AAAA,MAAxCC,IAAwC,QAAxCA,IAAwC;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;;AACnE,MAAIA,MAAJ,EAAY;AACV,wBACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,sCAAd;AAAA,6BACE;AAAA,gCACE;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,OACgDD,MADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF;AAOD;;AAED,sBACE,QAAC,MAAD;AAAQ,IAAA,KAAK,YAAKD,IAAI,GAAGA,IAAI,CAACG,IAAR,GAAe,aAAxB,oCAAb;AAAA,cACGH,IAAI,iBAAI,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADX;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAhBD;;KAAMD,iB;;AAkBN,eAAeA,iBAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport { GetStaticProps, GetStaticPaths } from 'next';\nimport { User } from '../../interfaces';\nimport { sampleUserData } from '../../utils/sample-data';\nimport Layout from '../../components/Layout';\nimport ListDetail from '../../components/ListDetail';\n\ntype Props = {\n  item?: User;\n  errors?: string;\n};\n\nconst StaticPropsDetail = ({ item, errors }: Props): ReactElement => {\n  if (errors) {\n    return (\n      <Layout title=\"Error | Next.js + TypeScript Example\">\n        <p>\n          <span style={{ color: 'red' }}>Error:</span> {errors}\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title={`${item ? item.name : 'User Detail'} | Next.js + TypeScript Example`}>\n      {item && <ListDetail item={item} />}\n    </Layout>\n  );\n};\n\nexport default StaticPropsDetail;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on users\n  const paths = sampleUserData.map((user) => ({\n    params: { id: user.id.toString() },\n  }));\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false };\n};\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  try {\n    const id = params?.id;\n    const item = sampleUserData.find((data) => data.id === Number(id));\n    // By returning { props: item }, the StaticPropsDetail component\n    // will receive `item` as a prop at build time\n    return { props: { item } };\n  } catch (err) {\n    return { props: { errors: err.message } };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}