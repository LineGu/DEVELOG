{"ast":null,"code":"import FrontInsertEditor from './FrontInsertEditor';\nimport CurrentInsertEditor from './CurrentInsertEditor';\nvar Editors = {\n  h1Editor: new FrontInsertEditor('h1'),\n  h2Editor: new FrontInsertEditor('h2'),\n  h3Editor: new FrontInsertEditor('h3'),\n  quoteEditor: new FrontInsertEditor('quote'),\n  checkboxEditor: new FrontInsertEditor('checkbox'),\n  boldEditor: new CurrentInsertEditor('bold'),\n  italicEditor: new CurrentInsertEditor('italic'),\n  linkEditor: new CurrentInsertEditor('link'),\n  codeEditor: new CurrentInsertEditor('code'),\n  tableEditor: new CurrentInsertEditor('table'),\n  imgEditor: new CurrentInsertEditor('img')\n};\n\nvar editByButton = function editByButton(_ref) {\n  var input = _ref.input,\n      event = _ref.event,\n      cursorPosition = _ref.cursorPosition,\n      _ref$tableCount = _ref.tableCount,\n      tableCount = _ref$tableCount === void 0 ? [0, 0] : _ref$tableCount,\n      _ref$url = _ref.url,\n      url = _ref$url === void 0 ? '' : _ref$url;\n  var editType = event.currentTarget.id;\n  var editorName = \"\".concat(editType, \"Editor\");\n  var editInputFunc = Editors[editorName].editInput;\n\n  if (editType === 'table') {\n    var tableEditor = Editors.tableEditor;\n    tableEditor.setTableText(tableCount);\n  }\n\n  if (editType === 'img') {\n    var imgEditor = Editors.imgEditor;\n    imgEditor.setImgText(url);\n  }\n\n  var _editInputFunc = editInputFunc(input, cursorPosition),\n      updatedText = _editInputFunc.updatedText,\n      cursorToGo = _editInputFunc.cursorToGo;\n\n  return {\n    updatedText: updatedText,\n    cursorToGo: cursorToGo\n  };\n};\n\nexport default editByButton;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/markdownEditor/index.ts"],"names":["FrontInsertEditor","CurrentInsertEditor","Editors","h1Editor","h2Editor","h3Editor","quoteEditor","checkboxEditor","boldEditor","italicEditor","linkEditor","codeEditor","tableEditor","imgEditor","editByButton","input","event","cursorPosition","tableCount","url","editType","currentTarget","id","editorName","editInputFunc","editInput","setTableText","setImgText","updatedText","cursorToGo"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AAmBA,IAAMC,OAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,IAAIH,iBAAJ,CAAsB,IAAtB,CADgB;AAE1BI,EAAAA,QAAQ,EAAE,IAAIJ,iBAAJ,CAAsB,IAAtB,CAFgB;AAG1BK,EAAAA,QAAQ,EAAE,IAAIL,iBAAJ,CAAsB,IAAtB,CAHgB;AAI1BM,EAAAA,WAAW,EAAE,IAAIN,iBAAJ,CAAsB,OAAtB,CAJa;AAK1BO,EAAAA,cAAc,EAAE,IAAIP,iBAAJ,CAAsB,UAAtB,CALU;AAM1BQ,EAAAA,UAAU,EAAE,IAAIP,mBAAJ,CAAwB,MAAxB,CANc;AAO1BQ,EAAAA,YAAY,EAAE,IAAIR,mBAAJ,CAAwB,QAAxB,CAPY;AAQ1BS,EAAAA,UAAU,EAAE,IAAIT,mBAAJ,CAAwB,MAAxB,CARc;AAS1BU,EAAAA,UAAU,EAAE,IAAIV,mBAAJ,CAAwB,MAAxB,CATc;AAU1BW,EAAAA,WAAW,EAAE,IAAIX,mBAAJ,CAAwB,OAAxB,CAVa;AAW1BY,EAAAA,SAAS,EAAE,IAAIZ,mBAAJ,CAAwB,KAAxB;AAXe,CAA5B;;AAcA,IAAMa,YAAY,GAAG,SAAfA,YAAe,OAMkB;AAAA,MALrCC,KAKqC,QALrCA,KAKqC;AAAA,MAJrCC,KAIqC,QAJrCA,KAIqC;AAAA,MAHrCC,cAGqC,QAHrCA,cAGqC;AAAA,6BAFrCC,UAEqC;AAAA,MAFrCA,UAEqC,gCAFxB,CAAC,CAAD,EAAI,CAAJ,CAEwB;AAAA,sBADrCC,GACqC;AAAA,MADrCA,GACqC,yBAD/B,EAC+B;AACrC,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,aAAN,CAAoBC,EAArC;AACA,MAAMC,UAAU,aAAMH,QAAN,WAAhB;AACA,MAAMI,aAAa,GAAGtB,OAAO,CAACqB,UAAD,CAAP,CAAoBE,SAA1C;;AAEA,MAAIL,QAAQ,KAAK,OAAjB,EAA0B;AACxB,QAAMR,WAAW,GAAGV,OAAO,CAACU,WAA5B;AACAA,IAAAA,WAAW,CAACc,YAAZ,CAAyBR,UAAzB;AACD;;AAED,MAAIE,QAAQ,KAAK,KAAjB,EAAwB;AACtB,QAAMP,SAAS,GAAGX,OAAO,CAACW,SAA1B;AACAA,IAAAA,SAAS,CAACc,UAAV,CAAqBR,GAArB;AACD;;AAboC,uBAeDK,aAAa,CAACT,KAAD,EAAQE,cAAR,CAfZ;AAAA,MAe7BW,WAf6B,kBAe7BA,WAf6B;AAAA,MAehBC,UAfgB,kBAehBA,UAfgB;;AAiBrC,SAAO;AAAED,IAAAA,WAAW,EAAXA,WAAF;AAAeC,IAAAA,UAAU,EAAVA;AAAf,GAAP;AACD,CAxBD;;AA0BA,eAAef,YAAf","sourcesContent":["import FrontInsertEditor from './FrontInsertEditor';\nimport CurrentInsertEditor from './CurrentInsertEditor';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  cursorPosition: number[];\n  tableCount?: number[];\n  url?: string;\n}\n\ninterface IResultOfEditor {\n  updatedText: string;\n  cursorToGo: number[];\n}\n\ntype editorType = {\n  [editorName: string]: FrontInsertEditor | CurrentInsertEditor;\n};\n\nconst Editors: editorType = {\n  h1Editor: new FrontInsertEditor('h1'),\n  h2Editor: new FrontInsertEditor('h2'),\n  h3Editor: new FrontInsertEditor('h3'),\n  quoteEditor: new FrontInsertEditor('quote'),\n  checkboxEditor: new FrontInsertEditor('checkbox'),\n  boldEditor: new CurrentInsertEditor('bold'),\n  italicEditor: new CurrentInsertEditor('italic'),\n  linkEditor: new CurrentInsertEditor('link'),\n  codeEditor: new CurrentInsertEditor('code'),\n  tableEditor: new CurrentInsertEditor('table'),\n  imgEditor: new CurrentInsertEditor('img'),\n};\n\nconst editByButton = ({\n  input,\n  event,\n  cursorPosition,\n  tableCount = [0, 0],\n  url = '',\n}: IEditTextProps): IResultOfEditor => {\n  const editType = event.currentTarget.id;\n  const editorName = `${editType}Editor`;\n  const editInputFunc = Editors[editorName].editInput;\n\n  if (editType === 'table') {\n    const tableEditor = Editors.tableEditor as CurrentInsertEditor;\n    tableEditor.setTableText(tableCount);\n  }\n\n  if (editType === 'img') {\n    const imgEditor = Editors.imgEditor as CurrentInsertEditor;\n    imgEditor.setImgText(url);\n  }\n\n  const { updatedText, cursorToGo } = editInputFunc(input, cursorPosition);\n\n  return { updatedText, cursorToGo };\n};\n\nexport default editByButton;\n"]},"metadata":{},"sourceType":"module"}