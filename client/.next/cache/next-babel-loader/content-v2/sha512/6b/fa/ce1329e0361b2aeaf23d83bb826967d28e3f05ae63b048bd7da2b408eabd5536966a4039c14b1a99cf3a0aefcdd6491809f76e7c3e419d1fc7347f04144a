{"ast":null,"code":"import Theme from '@theme/index';\nvar REPEAT_START_TIMING = 3000;\nvar TEXT_PERIOD = 4000;\nvar MINIMUM_GAP_BOXES = '1%';\nvar MAXIMUM_GAP_BOXES = '100%';\nvar NUM_HIDE_TEXT = '0%';\nvar NUM_SHOW_TEXT = '100%';\n\nvar fadeOutTextBox = function fadeOutTextBox(_ref) {\n  var isMounted = _ref.isMounted,\n      setMargin = _ref.setMargin,\n      setOpacity = _ref.setOpacity;\n  var setTimingText = setTimeout(function () {\n    if (!isMounted) {\n      clearTimeout(setTimingText);\n      return;\n    }\n\n    setMargin(MAXIMUM_GAP_BOXES);\n    setOpacity(NUM_HIDE_TEXT);\n    var hideText = setInterval(function () {\n      if (!isMounted) {\n        clearInterval(hideText);\n        return;\n      }\n\n      setMargin(MAXIMUM_GAP_BOXES);\n      setOpacity(NUM_HIDE_TEXT);\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n};\n\nvar animateIntroduceText = function animateIntroduceText(_ref2) {\n  var textList = _ref2.textList,\n      isMounted = _ref2.isMounted,\n      color = _ref2.color,\n      setMargin = _ref2.setMargin,\n      setColor = _ref2.setColor,\n      setOpacity = _ref2.setOpacity,\n      setIntro = _ref2.setIntro;\n  var newColor = color;\n  var currentListIndex = 1;\n  setMargin(MINIMUM_GAP_BOXES);\n  var setTimingText = setTimeout(function () {\n    if (!isMounted) {\n      clearTimeout(setTimingText);\n      return;\n    }\n\n    setMargin(MAXIMUM_GAP_BOXES);\n    setOpacity(NUM_HIDE_TEXT);\n    var hideText = setInterval(function () {\n      if (!isMounted) {\n        clearInterval(hideText);\n        return;\n      }\n\n      setMargin(MAXIMUM_GAP_BOXES);\n      setOpacity(NUM_HIDE_TEXT);\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n  var timerToShow = setInterval(function () {\n    if (!isMounted) {\n      clearInterval(timerToShow);\n      return;\n    }\n\n    setMargin(MINIMUM_GAP_BOXES);\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setOpacity(NUM_SHOW_TEXT);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    var isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nexport default animateIntroduceText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/animateText.ts"],"names":["Theme","REPEAT_START_TIMING","TEXT_PERIOD","MINIMUM_GAP_BOXES","MAXIMUM_GAP_BOXES","NUM_HIDE_TEXT","NUM_SHOW_TEXT","fadeOutTextBox","isMounted","setMargin","setOpacity","setTimingText","setTimeout","clearTimeout","hideText","setInterval","clearInterval","animateIntroduceText","textList","color","setColor","setIntro","newColor","currentListIndex","timerToShow","BLACK","POINT","isOverList","length"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,cAAlB;AAeA,IAAMC,mBAAmB,GAAG,IAA5B;AACA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,iBAAiB,GAAG,IAA1B;AACA,IAAMC,iBAAiB,GAAG,MAA1B;AACA,IAAMC,aAAa,GAAG,IAAtB;AACA,IAAMC,aAAa,GAAG,MAAtB;;AAEA,IAAMC,cAAgC,GAAG,SAAnCA,cAAmC,OAA0C;AAAA,MAAvCC,SAAuC,QAAvCA,SAAuC;AAAA,MAA5BC,SAA4B,QAA5BA,SAA4B;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACjF,MAAMC,aAAa,GAAGC,UAAU,CAAC,YAAM;AACrC,QAAI,CAACJ,SAAL,EAAgB;AACdK,MAAAA,YAAY,CAACF,aAAD,CAAZ;AACA;AACD;;AACDF,IAAAA,SAAS,CAACL,iBAAD,CAAT;AACAM,IAAAA,UAAU,CAACL,aAAD,CAAV;AACA,QAAMS,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,UAAI,CAACP,SAAL,EAAgB;AACdQ,QAAAA,aAAa,CAACF,QAAD,CAAb;AACA;AACD;;AACDL,MAAAA,SAAS,CAACL,iBAAD,CAAT;AACAM,MAAAA,UAAU,CAACL,aAAD,CAAV;AACD,KAP2B,EAOzBH,WAPyB,CAA5B;AAQD,GAf+B,EAe7BD,mBAf6B,CAAhC;AAgBD,CAjBD;;AAmBA,IAAMgB,oBAAsC,GAAG,SAAzCA,oBAAyC,QAQzC;AAAA,MAPJC,QAOI,SAPJA,QAOI;AAAA,MANJV,SAMI,SANJA,SAMI;AAAA,MALJW,KAKI,SALJA,KAKI;AAAA,MAJJV,SAII,SAJJA,SAII;AAAA,MAHJW,QAGI,SAHJA,QAGI;AAAA,MAFJV,UAEI,SAFJA,UAEI;AAAA,MADJW,QACI,SADJA,QACI;AACJ,MAAIC,QAAQ,GAAGH,KAAf;AACA,MAAII,gBAAgB,GAAG,CAAvB;AAEAd,EAAAA,SAAS,CAACN,iBAAD,CAAT;AACA,MAAMQ,aAAa,GAAGC,UAAU,CAAC,YAAM;AACrC,QAAI,CAACJ,SAAL,EAAgB;AACdK,MAAAA,YAAY,CAACF,aAAD,CAAZ;AACA;AACD;;AACDF,IAAAA,SAAS,CAACL,iBAAD,CAAT;AACAM,IAAAA,UAAU,CAACL,aAAD,CAAV;AACA,QAAMS,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,UAAI,CAACP,SAAL,EAAgB;AACdQ,QAAAA,aAAa,CAACF,QAAD,CAAb;AACA;AACD;;AACDL,MAAAA,SAAS,CAACL,iBAAD,CAAT;AACAM,MAAAA,UAAU,CAACL,aAAD,CAAV;AACD,KAP2B,EAOzBH,WAPyB,CAA5B;AAQD,GAf+B,EAe7BD,mBAf6B,CAAhC;AAiBA,MAAMuB,WAAW,GAAGT,WAAW,CAAC,YAAM;AACpC,QAAI,CAACP,SAAL,EAAgB;AACdQ,MAAAA,aAAa,CAACQ,WAAD,CAAb;AACA;AACD;;AACDf,IAAAA,SAAS,CAACN,iBAAD,CAAT;AAEAmB,IAAAA,QAAQ,GAAGA,QAAQ,KAAKtB,KAAK,CAACyB,KAAnB,GAA2BzB,KAAK,CAAC0B,KAAjC,GAAyC1B,KAAK,CAACyB,KAA1D;AACAL,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACAZ,IAAAA,UAAU,CAACJ,aAAD,CAAV;AACAe,IAAAA,QAAQ,CAACH,QAAQ,CAACK,gBAAD,CAAT,CAAR;AAEAA,IAAAA,gBAAgB,IAAI,CAApB;AACA,QAAMI,UAAU,GAAGJ,gBAAgB,GAAGL,QAAQ,CAACU,MAAT,GAAkB,CAAxD;AACAL,IAAAA,gBAAgB,GAAGI,UAAU,GAAG,CAAH,GAAOJ,gBAApC;AACD,GAf8B,EAe5BrB,WAf4B,CAA/B;AAgBD,CA9CD;;AAgDA,eAAee,oBAAf","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\nimport { IColorProps } from '@interfaces';\nimport Theme from '@theme/index';\n\ninterface IAnimateProps extends IColorProps {\n  textList: string[];\n  isMounted: boolean;\n  setMargin: Dispatch<SetStateAction<string>>;\n  setColor?: Dispatch<SetStateAction<string>>;\n  setOpacity: Dispatch<SetStateAction<string>>;\n  setIntro?: Dispatch<SetStateAction<string>>;\n}\n\ninterface IAnimateTextFunc {\n  (props: IAnimateProps): void;\n}\n\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\nconst MINIMUM_GAP_BOXES = '1%';\nconst MAXIMUM_GAP_BOXES = '100%';\nconst NUM_HIDE_TEXT = '0%';\nconst NUM_SHOW_TEXT = '100%';\n\nconst fadeOutTextBox: IAnimateTextFunc = ({ isMounted, setMargin, setOpacity }) => {\n  const setTimingText = setTimeout(() => {\n    if (!isMounted) {\n      clearTimeout(setTimingText);\n      return;\n    }\n    setMargin(MAXIMUM_GAP_BOXES);\n    setOpacity(NUM_HIDE_TEXT);\n    const hideText = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(hideText);\n        return;\n      }\n      setMargin(MAXIMUM_GAP_BOXES);\n      setOpacity(NUM_HIDE_TEXT);\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n};\n\nconst animateIntroduceText: IAnimateTextFunc = ({\n  textList,\n  isMounted,\n  color,\n  setMargin,\n  setColor,\n  setOpacity,\n  setIntro,\n}) => {\n  let newColor = color;\n  let currentListIndex = 1;\n\n  setMargin(MINIMUM_GAP_BOXES);\n  const setTimingText = setTimeout(() => {\n    if (!isMounted) {\n      clearTimeout(setTimingText);\n      return;\n    }\n    setMargin(MAXIMUM_GAP_BOXES);\n    setOpacity(NUM_HIDE_TEXT);\n    const hideText = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(hideText);\n        return;\n      }\n      setMargin(MAXIMUM_GAP_BOXES);\n      setOpacity(NUM_HIDE_TEXT);\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n\n  const timerToShow = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToShow);\n      return;\n    }\n    setMargin(MINIMUM_GAP_BOXES);\n\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setOpacity(NUM_SHOW_TEXT);\n    setIntro(textList[currentListIndex]);\n\n    currentListIndex += 1;\n    const isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nexport default animateIntroduceText;\n"]},"metadata":{},"sourceType":"module"}