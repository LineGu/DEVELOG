{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CurrentInsertion from '../Abstract/CurrentInsertion';\nexport default class TableEditor extends CurrentInsertion {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"textToInsert\", void 0);\n\n    _defineProperty(this, \"indexToInsert\", void 0);\n\n    _defineProperty(this, \"indexToGo\", void 0);\n\n    _defineProperty(this, \"indexsToMove\", void 0);\n\n    _defineProperty(this, \"onClickEditButton\", ({\n      input,\n      cursorPosition,\n      moveCursor,\n      tableCount\n    }) => {\n      const currentCursorIndex = cursorPosition[0];\n      this.setTextToInsert(tableCount);\n      this.setIndexToInsert(currentCursorIndex);\n      this.setIndexToGo(currentCursorIndex);\n      const updatedText = this.insertText(input);\n      this.moveCursorAfterEdit(moveCursor);\n      return updatedText;\n    });\n\n    this.textToInsert = '';\n    this.indexsToMove = [3, 3];\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n  setTextToInsert(tableCount) {\n    const [row, column] = tableCount !== null && tableCount !== void 0 ? tableCount : [-1, -1];\n    const rowText = `|${'    |'.repeat(row)}\\n|${'----|'.repeat(row)}`;\n    const columnText = `${'\\n'}${'|'}${'    |'.repeat(row)}`;\n    this.textToInsert = `\\n\\n${rowText}${columnText.repeat(column - 1)}\\n\\n`;\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Editors/Table.ts"],"names":["CurrentInsertion","TableEditor","constructor","input","cursorPosition","moveCursor","tableCount","currentCursorIndex","setTextToInsert","setIndexToInsert","setIndexToGo","updatedText","insertText","moveCursorAfterEdit","textToInsert","indexsToMove","indexToInsert","indexToGo","row","column","rowText","repeat","columnText"],"mappings":";;AACA,OAAOA,gBAAP,MAA6B,8BAA7B;AAMA,eAAe,MAAMC,WAAN,SAA0BD,gBAA1B,CAA2C;AASxDE,EAAAA,WAAW,GAAG;AACZ;;AADY;;AAAA;;AAAA;;AAAA;;AAAA,+CAea,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA,UAAzB;AAAqCC,MAAAA;AAArC,KAAD,KAAgF;AACzG,YAAMC,kBAAkB,GAAGH,cAAc,CAAC,CAAD,CAAzC;AACA,WAAKI,eAAL,CAAqBF,UAArB;AACA,WAAKG,gBAAL,CAAsBF,kBAAtB;AACA,WAAKG,YAAL,CAAkBH,kBAAlB;AACA,YAAMI,WAAW,GAAG,KAAKC,UAAL,CAAgBT,KAAhB,CAApB;AACA,WAAKU,mBAAL,CAAyBR,UAAzB;AAEA,aAAOM,WAAP;AACD,KAxBa;;AAEZ,SAAKG,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,SAAL,GAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACD;;AAEST,EAAAA,eAAV,CAA0BF,UAA1B,EAAsD;AACpD,UAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,UAAhB,aAAgBA,UAAhB,cAAgBA,UAAhB,GAA8B,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAApC;AACA,UAAMc,OAAO,GAAI,IAAG,QAAQC,MAAR,CAAeH,GAAf,CAAoB,MAAK,QAAQG,MAAR,CAAeH,GAAf,CAAoB,EAAjE;AACA,UAAMI,UAAU,GAAI,GAAE,IAAK,GAAE,GAAI,GAAE,QAAQD,MAAR,CAAeH,GAAf,CAAoB,EAAvD;AACA,SAAKJ,YAAL,GAAqB,OAAMM,OAAQ,GAAEE,UAAU,CAACD,MAAX,CAAkBF,MAAM,GAAG,CAA3B,CAA8B,MAAnE;AACD;;AAtBuD","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport CurrentInsertion from '../Abstract/CurrentInsertion';\n\ninterface ITableEditProps extends IOnClickEditButton {\n  tableCount: number[];\n}\n\nexport default class TableEditor extends CurrentInsertion {\n  protected textToInsert: string;\n\n  protected indexToInsert: number;\n\n  protected indexToGo: number[];\n\n  protected indexsToMove: number[];\n\n  constructor() {\n    super();\n    this.textToInsert = '';\n    this.indexsToMove = [3, 3];\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n  protected setTextToInsert(tableCount: number[]): void {\n    const [row, column] = tableCount ?? [-1, -1];\n    const rowText = `|${'    |'.repeat(row)}\\n|${'----|'.repeat(row)}`;\n    const columnText = `${'\\n'}${'|'}${'    |'.repeat(row)}`;\n    this.textToInsert = `\\n\\n${rowText}${columnText.repeat(column - 1)}\\n\\n`;\n  }\n\n  public onClickEditButton = ({ input, cursorPosition, moveCursor, tableCount }: ITableEditProps): string => {\n    const currentCursorIndex = cursorPosition[0];\n    this.setTextToInsert(tableCount);\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n    const updatedText = this.insertText(input);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}