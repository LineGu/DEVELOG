{"ast":null,"code":"var applyLineBlank = function applyLineBlank(input) {\n  var source = input.replace(/\\n/gi, '\\\\\\n');\n\n  if (source.slice(source.length - 1, source.length) === '\\n') {\n    source += '&nbsp;';\n  }\n\n  var strList = source.split('\\n');\n  var isFirstSlash = false;\n  source.split('\\n').forEach(function (str, index) {\n    if (str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;') {\n      strList[index - 1] += '\\n&nbsp;';\n    }\n\n    if (str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\') {\n      strList[index] = str.slice(0, str.length - 1);\n    }\n\n    if (str !== '\\\\') {\n      isFirstSlash = false;\n    }\n\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\\\n&nbsp;';\n    }\n\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\';\n    }\n  });\n  source = strList.join('\\n');\n  return source;\n};\n\nexport default applyLineBlank;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/applyLineBlank.ts"],"names":["applyLineBlank","input","source","replace","slice","length","strList","split","isFirstSlash","forEach","str","index","join"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAA2B;AAChD,MAAIC,MAAM,GAAGD,KAAK,CAACE,OAAN,CAAc,MAAd,EAAsB,MAAtB,CAAb;;AAEA,MAAID,MAAM,CAACE,KAAP,CAAaF,MAAM,CAACG,MAAP,GAAgB,CAA7B,EAAgCH,MAAM,CAACG,MAAvC,MAAmD,IAAvD,EAA6D;AAC3DH,IAAAA,MAAM,IAAI,QAAV;AACD;;AAED,MAAMI,OAAO,GAAGJ,MAAM,CAACK,KAAP,CAAa,IAAb,CAAhB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACAN,EAAAA,MAAM,CAACK,KAAP,CAAa,IAAb,EAAmBE,OAAnB,CAA2B,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACzC,QAAID,GAAG,KAAK,IAAR,IAAgBJ,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,KAAuB,IAAvC,IAA+CD,GAAG,KAAK,QAA3D,EAAqE;AACnEJ,MAAAA,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,IAAsB,UAAtB;AACD;;AAED,QAAID,GAAG,CAACL,MAAJ,KAAe,CAAf,IAAoBK,GAAG,CAACN,KAAJ,CAAUM,GAAG,CAACL,MAAJ,GAAa,CAAvB,EAA0BK,GAAG,CAACL,MAA9B,MAA0C,IAAlE,EAAwE;AACtEC,MAAAA,OAAO,CAACK,KAAD,CAAP,GAAiBD,GAAG,CAACN,KAAJ,CAAU,CAAV,EAAaM,GAAG,CAACL,MAAJ,GAAa,CAA1B,CAAjB;AACD;;AACD,QAAIK,GAAG,KAAK,IAAZ,EAAkB;AAChBF,MAAAA,YAAY,GAAG,KAAf;AACD;;AACD,QAAIE,GAAG,KAAK,IAAR,IAAgBF,YAAY,KAAK,KAAjC,IAA0CF,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,KAAuB,IAArE,EAA2E;AACzEH,MAAAA,YAAY,GAAG,IAAf;AACAF,MAAAA,OAAO,CAACK,KAAD,CAAP,GAAiB,cAAjB;AACD;;AACD,QAAID,GAAG,KAAK,IAAR,IAAgBF,YAAY,KAAK,KAAjC,IAA0CF,OAAO,CAACK,KAAK,GAAG,CAAT,CAAP,KAAuB,IAArE,EAA2E;AACzEH,MAAAA,YAAY,GAAG,IAAf;AACAF,MAAAA,OAAO,CAACK,KAAD,CAAP,GAAiB,MAAjB;AACD;AACF,GAnBD;AAoBAT,EAAAA,MAAM,GAAGI,OAAO,CAACM,IAAR,CAAa,IAAb,CAAT;AACA,SAAOV,MAAP;AACD,CA/BD;;AAiCA,eAAeF,cAAf","sourcesContent":["const applyLineBlank = (input: string): string => {\n  let source = input.replace(/\\n/gi, '\\\\\\n');\n\n  if (source.slice(source.length - 1, source.length) === '\\n') {\n    source += '&nbsp;';\n  }\n\n  const strList = source.split('\\n');\n  let isFirstSlash = false;\n  source.split('\\n').forEach((str, index) => {\n    if (str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;') {\n      strList[index - 1] += '\\n&nbsp;';\n    }\n\n    if (str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\') {\n      strList[index] = str.slice(0, str.length - 1);\n    }\n    if (str !== '\\\\') {\n      isFirstSlash = false;\n    }\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\\\n&nbsp;';\n    }\n    if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      isFirstSlash = true;\n      strList[index] = '\\n\\\\';\n    }\n  });\n  source = strList.join('\\n');\n  return source;\n};\n\nexport default applyLineBlank;\n"]},"metadata":{},"sourceType":"module"}