{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { applyBlankToMarkdown, createTextsByLine, DelBlankAfterLastText } from '@utils/markdown/markdown';\nexport default class Controller {\n  constructor() {\n    _defineProperty(this, \"_blankStr\", '\\\\\\n');\n\n    _defineProperty(this, \"applyLineBlank\", input => {\n      let TextsByLine = createTextsByLine(input);\n      TextsByLine = TextsByLine.map(text => applyBlankToMarkdown(text));\n      TextsByLine = DelBlankAfterLastText(TextsByLine);\n      let updatedInput = TextsByLine.join('\\n'); // let isFirstSlash = false;\n      // TextsByLine.forEach((str, index) => {\n      //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n      //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n      //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n      //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n      //   const isEmptyLine = str === '\\\\';\n      //   if (!isEmptyLine) isFirstSlash = false;\n      //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n      //     isFirstSlash = true;\n      //     strList[index] = '\\n\\\\\\n&nbsp;';\n      //   }\n      //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n      //     isFirstSlash = true;\n      //     strList[index] = '\\n\\\\';\n      //   }\n      // });\n\n      updatedInput = TextsByLine.join('\\n');\n      return updatedInput;\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/Controller/index.ts"],"names":["applyBlankToMarkdown","createTextsByLine","DelBlankAfterLastText","Controller","input","TextsByLine","map","text","updatedInput","join"],"mappings":";;AAAA,SACEA,oBADF,EAIEC,iBAJF,EAKEC,qBALF,QAMO,0BANP;AAQA,eAAe,MAAMC,UAAN,CAAiB;AAAA;AAAA,uCACV,MADU;;AAAA,4CAGZC,KAAD,IAA2B;AAC1C,UAAIC,WAAW,GAAGJ,iBAAiB,CAACG,KAAD,CAAnC;AACAC,MAAAA,WAAW,GAAGA,WAAW,CAACC,GAAZ,CAAiBC,IAAD,IAAUP,oBAAoB,CAACO,IAAD,CAA9C,CAAd;AACAF,MAAAA,WAAW,GAAGH,qBAAqB,CAACG,WAAD,CAAnC;AACA,UAAIG,YAAY,GAAGH,WAAW,CAACI,IAAZ,CAAiB,IAAjB,CAAnB,CAJ0C,CAM1C;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,MAAAA,YAAY,GAAGH,WAAW,CAACI,IAAZ,CAAiB,IAAjB,CAAf;AACA,aAAOD,YAAP;AACD,KAhC6B;AAAA;;AAAA","sourcesContent":["import {\n  applyBlankToMarkdown,\n  isEmptyLine,\n  hideLastSlash,\n  createTextsByLine,\n  DelBlankAfterLastText,\n} from '@utils/markdown/markdown';\n\nexport default class Controller {\n  private _blankStr = '\\\\\\n';\n\n  applyLineBlank = (input: string): string => {\n    let TextsByLine = createTextsByLine(input);\n    TextsByLine = TextsByLine.map((text) => applyBlankToMarkdown(text));\n    TextsByLine = DelBlankAfterLastText(TextsByLine);\n    let updatedInput = TextsByLine.join('\\n');\n\n    // let isFirstSlash = false;\n    // TextsByLine.forEach((str, index) => {\n    //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n\n    //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n\n    //   const isEmptyLine = str === '\\\\';\n    //   if (!isEmptyLine) isFirstSlash = false;\n\n    //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n    //     isFirstSlash = true;\n    //     strList[index] = '\\n\\\\\\n&nbsp;';\n    //   }\n    //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n    //     isFirstSlash = true;\n    //     strList[index] = '\\n\\\\';\n    //   }\n    // });\n\n    updatedInput = TextsByLine.join('\\n');\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}