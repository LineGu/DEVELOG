{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { changeText, insertText, createTextsByLine, applyBlankToMarkdown, getBlankIdxsAfterLastText, getBlankIdxsBeforeText, getBlankIdxsInCodeBox, getBlankIdxsAfterTable } from '@utils/markdown/markdown';\nexport default class blankController {\n  constructor() {\n    _defineProperty(this, \"_enterStr\", '\\n');\n\n    _defineProperty(this, \"_spaceStr\", `&nbsp;`);\n\n    _defineProperty(this, \"joinTexts\", TextsByLine => {\n      return TextsByLine.join(this._enterStr);\n    });\n\n    _defineProperty(this, \"devideTextsByLine\", input => {\n      const TextsByLine = createTextsByLine(input);\n      return TextsByLine;\n    });\n\n    _defineProperty(this, \"applyBlank\", TextsByLine => {\n      const updatedTextsByLine = TextsByLine.map(text => applyBlankToMarkdown(text));\n      return updatedTextsByLine;\n    });\n\n    _defineProperty(this, \"delInvalidBlank\", TextsByLine => {\n      let updatedTextsByLine = [...TextsByLine];\n      updatedTextsByLine = this._delBlankAfterLastText(TextsByLine);\n      console.log(updatedTextsByLine);\n      updatedTextsByLine = this._delSlashBeforeText(TextsByLine);\n      updatedTextsByLine = this._delBlankInCode(TextsByLine);\n      updatedTextsByLine = this._delSlashAfterTable(TextsByLine);\n      return updatedTextsByLine;\n    });\n\n    _defineProperty(this, \"_delBlankAfterLastText\", TextsByLine => {\n      const blankIdxs = getBlankIdxsAfterLastText(TextsByLine);\n      return changeText(TextsByLine, blankIdxs, '');\n    });\n\n    _defineProperty(this, \"_delSlashBeforeText\", TextsByLine => {\n      const blankIdxsBeforeText = getBlankIdxsBeforeText(TextsByLine);\n      return changeText(TextsByLine, blankIdxsBeforeText, this._spaceStr);\n    });\n\n    _defineProperty(this, \"_delBlankInCode\", TextsByLine => {\n      const idxsBlankInCodeBox = getBlankIdxsInCodeBox(TextsByLine);\n      return changeText(TextsByLine, idxsBlankInCodeBox, '');\n    });\n\n    _defineProperty(this, \"_delSlashAfterTable\", TextsByLine => {\n      const idxsSlashAfterTable = getBlankIdxsAfterTable(TextsByLine);\n      return insertText(TextsByLine, idxsSlashAfterTable, '');\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/Controller/blank.ts"],"names":["changeText","insertText","createTextsByLine","applyBlankToMarkdown","getBlankIdxsAfterLastText","getBlankIdxsBeforeText","getBlankIdxsInCodeBox","getBlankIdxsAfterTable","blankController","TextsByLine","join","_enterStr","input","updatedTextsByLine","map","text","_delBlankAfterLastText","console","log","_delSlashBeforeText","_delBlankInCode","_delSlashAfterTable","blankIdxs","blankIdxsBeforeText","_spaceStr","idxsBlankInCodeBox","idxsSlashAfterTable"],"mappings":";;AAAA,SACEA,UADF,EAEEC,UAFF,EAGEC,iBAHF,EAIEC,oBAJF,EAKEC,yBALF,EAMEC,sBANF,EAOEC,qBAPF,EAQEC,sBARF,QASO,0BATP;AAWA,eAAe,MAAMC,eAAN,CAAsB;AAAA;AAAA,uCACf,IADe;;AAAA,uCAGd,QAHc;;AAAA,uCAKZC,WAAD,IAAmC;AACvD,aAAOA,WAAW,CAACC,IAAZ,CAAiB,KAAKC,SAAtB,CAAP;AACD,KAPkC;;AAAA,+CASJC,KAAD,IAA6B;AACzD,YAAMH,WAAW,GAAGP,iBAAiB,CAACU,KAAD,CAArC;AACA,aAAOH,WAAP;AACD,KAZkC;;AAAA,wCAcXA,WAAD,IAAqC;AAC1D,YAAMI,kBAAkB,GAAGJ,WAAW,CAACK,GAAZ,CAAiBC,IAAD,IAAUZ,oBAAoB,CAACY,IAAD,CAA9C,CAA3B;AACA,aAAOF,kBAAP;AACD,KAjBkC;;AAAA,6CAmBNJ,WAAD,IAAqC;AAC/D,UAAII,kBAA4B,GAAG,CAAC,GAAGJ,WAAJ,CAAnC;AACAI,MAAAA,kBAAkB,GAAG,KAAKG,sBAAL,CAA4BP,WAA5B,CAArB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYL,kBAAZ;AACAA,MAAAA,kBAAkB,GAAG,KAAKM,mBAAL,CAAyBV,WAAzB,CAArB;AACAI,MAAAA,kBAAkB,GAAG,KAAKO,eAAL,CAAqBX,WAArB,CAArB;AACAI,MAAAA,kBAAkB,GAAG,KAAKQ,mBAAL,CAAyBZ,WAAzB,CAArB;AACA,aAAOI,kBAAP;AACD,KA3BkC;;AAAA,oDA6BDJ,WAAD,IAAqC;AACpE,YAAMa,SAAS,GAAGlB,yBAAyB,CAACK,WAAD,CAA3C;AACA,aAAOT,UAAU,CAACS,WAAD,EAAca,SAAd,EAAyB,EAAzB,CAAjB;AACD,KAhCkC;;AAAA,iDAkCJb,WAAD,IAAqC;AACjE,YAAMc,mBAAmB,GAAGlB,sBAAsB,CAACI,WAAD,CAAlD;AACA,aAAOT,UAAU,CAACS,WAAD,EAAcc,mBAAd,EAAmC,KAAKC,SAAxC,CAAjB;AACD,KArCkC;;AAAA,6CAuCRf,WAAD,IAAqC;AAC7D,YAAMgB,kBAA4B,GAAGnB,qBAAqB,CAACG,WAAD,CAA1D;AACA,aAAOT,UAAU,CAACS,WAAD,EAAcgB,kBAAd,EAAkC,EAAlC,CAAjB;AACD,KA1CkC;;AAAA,iDA4CJhB,WAAD,IAAqC;AACjE,YAAMiB,mBAA6B,GAAGnB,sBAAsB,CAACE,WAAD,CAA5D;AACA,aAAOR,UAAU,CAACQ,WAAD,EAAciB,mBAAd,EAAmC,EAAnC,CAAjB;AACD,KA/CkC;AAAA;;AAAA","sourcesContent":["import {\n  changeText,\n  insertText,\n  createTextsByLine,\n  applyBlankToMarkdown,\n  getBlankIdxsAfterLastText,\n  getBlankIdxsBeforeText,\n  getBlankIdxsInCodeBox,\n  getBlankIdxsAfterTable,\n} from '@utils/markdown/markdown';\n\nexport default class blankController {\n  private _enterStr = '\\n';\n\n  private _spaceStr = `&nbsp;`;\n\n  protected joinTexts = (TextsByLine: string[]): string => {\n    return TextsByLine.join(this._enterStr);\n  };\n\n  protected devideTextsByLine = (input: string): string[] => {\n    const TextsByLine = createTextsByLine(input);\n    return TextsByLine;\n  };\n\n  protected applyBlank = (TextsByLine: string[]): string[] => {\n    const updatedTextsByLine = TextsByLine.map((text) => applyBlankToMarkdown(text));\n    return updatedTextsByLine;\n  };\n\n  protected delInvalidBlank = (TextsByLine: string[]): string[] => {\n    let updatedTextsByLine: string[] = [...TextsByLine];\n    updatedTextsByLine = this._delBlankAfterLastText(TextsByLine);\n    console.log(updatedTextsByLine);\n    updatedTextsByLine = this._delSlashBeforeText(TextsByLine);\n    updatedTextsByLine = this._delBlankInCode(TextsByLine);\n    updatedTextsByLine = this._delSlashAfterTable(TextsByLine);\n    return updatedTextsByLine;\n  };\n\n  private _delBlankAfterLastText = (TextsByLine: string[]): string[] => {\n    const blankIdxs = getBlankIdxsAfterLastText(TextsByLine);\n    return changeText(TextsByLine, blankIdxs, '');\n  };\n\n  private _delSlashBeforeText = (TextsByLine: string[]): string[] => {\n    const blankIdxsBeforeText = getBlankIdxsBeforeText(TextsByLine);\n    return changeText(TextsByLine, blankIdxsBeforeText, this._spaceStr);\n  };\n\n  private _delBlankInCode = (TextsByLine: string[]): string[] => {\n    const idxsBlankInCodeBox: number[] = getBlankIdxsInCodeBox(TextsByLine);\n    return changeText(TextsByLine, idxsBlankInCodeBox, '');\n  };\n\n  private _delSlashAfterTable = (TextsByLine: string[]): string[] => {\n    const idxsSlashAfterTable: number[] = getBlankIdxsAfterTable(TextsByLine);\n    return insertText(TextsByLine, idxsSlashAfterTable, '');\n  };\n}\n"]},"metadata":{},"sourceType":"module"}