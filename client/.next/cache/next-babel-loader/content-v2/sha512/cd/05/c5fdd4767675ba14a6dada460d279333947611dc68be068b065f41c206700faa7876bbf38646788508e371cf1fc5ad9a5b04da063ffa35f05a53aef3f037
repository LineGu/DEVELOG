{"ast":null,"code":"import _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar findFrontOfLine = function findFrontOfLine(string, cursorPosition) {\n  var findingIndex = cursorPosition[0];\n  var isFindFront = true;\n\n  while (isFindFront) {\n    if (string[findingIndex - 1] === '\\n') {\n      isFindFront = false;\n      break;\n    }\n\n    if (findingIndex === 0) {\n      break;\n    }\n\n    findingIndex -= 1;\n  }\n\n  return findingIndex;\n};\n\nvar insertTextFront = function insertTextFront(_ref) {\n  var input = _ref.input,\n      positionToInsert = _ref.positionToInsert,\n      insertText = _ref.insertText;\n  var textToCheckOverlap = input.slice(positionToInsert, positionToInsert + 4);\n  var beforeText = input.slice(0, positionToInsert);\n  var afterText = input.slice(positionToInsert);\n  var textToInsert = insertText;\n\n  if (insertText.includes('#') && textToCheckOverlap.includes('# ')) {\n    var indexOfMarkDownEnd = textToCheckOverlap.indexOf('# ') + 2;\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n\n  if (insertText.includes('>') && textToCheckOverlap.includes('> ')) {\n    var _indexOfMarkDownEnd = textToCheckOverlap.indexOf('> ') + 2;\n\n    textToInsert = '';\n    afterText = afterText.slice(_indexOfMarkDownEnd);\n  }\n\n  var newInput = beforeText + textToInsert + afterText;\n  return newInput;\n};\n\nvar insertTextSide = function insertTextSide(_ref2) {\n  var input = _ref2.input,\n      cursorPosition = _ref2.cursorPosition,\n      insertText = _ref2.insertText;\n  var isSelected = cursorPosition[0] !== cursorPosition[1];\n  var textToInsert = insertText;\n\n  if (isSelected) {\n    var _cursorPosition = _slicedToArray(cursorPosition, 2),\n        startPosition = _cursorPosition[0],\n        endPosition = _cursorPosition[1];\n\n    var textSelected = input.slice(startPosition, endPosition);\n\n    switch (textToInsert) {\n      case '**텍스트**':\n        textToInsert = \"**\".concat(textSelected, \"**\");\n        break;\n\n      case '**텍스트**':\n        textToInsert = \"**\".concat(textSelected, \"**\");\n        break;\n\n      case '**텍스트**':\n        textToInsert = \"**\".concat(textSelected, \"**\");\n        break;\n\n      default:\n        break;\n    }\n  }\n};\n\nvar insertToFront = function insertToFront(_ref3) {\n  var input = _ref3.input,\n      positionToInsert = _ref3.positionToInsert,\n      insertText = _ref3.insertText,\n      setInput = _ref3.setInput;\n  var newInput = insertTextFront({\n    input: input,\n    positionToInsert: positionToInsert,\n    insertText: insertText\n  });\n  setInput(newInput);\n};\n\nvar editInputText = function editInputText(_ref4) {\n  var event = _ref4.event,\n      input = _ref4.input,\n      setInput = _ref4.setInput,\n      cursorPosition = _ref4.cursorPosition;\n  var iconClicked = event.currentTarget.className.baseVal;\n  var positionToInsert = findFrontOfLine(input, cursorPosition);\n  var insertText = '';\n\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      insertToFront({\n        input: input,\n        positionToInsert: positionToInsert,\n        insertText: insertText,\n        setInput: setInput\n      });\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      insertToFront({\n        input: input,\n        positionToInsert: positionToInsert,\n        insertText: insertText,\n        setInput: setInput\n      });\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      insertToFront({\n        input: input,\n        positionToInsert: positionToInsert,\n        insertText: insertText,\n        setInput: setInput\n      });\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      insertToFront({\n        input: input,\n        positionToInsert: positionToInsert,\n        insertText: insertText,\n        setInput: setInput\n      });\n      break;\n\n    default:\n      break;\n  }\n};\n\nexport default editInputText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/editInputText.ts"],"names":["findFrontOfLine","string","cursorPosition","findingIndex","isFindFront","insertTextFront","input","positionToInsert","insertText","textToCheckOverlap","slice","beforeText","afterText","textToInsert","includes","indexOfMarkDownEnd","indexOf","newInput","insertTextSide","isSelected","startPosition","endPosition","textSelected","insertToFront","setInput","editInputText","event","iconClicked","currentTarget","className","baseVal"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  setInput: Dispatch<SetStateAction<string>>;\n  cursorPosition: number[];\n}\n\ninterface IInsertFrontProps {\n  input: string;\n  positionToInsert: number;\n  insertText: string;\n}\n\ninterface IInsertSideProps {\n  input: string;\n  cursorPosition: number[];\n  insertText: string;\n}\n\ninterface IInsertControlProps extends IInsertFrontProps {\n  setInput: Dispatch<SetStateAction<string>>;\n}\n\nconst findFrontOfLine = (string: string, cursorPosition: number[]): number => {\n  let findingIndex = cursorPosition[0];\n  let isFindFront = true;\n  while (isFindFront) {\n    if (string[findingIndex - 1] === '\\n') {\n      isFindFront = false;\n      break;\n    }\n    if (findingIndex === 0) {\n      break;\n    }\n    findingIndex -= 1;\n  }\n  return findingIndex;\n};\n\nconst insertTextFront = ({ input, positionToInsert, insertText }: IInsertFrontProps): string => {\n  const textToCheckOverlap = input.slice(positionToInsert, positionToInsert + 4);\n  const beforeText = input.slice(0, positionToInsert);\n\n  let afterText = input.slice(positionToInsert);\n  let textToInsert = insertText;\n\n  if (insertText.includes('#') && textToCheckOverlap.includes('# ')) {\n    const indexOfMarkDownEnd = textToCheckOverlap.indexOf('# ') + 2;\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n  if (insertText.includes('>') && textToCheckOverlap.includes('> ')) {\n    const indexOfMarkDownEnd = textToCheckOverlap.indexOf('> ') + 2;\n    textToInsert = '';\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n  const newInput = beforeText + textToInsert + afterText;\n  return newInput;\n};\n\nconst insertTextSide = ({ input, cursorPosition, insertText }: IInsertSideProps): string => {\n  const isSelected = cursorPosition[0] !== cursorPosition[1];\n  let textToInsert = insertText;\n\n  if (isSelected) {\n    const [startPosition, endPosition] = cursorPosition;\n    const textSelected = input.slice(startPosition, endPosition);\n    switch (textToInsert) {\n      case '**텍스트**':\n        textToInsert = `**${textSelected}**`;\n        break;\n\n      case '**텍스트**':\n        textToInsert = `**${textSelected}**`;\n        break;\n\n      case '**텍스트**':\n        textToInsert = `**${textSelected}**`;\n        break;\n\n      default:\n        break;\n    }\n  }\n};\n\nconst insertToFront = ({ input, positionToInsert, insertText, setInput }: IInsertControlProps) => {\n  const newInput = insertTextFront({ input, positionToInsert, insertText });\n  setInput(newInput);\n};\n\nconst editInputText = ({ event, input, setInput, cursorPosition }: IEditTextProps): void => {\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    default:\n      break;\n  }\n};\n\nexport default editInputText;\n"]},"metadata":{},"sourceType":"module"}