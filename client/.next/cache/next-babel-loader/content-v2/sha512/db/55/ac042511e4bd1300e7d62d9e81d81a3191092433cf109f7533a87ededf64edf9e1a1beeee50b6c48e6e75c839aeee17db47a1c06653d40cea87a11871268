{"ast":null,"code":"import _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { isEmptyLine, hideLastSlash, createTextsByLine } from '@utils/markdown/markdown';\n\nvar Controller = function Controller() {\n  var _this = this;\n\n  _classCallCheck(this, Controller);\n\n  _defineProperty(this, \"_blankStr\", '\\\\\\n');\n\n  _defineProperty(this, \"applyLineBlank\", function (input) {\n    var updatedInput = input.replace(/\\n/gi, _this._blankStr);\n    var TextsByLine = createTextsByLine(updatedInput);\n    var lastLineIdx = TextsByLine.length - 1;\n    var lastLine = TextsByLine[lastLineIdx];\n    if (isEmptyLine(lastLine)) updatedInput = hideLastSlash(updatedInput);\n    TextsByLine = createTextsByLine(updatedInput);\n    console.log(updatedInput); // let isFirstSlash = false;\n    // // TextsByLine.forEach((str, index) => {\n    // //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    // //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n    // //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    // //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n    // //   const isEmptyLine = str === '\\\\';\n    // //   if (!isEmptyLine) isFirstSlash = false;\n    // //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\\\n&nbsp;';\n    // //   }\n    // //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\';\n    // //   }\n    // // });\n\n    updatedInput = TextsByLine.join('\\n');\n    return updatedInput;\n  });\n};\n\nexport { Controller as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/Controller/index.ts"],"names":["isEmptyLine","hideLastSlash","createTextsByLine","Controller","input","updatedInput","replace","_blankStr","TextsByLine","lastLineIdx","length","lastLine","console","log","join"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,iBAArC,QAA8D,0BAA9D;;IAEqBC,U;;;;;qCACC,M;;0CAEH,UAACC,KAAD,EAA2B;AAC1C,QAAIC,YAAY,GAAGD,KAAK,CAACE,OAAN,CAAc,MAAd,EAAsB,KAAI,CAACC,SAA3B,CAAnB;AACA,QAAIC,WAAW,GAAGN,iBAAiB,CAACG,YAAD,CAAnC;AACA,QAAMI,WAAW,GAAGD,WAAW,CAACE,MAAZ,GAAqB,CAAzC;AACA,QAAMC,QAAQ,GAAGH,WAAW,CAACC,WAAD,CAA5B;AAEA,QAAIT,WAAW,CAACW,QAAD,CAAf,EAA2BN,YAAY,GAAGJ,aAAa,CAACI,YAAD,CAA5B;AAC3BG,IAAAA,WAAW,GAAGN,iBAAiB,CAACG,YAAD,CAA/B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ,EAR0C,CAS1C;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,IAAAA,YAAY,GAAGG,WAAW,CAACM,IAAZ,CAAiB,IAAjB,CAAf;AACA,WAAOT,YAAP;AACD,G;;;SAnCkBF,U","sourcesContent":["import { isEmptyLine, hideLastSlash, createTextsByLine } from '@utils/markdown/markdown';\n\nexport default class Controller {\n  private _blankStr = '\\\\\\n';\n\n  applyLineBlank = (input: string): string => {\n    let updatedInput = input.replace(/\\n/gi, this._blankStr);\n    let TextsByLine = createTextsByLine(updatedInput);\n    const lastLineIdx = TextsByLine.length - 1;\n    const lastLine = TextsByLine[lastLineIdx];\n\n    if (isEmptyLine(lastLine)) updatedInput = hideLastSlash(updatedInput);\n    TextsByLine = createTextsByLine(updatedInput);\n    console.log(updatedInput);\n    // let isFirstSlash = false;\n    // // TextsByLine.forEach((str, index) => {\n    // //   const isEndEmptyLines = !(str !== '\\\\' && strList[index - 1] === '\\\\' && str !== '&nbsp;');\n    // //   if (!isEndEmptyLines) strList[index - 1] += '\\n&nbsp;';\n\n    // //   const hasSlashAtEndOfLine = str.length !== 1 && str.slice(str.length - 1, str.length) === '\\\\';\n    // //   if (hasSlashAtEndOfLine) strList[index] = str.slice(0, str.length - 1);\n\n    // //   const isEmptyLine = str === '\\\\';\n    // //   if (!isEmptyLine) isFirstSlash = false;\n\n    // //   if (isEmptyLine && isFirstSlash === false && strList[index + 1] !== '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\\\n&nbsp;';\n    // //   }\n    // //   if (str === '\\\\' && isFirstSlash === false && strList[index + 1] === '\\\\') {\n    // //     isFirstSlash = true;\n    // //     strList[index] = '\\n\\\\';\n    // //   }\n    // // });\n\n    updatedInput = TextsByLine.join('\\n');\n    return updatedInput;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}