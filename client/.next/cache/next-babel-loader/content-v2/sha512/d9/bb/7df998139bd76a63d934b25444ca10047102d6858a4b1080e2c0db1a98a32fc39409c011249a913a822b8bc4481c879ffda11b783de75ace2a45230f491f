{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport AbstractLineEditor from '../Abstract/LineEditor';\nexport default class HeadEditor extends AbstractLineEditor {\n  constructor(Priority) {\n    super();\n\n    _defineProperty(this, \"similarText\", ['# ', '## ', '### ']);\n\n    _defineProperty(this, \"textToInsert\", void 0);\n\n    _defineProperty(this, \"indexToInsert\", void 0);\n\n    _defineProperty(this, \"indexToGo\", void 0);\n\n    _defineProperty(this, \"delSimilarText\", input => {\n      const updatedInput = input.slice(0, this.idxsToDel[0]) + input.slice(this.idxsToDel[1]);\n      const indexToGo = this.indexToGo[0] - (this.idxsToDel[1] - this.idxsToDel[0]);\n      this.indexToGo = [indexToGo, indexToGo];\n      return updatedInput;\n    });\n\n    _defineProperty(this, \"hasSimilarText\", input => {\n      const frontPartToInsert = input.slice(this.indexToInsert, this.indexToInsert + 4);\n      let hasSimilar = false;\n      this.similarText.forEach(text => {\n        if (frontPartToInsert.includes(text)) {\n          hasSimilar = true;\n          this.idxsToDel = [this.indexToInsert, this.indexToInsert + text.length];\n        }\n      });\n      return hasSimilar;\n    });\n\n    this.textToInsert = `${'#'.repeat(Priority)} `;\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Editors/Head.ts"],"names":["AbstractLineEditor","HeadEditor","constructor","Priority","input","updatedInput","slice","idxsToDel","indexToGo","frontPartToInsert","indexToInsert","hasSimilar","similarText","forEach","text","includes","length","textToInsert","repeat"],"mappings":";;AAAA,OAAOA,kBAAP,MAA+B,wBAA/B;AAEA,eAAe,MAAMC,UAAN,SAAyBD,kBAAzB,CAA4C;AASzDE,EAAAA,WAAW,CAACC,QAAD,EAAmB;AAC5B;;AAD4B,yCARN,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,CAQM;;AAAA;;AAAA;;AAAA;;AAAA,4CAOFC,KAAD,IAA2B;AACpD,YAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,KAAKC,SAAL,CAAe,CAAf,CAAf,IAAoCH,KAAK,CAACE,KAAN,CAAY,KAAKC,SAAL,CAAe,CAAf,CAAZ,CAAzD;AACA,YAAMC,SAAS,GAAG,KAAKA,SAAL,CAAe,CAAf,KAAqB,KAAKD,SAAL,CAAe,CAAf,IAAoB,KAAKA,SAAL,CAAe,CAAf,CAAzC,CAAlB;AACA,WAAKC,SAAL,GAAiB,CAACA,SAAD,EAAYA,SAAZ,CAAjB;AACA,aAAOH,YAAP;AACD,KAZ6B;;AAAA,4CAcFD,KAAD,IAA4B;AACrD,YAAMK,iBAAiB,GAAGL,KAAK,CAACE,KAAN,CAAY,KAAKI,aAAjB,EAAgC,KAAKA,aAAL,GAAqB,CAArD,CAA1B;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,WAAKC,WAAL,CAAiBC,OAAjB,CAA0BC,IAAD,IAAU;AACjC,YAAIL,iBAAiB,CAACM,QAAlB,CAA2BD,IAA3B,CAAJ,EAAsC;AACpCH,UAAAA,UAAU,GAAG,IAAb;AACA,eAAKJ,SAAL,GAAiB,CAAC,KAAKG,aAAN,EAAqB,KAAKA,aAAL,GAAqBI,IAAI,CAACE,MAA/C,CAAjB;AACD;AACF,OALD;AAMA,aAAOL,UAAP;AACD,KAxB6B;;AAE5B,SAAKM,YAAL,GAAqB,GAAE,IAAIC,MAAJ,CAAWf,QAAX,CAAqB,GAA5C;AACA,SAAKO,aAAL,GAAqB,CAArB;AACA,SAAKF,SAAL,GAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACD;;AAdwD","sourcesContent":["import AbstractLineEditor from '../Abstract/LineEditor';\n\nexport default class HeadEditor extends AbstractLineEditor {\n  protected similarText = ['# ', '## ', '### '];\n\n  protected textToInsert: string;\n\n  protected indexToInsert: number;\n\n  protected indexToGo: number[];\n\n  constructor(Priority: number) {\n    super();\n    this.textToInsert = `${'#'.repeat(Priority)} `;\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n  protected delSimilarText = (input: string): string => {\n    const updatedInput = input.slice(0, this.idxsToDel[0]) + input.slice(this.idxsToDel[1]);\n    const indexToGo = this.indexToGo[0] - (this.idxsToDel[1] - this.idxsToDel[0]);\n    this.indexToGo = [indexToGo, indexToGo];\n    return updatedInput;\n  };\n\n  protected hasSimilarText = (input: string): boolean => {\n    const frontPartToInsert = input.slice(this.indexToInsert, this.indexToInsert + 4);\n    let hasSimilar = false;\n    this.similarText.forEach((text) => {\n      if (frontPartToInsert.includes(text)) {\n        hasSimilar = true;\n        this.idxsToDel = [this.indexToInsert, this.indexToInsert + text.length];\n      }\n    });\n    return hasSimilar;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}