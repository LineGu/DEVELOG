{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nconst useCursorPoint = inputElem => {\n  const initCursor = [0, 0];\n  const {\n    0: cursorPosition,\n    1: setCursorPosition\n  } = useState(initCursor);\n  const infoOfCursorToGo = useRef([false, cursorPosition]);\n\n  const updateCusorPoint = () => {\n    var _inputElem$selectionS, _inputElem$selectionE;\n\n    const cursorPointStart = (_inputElem$selectionS = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionStart) !== null && _inputElem$selectionS !== void 0 ? _inputElem$selectionS : 0;\n    const cursorPointEnd = (_inputElem$selectionE = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionEnd) !== null && _inputElem$selectionE !== void 0 ? _inputElem$selectionE : 0;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = cursorPositionToGo => {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.focus();\n  };\n\n  useEffect(() => {\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('click', updateCusorPoint);\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('keyup', updateCusorPoint);\n  }, []);\n  return {\n    cursorPosition,\n    setCursorPosition,\n    infoOfCursorToGo,\n    updateCusorPoint,\n    moveCursor\n  };\n};\n\nexport default useCursorPoint;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useCursorPoint.tsx"],"names":["useState","useRef","useEffect","useCursorPoint","inputElem","initCursor","cursorPosition","setCursorPosition","infoOfCursorToGo","updateCusorPoint","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","updatedCursorPosition","moveCursor","cursorPositionToGo","current","focus","addEventListener"],"mappings":"AAAA,SAAgBA,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;AAWA,MAAMC,cAAc,GAAIC,SAAD,IAA8D;AACnF,QAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCP,QAAQ,CAACK,UAAD,CAApD;AACA,QAAMG,gBAAgB,GAAGP,MAAM,CAAsB,CAAC,KAAD,EAAQK,cAAR,CAAtB,CAA/B;;AAEA,QAAMG,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,UAAMC,gBAAgB,4BAAGN,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEO,cAAd,yEAAgC,CAAtD;AACA,UAAMC,cAAc,4BAAGR,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAES,YAAd,yEAA8B,CAAlD;AACA,UAAMC,qBAAqB,GAAG,CAACJ,gBAAD,EAAmBE,cAAnB,CAA9B;AACAL,IAAAA,iBAAiB,CAACO,qBAAD,CAAjB;AACD,GALD;;AAOA,QAAMC,UAAU,GAAIC,kBAAD,IAAkC;AACnDR,IAAAA,gBAAgB,CAACS,OAAjB,GAA2B,CAAC,IAAD,EAAOD,kBAAP,CAA3B;AACAZ,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEc,KAAX;AACD,GAHD;;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEe,gBAAX,CAA4B,OAA5B,EAAqCV,gBAArC;AACAL,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEe,gBAAX,CAA4B,OAA5B,EAAqCV,gBAArC;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO;AAAEH,IAAAA,cAAF;AAAkBC,IAAAA,iBAAlB;AAAqCC,IAAAA,gBAArC;AAAuDC,IAAAA,gBAAvD;AAAyEM,IAAAA;AAAzE,GAAP;AACD,CAvBD;;AAyBA,eAAeZ,cAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { setStateNumberArr } from '@types';\n\ninterface ICursorHookReturn {\n  cursorPosition: number[];\n  setCursorPosition: setStateNumberArr;\n  infoOfCursorToGo: React.MutableRefObject<[boolean, number[]]>;\n  updateCusorPoint: () => void;\n  moveCursor: (cursorPositionToGo: number[]) => void;\n}\n\nconst useCursorPoint = (inputElem: HTMLTextAreaElement | null): ICursorHookReturn => {\n  const initCursor = [0, 0];\n  const [cursorPosition, setCursorPosition] = useState(initCursor);\n  const infoOfCursorToGo = useRef<[boolean, number[]]>([false, cursorPosition]);\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputElem?.selectionStart ?? 0;\n    const cursorPointEnd = inputElem?.selectionEnd ?? 0;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = (cursorPositionToGo: number[]) => {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputElem?.focus();\n  };\n\n  useEffect(() => {\n    inputElem?.addEventListener('click', updateCusorPoint);\n    inputElem?.addEventListener('keyup', updateCusorPoint);\n  }, []);\n\n  return { cursorPosition, setCursorPosition, infoOfCursorToGo, updateCusorPoint, moveCursor };\n};\n\nexport default useCursorPoint;\n"]},"metadata":{},"sourceType":"module"}