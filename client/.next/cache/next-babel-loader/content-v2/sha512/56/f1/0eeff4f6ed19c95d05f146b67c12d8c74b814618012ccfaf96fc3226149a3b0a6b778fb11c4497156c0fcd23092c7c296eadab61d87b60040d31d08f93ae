{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { URL } from '@constants/url';\nimport { headerOption } from '@config/headerForImgur';\nimport CurrentInsertion from '../Abstract/CurrentInsertion';\nexport default class ImgEditor extends CurrentInsertion {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"textToInsert\", void 0);\n\n    _defineProperty(this, \"_maxSize\", void 0);\n\n    _defineProperty(this, \"uploadingState\", void 0);\n\n    _defineProperty(this, \"indexToInsert\", void 0);\n\n    _defineProperty(this, \"indexToGo\", void 0);\n\n    _defineProperty(this, \"indexsToMove\", void 0);\n\n    _defineProperty(this, \"_setUploadingState\", ProgressEvent => {\n      const uploadingProgress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100);\n      this.uploadingState = {\n        progress: uploadingProgress,\n        error: ''\n      };\n    });\n\n    _defineProperty(this, \"uploadImg\", async file => {\n      const isExcessSize = file.size > this._maxSize;\n      const isValidFile = file && isExcessSize;\n      if (!isValidFile) this.uploadingState = {\n        progress: 0,\n        error: 'NOT_VAILD_FILE'\n      };\n      const imgData = new FormData();\n      imgData.append('image', file);\n\n      try {\n        const postConfig = {\n          headers: headerOption,\n          onUploadProgress: ProgressEvent => this._setUploadingState(ProgressEvent)\n        };\n        const response = await axios.post(URL.IMGUR, imgData, postConfig);\n        const imgUrl = response.data.data.link;\n        this.uploadingState = {\n          progress: 0,\n          error: ''\n        };\n\n        this._setTextToInsert(imgUrl);\n      } catch (error) {\n        this.uploadingState = {\n          progress: 0,\n          error\n        };\n      }\n    });\n\n    _defineProperty(this, \"onClickEditButton\", ({\n      input,\n      currentCursorIndex,\n      moveCursor\n    }) => {\n      this.setIndexToInsert(currentCursorIndex);\n      this.setIndexToGo(currentCursorIndex);\n      const updatedText = this.insertText(input);\n      this.moveCursorAfterEdit(moveCursor);\n      return updatedText;\n    });\n\n    this.textToInsert = '';\n    this.indexsToMove = [3, 3];\n    this._maxSize = 5000000;\n    this.uploadingState = {\n      progress: 0,\n      error: ''\n    };\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n  _setTextToInsert(url) {\n    this.textToInsert = `\\n![](${url})\\n`;\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Editors/Img.ts"],"names":["axios","URL","headerOption","CurrentInsertion","ImgEditor","constructor","ProgressEvent","uploadingProgress","Math","round","loaded","total","uploadingState","progress","error","file","isExcessSize","size","_maxSize","isValidFile","imgData","FormData","append","postConfig","headers","onUploadProgress","_setUploadingState","response","post","IMGUR","imgUrl","data","link","_setTextToInsert","input","currentCursorIndex","moveCursor","setIndexToInsert","setIndexToGo","updatedText","insertText","moveCursorAfterEdit","textToInsert","indexsToMove","indexToInsert","indexToGo","url"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAOC,gBAAP,MAA6B,8BAA7B;AAEA,eAAe,MAAMC,SAAN,SAAwBD,gBAAxB,CAAyC;AAatDE,EAAAA,WAAW,GAAG;AACZ;;AADY;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,gDAcgBC,aAAD,IAAwC;AACnE,YAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACK,KAAtC,GAA+C,GAA1D,CAA1B;AACA,WAAKC,cAAL,GAAsB;AAAEC,QAAAA,QAAQ,EAAEN,iBAAZ;AAA+BO,QAAAA,KAAK,EAAE;AAAtC,OAAtB;AACD,KAjBa;;AAAA,uCAmBK,MAAOC,IAAP,IAAqC;AACtD,YAAMC,YAAY,GAAGD,IAAI,CAACE,IAAL,GAAY,KAAKC,QAAtC;AACA,YAAMC,WAAW,GAAGJ,IAAI,IAAIC,YAA5B;AACA,UAAI,CAACG,WAAL,EAAkB,KAAKP,cAAL,GAAsB;AAAEC,QAAAA,QAAQ,EAAE,CAAZ;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAtB;AAClB,YAAMM,OAAO,GAAG,IAAIC,QAAJ,EAAhB;AACAD,MAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBP,IAAxB;;AAEA,UAAI;AACF,cAAMQ,UAAU,GAAG;AACjBC,UAAAA,OAAO,EAAEtB,YADQ;AAEjBuB,UAAAA,gBAAgB,EAAGnB,aAAD,IAAkC,KAAKoB,kBAAL,CAAwBpB,aAAxB;AAFnC,SAAnB;AAKA,cAAMqB,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,IAAN,CAAW3B,GAAG,CAAC4B,KAAf,EAAsBT,OAAtB,EAA+BG,UAA/B,CAAvB;AACA,cAAMO,MAAM,GAAGH,QAAQ,CAACI,IAAT,CAAcA,IAAd,CAAmBC,IAAlC;AACA,aAAKpB,cAAL,GAAsB;AAAEC,UAAAA,QAAQ,EAAE,CAAZ;AAAeC,UAAAA,KAAK,EAAE;AAAtB,SAAtB;;AACA,aAAKmB,gBAAL,CAAsBH,MAAtB;AACD,OAVD,CAUE,OAAOhB,KAAP,EAAc;AACd,aAAKF,cAAL,GAAsB;AAAEC,UAAAA,QAAQ,EAAE,CAAZ;AAAeC,UAAAA;AAAf,SAAtB;AACD;AACF,KAvCa;;AAAA,+CAyCa,CAAC;AAAEoB,MAAAA,KAAF;AAASC,MAAAA,kBAAT;AAA6BC,MAAAA;AAA7B,KAAD,KAA2E;AACpG,WAAKC,gBAAL,CAAsBF,kBAAtB;AACA,WAAKG,YAAL,CAAkBH,kBAAlB;AACA,YAAMI,WAAW,GAAG,KAAKC,UAAL,CAAgBN,KAAhB,CAApB;AACA,WAAKO,mBAAL,CAAyBL,UAAzB;AAEA,aAAOG,WAAP;AACD,KAhDa;;AAEZ,SAAKG,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA,SAAKzB,QAAL,GAAgB,OAAhB;AACA,SAAKN,cAAL,GAAsB;AAAEC,MAAAA,QAAQ,EAAE,CAAZ;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAtB;AACA,SAAK8B,aAAL,GAAqB,CAArB;AACA,SAAKC,SAAL,GAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACD;;AAEOZ,EAAAA,gBAAR,CAAyBa,GAAzB,EAA4C;AAC1C,SAAKJ,YAAL,GAAqB,SAAQI,GAAI,KAAjC;AACD;;AAzBqD","sourcesContent":["import axios from 'axios';\nimport { URL } from '@constants/url';\nimport { headerOption } from '@config/headerForImgur';\nimport { IOnClickEditButton } from '@types';\nimport CurrentInsertion from '../Abstract/CurrentInsertion';\n\nexport default class ImgEditor extends CurrentInsertion {\n  protected textToInsert: string;\n\n  private _maxSize!: number;\n\n  public uploadingState: { progress: number; error: string };\n\n  protected indexToInsert: number;\n\n  protected indexToGo: number[];\n\n  protected indexsToMove: number[];\n\n  constructor() {\n    super();\n    this.textToInsert = '';\n    this.indexsToMove = [3, 3];\n    this._maxSize = 5000000;\n    this.uploadingState = { progress: 0, error: '' };\n    this.indexToInsert = 0;\n    this.indexToGo = [0, 0];\n  }\n\n  private _setTextToInsert(url: string): void {\n    this.textToInsert = `\\n![](${url})\\n`;\n  }\n\n  private _setUploadingState = (ProgressEvent: ProgressEvent): void => {\n    const uploadingProgress = Math.round((ProgressEvent.loaded / ProgressEvent.total) * 100);\n    this.uploadingState = { progress: uploadingProgress, error: '' };\n  };\n\n  public uploadImg = async (file: File): Promise<void> => {\n    const isExcessSize = file.size > this._maxSize;\n    const isValidFile = file && isExcessSize;\n    if (!isValidFile) this.uploadingState = { progress: 0, error: 'NOT_VAILD_FILE' };\n    const imgData = new FormData();\n    imgData.append('image', file);\n\n    try {\n      const postConfig = {\n        headers: headerOption,\n        onUploadProgress: (ProgressEvent: ProgressEvent) => this._setUploadingState(ProgressEvent),\n      };\n\n      const response = await axios.post(URL.IMGUR, imgData, postConfig);\n      const imgUrl = response.data.data.link;\n      this.uploadingState = { progress: 0, error: '' };\n      this._setTextToInsert(imgUrl);\n    } catch (error) {\n      this.uploadingState = { progress: 0, error };\n    }\n  };\n\n  public onClickEditButton = ({ input, currentCursorIndex, moveCursor }: IOnClickEditButton): string => {\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n    const updatedText = this.insertText(input);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}