{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/organisms/MarkdownEditor/MarkdownEditor.tsx\";\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport WritingArea from '@molecules/WritingArea/index';\nimport PostTitleInput from '@molecules/PostTitleInput/index';\nimport TagAddingBox from '@organisms/TagAddingBox/index';\nimport EditButtonBox from '@molecules/EditButtonBox/index';\nimport editInputText from '@utils/editInputText';\nconst StyeldEditorArea = styled.div.withConfig({\n  displayName: \"MarkdownEditor__StyeldEditorArea\",\n  componentId: \"sc-13p7271-0\"\n})([\"width:50%;height:100vh;& > hr{position:absolute;top:13vh;left:3vw;width:9vw;border:4px solid \", \";padding-bottm:300px;}.tagModal{top:13.5em;}.show{animation-name:bounce;animation-duration:0.5s;}\"], () => Theme.EMPHASIS);\n\nconst findCursorPoint = element => {\n  const cursorPointStart = element === null || element === void 0 ? void 0 : element.selectionStart;\n  const cursorPointEnd = element === null || element === void 0 ? void 0 : element.selectionEnd;\n  const cursorPosition = [cursorPointStart, cursorPointEnd];\n  return cursorPosition;\n};\n\nfunction MarkDownEditor({\n  input,\n  setInput\n}) {\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const isEditText = useRef([false, [0, 0]]);\n  const {\n    0: cursorPosition,\n    1: setCursorPosition\n  } = useState([0, 0]);\n  const inputAreaElem = useRef(null);\n  const propsAboutTextComponent = {\n    input,\n    setInput,\n    cursorPosition,\n    setCursorPosition,\n    findCursorPoint,\n    inputAreaElem,\n    isEditText\n  };\n  const editTextByButton = useCallback(event => {\n    var _inputAreaElem$curren;\n\n    const cursorPositionToGo = editInputText({\n      event,\n      input,\n      setInput,\n      cursorPosition\n    });\n    isEditText.current = [true, cursorPositionToGo];\n    (_inputAreaElem$curren = inputAreaElem.current) === null || _inputAreaElem$curren === void 0 ? void 0 : _inputAreaElem$curren.focus();\n  }, [input]);\n  useEffect(() => {\n    if (isEditText.current[0]) {\n      var _inputAreaElem$curren2, _inputAreaElem$curren3;\n\n      const cursorToGo = isEditText.current[1];\n      const [startPosition, endPosition] = cursorToGo;\n      (_inputAreaElem$curren2 = inputAreaElem.current) === null || _inputAreaElem$curren2 === void 0 ? void 0 : _inputAreaElem$curren2.focus();\n      (_inputAreaElem$curren3 = inputAreaElem.current) === null || _inputAreaElem$curren3 === void 0 ? void 0 : _inputAreaElem$curren3.setSelectionRange(startPosition, endPosition);\n      isEditText.current = [false, [0, 0]];\n      setCursorPosition(findCursorPoint(inputAreaElem.current));\n    }\n  }, [input]);\n  useEffect(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n    if (isNotVaildUrl) return;\n    const newInput = `${input.slice(0, cursorPosition[0])}![](${imageUrl})${input.slice(cursorPosition[0])}`;\n    setInput(newInput);\n    setImageUrl('');\n  }, [imageUrl]);\n  return /*#__PURE__*/_jsxDEV(StyeldEditorArea, {\n    children: [/*#__PURE__*/_jsxDEV(PostTitleInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagAddingBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditButtonBox, {\n      onClick: event => editTextByButton(event),\n      setImageUrl: setImageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WritingArea, {\n      className: \"textInput\",\n      propsAboutTextComponent: propsAboutTextComponent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MarkDownEditor;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/organisms/MarkdownEditor/MarkdownEditor.tsx"],"names":["React","useCallback","useState","useEffect","useRef","styled","Theme","WritingArea","PostTitleInput","TagAddingBox","EditButtonBox","editInputText","StyeldEditorArea","div","EMPHASIS","findCursorPoint","element","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","cursorPosition","MarkDownEditor","input","setInput","imageUrl","setImageUrl","isEditText","setCursorPosition","inputAreaElem","propsAboutTextComponent","editTextByButton","event","cursorPositionToGo","current","focus","cursorToGo","startPosition","endPosition","setSelectionRange","isNotVaildUrl","undefined","length","newInput","slice"],"mappings":"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","sourcesContent":["import React, { ReactElement, useCallback, useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport WritingArea from '@molecules/WritingArea/index';\nimport PostTitleInput from '@molecules/PostTitleInput/index';\nimport TagAddingBox from '@organisms/TagAddingBox/index';\nimport EditButtonBox from '@molecules/EditButtonBox/index';\nimport editInputText from '@utils/editInputText';\nimport { IPostInputProps } from '@interfaces';\n\nconst StyeldEditorArea = styled.div`\n  width: 50%;\n  height: 100vh;\n  & > hr {\n    position: absolute;\n    top: 13vh;\n    left: 3vw;\n    width: 9vw;\n    border: 4px solid ${() => Theme.EMPHASIS};\n    padding-bottm: 300px;\n  }\n\n  .tagModal {\n    top: 13.5em;\n  }\n\n  .show {\n    animation-name: bounce;\n    animation-duration: 0.5s;\n  }\n`;\n\nconst findCursorPoint = (element: HTMLTextAreaElement): number[] => {\n  const cursorPointStart = element?.selectionStart;\n  const cursorPointEnd = element?.selectionEnd;\n  const cursorPosition = [cursorPointStart, cursorPointEnd];\n\n  return cursorPosition;\n};\n\nfunction MarkDownEditor({ input, setInput }: IPostInputProps): ReactElement {\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const isEditText = useRef([false, [0, 0]]);\n  const [cursorPosition, setCursorPosition] = useState([0, 0]);\n  const inputAreaElem = useRef<HTMLTextAreaElement>(null);\n\n  const propsAboutTextComponent = {\n    input,\n    setInput,\n    cursorPosition,\n    setCursorPosition,\n    findCursorPoint,\n    inputAreaElem,\n    isEditText,\n  };\n\n  const editTextByButton = useCallback(\n    (event: React.MouseEvent<SVGElement, MouseEvent>) => {\n      const cursorPositionToGo = editInputText({ event, input, setInput, cursorPosition });\n      isEditText.current = [true, cursorPositionToGo];\n      inputAreaElem.current?.focus();\n    },\n    [input],\n  );\n\n  useEffect(() => {\n    if (isEditText.current[0]) {\n      const cursorToGo = isEditText.current[1];\n      const [startPosition, endPosition] = cursorToGo as number[];\n\n      inputAreaElem.current?.focus();\n      inputAreaElem.current?.setSelectionRange(startPosition, endPosition);\n      isEditText.current = [false, [0, 0]];\n      setCursorPosition(findCursorPoint(inputAreaElem.current as HTMLTextAreaElement));\n    }\n  }, [input]);\n\n  useEffect(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n    if (isNotVaildUrl) return;\n    const newInput = `${input.slice(0, cursorPosition[0])}![](${imageUrl})${input.slice(cursorPosition[0])}`;\n    setInput(newInput);\n    setImageUrl('');\n  }, [imageUrl]);\n\n  return (\n    <StyeldEditorArea>\n      <PostTitleInput />\n      <hr />\n      <TagAddingBox />\n      <EditButtonBox onClick={(event) => editTextByButton(event)} setImageUrl={setImageUrl} />\n      <WritingArea className=\"textInput\" propsAboutTextComponent={propsAboutTextComponent} />\n    </StyeldEditorArea>\n  );\n}\n\nexport default MarkDownEditor;\n"]},"metadata":{},"sourceType":"module"}