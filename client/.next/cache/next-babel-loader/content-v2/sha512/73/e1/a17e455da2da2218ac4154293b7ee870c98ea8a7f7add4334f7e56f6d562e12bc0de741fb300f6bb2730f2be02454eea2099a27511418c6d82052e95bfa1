{"ast":null,"code":"import Theme from '@theme/index';\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\nconst MINIMUM_GAP_BOXES = '1%';\nconst MAXIMUM_GAP_BOXES = '100%';\nconst NUM_HIDE_TEXT = '0%';\nconst NUM_SHOW_TEXT = '100%';\n\nconst fadeOutTextBox = ({\n  isMounted,\n  setMargin,\n  setOpacity\n}) => {\n  const setTimingText = setTimeout(() => {\n    if (!isMounted) {\n      clearTimeout(setTimingText);\n      return;\n    }\n\n    setMargin(MAXIMUM_GAP_BOXES);\n    setOpacity(NUM_HIDE_TEXT);\n    const hideText = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(hideText);\n        return;\n      }\n\n      setMargin(MAXIMUM_GAP_BOXES);\n      setOpacity(NUM_HIDE_TEXT);\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n};\n\nconst fadeInTextBox = ({\n  isMounted,\n  setMargin,\n  setOpacity\n}) => {\n  const timerToShow = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToShow);\n      return;\n    }\n\n    setMargin(MINIMUM_GAP_BOXES);\n    setOpacity(NUM_SHOW_TEXT);\n  }, TEXT_PERIOD);\n};\n\nconst changeNextOrder = ({\n  isMounted,\n  color,\n  textList,\n  setColor,\n  setIntro\n}) => {\n  let currentListIndex = 1;\n  let newColor = color;\n  const timerToChange = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToChange);\n      return;\n    }\n\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    const isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nconst animateIntroduceText = ({\n  textList,\n  isMounted,\n  color,\n  setMargin,\n  setColor,\n  setOpacity,\n  setIntro\n}) => {\n  setMargin(MINIMUM_GAP_BOXES);\n  fadeOutTextBox({\n    isMounted,\n    setMargin,\n    setOpacity\n  });\n  fadeInTextBox({\n    isMounted,\n    setMargin,\n    setOpacity\n  });\n  changeNextOrder({\n    isMounted,\n    color,\n    textList,\n    setColor,\n    setIntro\n  });\n};\n\nexport default animateIntroduceText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/animateText.ts"],"names":["Theme","REPEAT_START_TIMING","TEXT_PERIOD","MINIMUM_GAP_BOXES","MAXIMUM_GAP_BOXES","NUM_HIDE_TEXT","NUM_SHOW_TEXT","fadeOutTextBox","isMounted","setMargin","setOpacity","setTimingText","setTimeout","clearTimeout","hideText","setInterval","clearInterval","fadeInTextBox","timerToShow","changeNextOrder","color","textList","setColor","setIntro","currentListIndex","newColor","timerToChange","BLACK","POINT","isOverList","length","animateIntroduceText"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\nimport { IColorProps } from '@interfaces';\nimport Theme from '@theme/index';\n\ninterface IAnimateProps extends IColorProps {\n  textList: string[];\n  isMounted: boolean;\n  setMargin: Dispatch<SetStateAction<string>>;\n  setColor: Dispatch<SetStateAction<string>>;\n  setOpacity: Dispatch<SetStateAction<string>>;\n  setIntro: Dispatch<SetStateAction<string>>;\n}\n\ninterface IFadeTextProps {\n  isMounted: boolean;\n  setMargin: Dispatch<SetStateAction<string>>;\n  setOpacity: Dispatch<SetStateAction<string>>;\n}\n\ninterface IFadeTextFunc {\n  (props: IFadeTextProps): void;\n}\n\ninterface IChangeOrderProps {\n  isMounted: boolean;\n  color?: string;\n  textList: string[];\n  setColor: Dispatch<SetStateAction<string>>;\n  setIntro: Dispatch<SetStateAction<string>>;\n}\n\ninterface IChangeOrderFunc {\n  (props: IChangeOrderProps): void;\n}\n\ninterface IAnimateTextFunc {\n  (props: IAnimateProps): void;\n}\n\nconst REPEAT_START_TIMING = 3000;\nconst TEXT_PERIOD = 4000;\nconst MINIMUM_GAP_BOXES = '1%';\nconst MAXIMUM_GAP_BOXES = '100%';\nconst NUM_HIDE_TEXT = '0%';\nconst NUM_SHOW_TEXT = '100%';\n\nconst fadeOutTextBox: IFadeTextFunc = ({ isMounted, setMargin, setOpacity }) => {\n  const setTimingText = setTimeout(() => {\n    if (!isMounted) {\n      clearTimeout(setTimingText);\n      return;\n    }\n    setMargin(MAXIMUM_GAP_BOXES);\n    setOpacity(NUM_HIDE_TEXT);\n    const hideText = setInterval(() => {\n      if (!isMounted) {\n        clearInterval(hideText);\n        return;\n      }\n      setMargin(MAXIMUM_GAP_BOXES);\n      setOpacity(NUM_HIDE_TEXT);\n    }, TEXT_PERIOD);\n  }, REPEAT_START_TIMING);\n};\n\nconst fadeInTextBox: IFadeTextFunc = ({ isMounted, setMargin, setOpacity }) => {\n  const timerToShow = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToShow);\n      return;\n    }\n    setMargin(MINIMUM_GAP_BOXES);\n\n    setOpacity(NUM_SHOW_TEXT);\n  }, TEXT_PERIOD);\n};\n\nconst changeNextOrder: IChangeOrderFunc = ({ isMounted, color, textList, setColor, setIntro }) => {\n  let currentListIndex = 1;\n  let newColor = color;\n  const timerToChange = setInterval(() => {\n    if (!isMounted) {\n      clearInterval(timerToChange);\n      return;\n    }\n    newColor = newColor === Theme.BLACK ? Theme.POINT : Theme.BLACK;\n    setColor(newColor);\n    setIntro(textList[currentListIndex]);\n    currentListIndex += 1;\n    const isOverList = currentListIndex > textList.length - 1;\n    currentListIndex = isOverList ? 0 : currentListIndex;\n  }, TEXT_PERIOD);\n};\n\nconst animateIntroduceText: IAnimateTextFunc = ({\n  textList,\n  isMounted,\n  color,\n  setMargin,\n  setColor,\n  setOpacity,\n  setIntro,\n}) => {\n  setMargin(MINIMUM_GAP_BOXES);\n  fadeOutTextBox({ isMounted, setMargin, setOpacity });\n  fadeInTextBox({ isMounted, setMargin, setOpacity });\n\n  changeNextOrder({ isMounted, color, textList, setColor, setIntro });\n};\n\nexport default animateIntroduceText;\n"]},"metadata":{},"sourceType":"module"}