{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CurrentInsertion from './CurrentInsertion';\nexport default class AbstractTextEditor extends CurrentInsertion {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"pointText\", void 0);\n\n    _defineProperty(this, \"onClickEditButton\", ({\n      input,\n      cursorPosition,\n      moveCursor\n    }) => {\n      const currentCursorIndex = cursorPosition[0];\n      const isSelected = cursorPosition[0] !== cursorPosition[1];\n      this.setIndexToInsert(currentCursorIndex);\n      this.setIndexToGo(currentCursorIndex);\n      if (isSelected) this.delSelectText(input, cursorPosition);\n      const updatedText = this.insertText(input);\n      this.moveCursorAfterEdit(moveCursor);\n      return updatedText;\n    });\n\n    _defineProperty(this, \"onClickSelectedText\", ({\n      input,\n      cursorPosition,\n      moveCursor\n    }) => {\n      const [frontCursor, backCursor] = cursorPosition;\n      const isInSameTag = input.slice(frontCursor - this.pointText.length, frontCursor).includes(this.pointText) && input.slice(backCursor, backCursor + this.pointText.length).includes(this.pointText);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Abstract/TextEditor.ts"],"names":["CurrentInsertion","AbstractTextEditor","input","cursorPosition","moveCursor","currentCursorIndex","isSelected","setIndexToInsert","setIndexToGo","delSelectText","updatedText","insertText","moveCursorAfterEdit","frontCursor","backCursor","isInSameTag","slice","pointText","length","includes"],"mappings":";;AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AAEA,eAAe,MAAeC,kBAAf,SAA0CD,gBAA1C,CAA2D;AAAA;AAAA;;AAAA;;AAAA,+CAG7C,CAAC;AAAEE,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA;AAAzB,KAAD,KAAuE;AAChG,YAAMC,kBAAkB,GAAGF,cAAc,CAAC,CAAD,CAAzC;AACA,YAAMG,UAAU,GAAGH,cAAc,CAAC,CAAD,CAAd,KAAsBA,cAAc,CAAC,CAAD,CAAvD;AACA,WAAKI,gBAAL,CAAsBF,kBAAtB;AACA,WAAKG,YAAL,CAAkBH,kBAAlB;AAEA,UAAIC,UAAJ,EAAgB,KAAKG,aAAL,CAAmBP,KAAnB,EAA0BC,cAA1B;AAChB,YAAMO,WAAW,GAAG,KAAKC,UAAL,CAAgBT,KAAhB,CAApB;AACA,WAAKU,mBAAL,CAAyBR,UAAzB;AAEA,aAAOM,WAAP;AACD,KAduE;;AAAA,iDAgBxC,CAAC;AAAER,MAAAA,KAAF;AAASC,MAAAA,cAAT;AAAyBC,MAAAA;AAAzB,KAAD,KAAuE;AACrG,YAAM,CAACS,WAAD,EAAcC,UAAd,IAA4BX,cAAlC;AACA,YAAMY,WAAW,GACfb,KAAK,CAACc,KAAN,CAAYH,WAAW,GAAG,KAAKI,SAAL,CAAeC,MAAzC,EAAiDL,WAAjD,EAA8DM,QAA9D,CAAuE,KAAKF,SAA5E,KACAf,KAAK,CAACc,KAAN,CAAYF,UAAZ,EAAwBA,UAAU,GAAG,KAAKG,SAAL,CAAeC,MAApD,EAA4DC,QAA5D,CAAqE,KAAKF,SAA1E,CAFF;AAGD,KArBuE;AAAA;;AAAA","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport CurrentInsertion from './CurrentInsertion';\n\nexport default abstract class AbstractTextEditor extends CurrentInsertion {\n  protected abstract pointText: string;\n\n  public onClickEditButton = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const currentCursorIndex = cursorPosition[0];\n    const isSelected = cursorPosition[0] !== cursorPosition[1];\n    this.setIndexToInsert(currentCursorIndex);\n    this.setIndexToGo(currentCursorIndex);\n\n    if (isSelected) this.delSelectText(input, cursorPosition);\n    const updatedText = this.insertText(input);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n\n  protected onClickSelectedText = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const [frontCursor, backCursor] = cursorPosition;\n    const isInSameTag =\n      input.slice(frontCursor - this.pointText.length, frontCursor).includes(this.pointText) &&\n      input.slice(backCursor, backCursor + this.pointText.length).includes(this.pointText);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}