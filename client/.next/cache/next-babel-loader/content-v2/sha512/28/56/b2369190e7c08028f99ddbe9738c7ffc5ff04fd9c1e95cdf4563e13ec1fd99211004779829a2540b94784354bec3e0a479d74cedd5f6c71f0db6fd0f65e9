{"ast":null,"code":"import { useState, useRef } from 'react';\n\nconst useCursorPoint = inputAreaElem => {\n  const initCursor = [0, 0];\n  const {\n    0: cursorPosition,\n    1: setCursorPosition\n  } = useState(initCursor);\n  const infoOfCursorToGo = useRef([false, cursorPosition]);\n  const inputElem = inputAreaElem !== null && inputAreaElem !== void 0 ? inputAreaElem : document.querySelectorAll('.textInput');\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputElem.selectionStart;\n    const cursorPointEnd = inputElem.selectionEnd;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = cursorPositionToGo => {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputElem.focus();\n  };\n\n  return {\n    cursorPosition,\n    setCursorPosition,\n    infoOfCursorToGo,\n    updateCusorPoint,\n    moveCursor\n  };\n};\n\nexport default useCursorPoint;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useCursorPoint.tsx"],"names":["useState","useRef","useCursorPoint","inputAreaElem","initCursor","cursorPosition","setCursorPosition","infoOfCursorToGo","inputElem","document","querySelectorAll","updateCusorPoint","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","updatedCursorPosition","moveCursor","cursorPositionToGo","current","focus"],"mappings":"AAAA,SAAgBA,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;;AAWA,MAAMC,cAAc,GAAIC,aAAD,IAAkE;AACvF,QAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCN,QAAQ,CAACI,UAAD,CAApD;AACA,QAAMG,gBAAgB,GAAGN,MAAM,CAAsB,CAAC,KAAD,EAAQI,cAAR,CAAtB,CAA/B;AAEA,QAAMG,SAAS,GAAGL,aAAH,aAAGA,aAAH,cAAGA,aAAH,GAAoBM,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,CAAnC;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,UAAMC,gBAAgB,GAAGJ,SAAS,CAACK,cAAnC;AACA,UAAMC,cAAc,GAAGN,SAAS,CAACO,YAAjC;AACA,UAAMC,qBAAqB,GAAG,CAACJ,gBAAD,EAAmBE,cAAnB,CAA9B;AACAR,IAAAA,iBAAiB,CAACU,qBAAD,CAAjB;AACD,GALD;;AAOA,QAAMC,UAAU,GAAIC,kBAAD,IAAkC;AACnDX,IAAAA,gBAAgB,CAACY,OAAjB,GAA2B,CAAC,IAAD,EAAOD,kBAAP,CAA3B;AACAV,IAAAA,SAAS,CAACY,KAAV;AACD,GAHD;;AAKA,SAAO;AAAEf,IAAAA,cAAF;AAAkBC,IAAAA,iBAAlB;AAAqCC,IAAAA,gBAArC;AAAuDI,IAAAA,gBAAvD;AAAyEM,IAAAA;AAAzE,GAAP;AACD,CApBD;;AAsBA,eAAef,cAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { setStateNumberArr } from '@types';\n\ninterface ICursorHookReturn {\n  cursorPosition: number[];\n  setCursorPosition: setStateNumberArr;\n  infoOfCursorToGo: React.MutableRefObject<[boolean, number[]]>;\n  updateCusorPoint: () => void;\n  moveCursor: (cursorPositionToGo: number[]) => void;\n}\n\nconst useCursorPoint = (inputAreaElem: HTMLTextAreaElement | null): ICursorHookReturn => {\n  const initCursor = [0, 0];\n  const [cursorPosition, setCursorPosition] = useState(initCursor);\n  const infoOfCursorToGo = useRef<[boolean, number[]]>([false, cursorPosition]);\n\n  const inputElem = inputAreaElem ?? document.querySelectorAll('.textInput');\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputElem.selectionStart;\n    const cursorPointEnd = inputElem.selectionEnd;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = (cursorPositionToGo: number[]) => {\n    infoOfCursorToGo.current = [true, cursorPositionToGo];\n    inputElem.focus();\n  };\n\n  return { cursorPosition, setCursorPosition, infoOfCursorToGo, updateCusorPoint, moveCursor };\n};\n\nexport default useCursorPoint;\n"]},"metadata":{},"sourceType":"module"}