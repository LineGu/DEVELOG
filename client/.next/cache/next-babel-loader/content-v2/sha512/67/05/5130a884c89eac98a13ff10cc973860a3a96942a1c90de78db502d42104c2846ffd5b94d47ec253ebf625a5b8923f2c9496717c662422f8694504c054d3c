{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\n\nvar uploadImg = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, setProcess, setImageUrl) {\n    var isExcessSize, getUploadProgress, imgData, postConfig, response, imgLink;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isExcessSize = file.size > 5000000;\n\n            getUploadProgress = function getUploadProgress(ProgressEvent) {\n              var progress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100);\n              setProcess({\n                progress: progress,\n                error: ''\n              });\n            };\n\n            if (file && isExcessSize) {\n              setProcess({\n                progress: 0,\n                error: 'EXCESS'\n              });\n            }\n\n            imgData = new FormData();\n            imgData.append('image', file);\n            _context.prev = 5;\n            postConfig = {\n              headers: headerOption,\n              onUploadProgress: function onUploadProgress(ProgressEvent) {\n                return getUploadProgress(ProgressEvent);\n              }\n            };\n            _context.next = 9;\n            return axios.post(url.IMGUR, imgData, postConfig);\n\n          case 9:\n            response = _context.sent;\n            imgLink = response.data.data.link;\n            setImageUrl(imgLink);\n            setProcess({\n              progress: 0,\n              error: ''\n            });\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](5);\n            setProcess({\n              progress: 0,\n              error: _context.t0\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 15]]);\n  }));\n\n  return function uploadImg(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default uploadImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/uploadImg.ts"],"names":["axios","headerOption","url","uploadImg","file","setProcess","setImageUrl","isExcessSize","size","getUploadProgress","ProgressEvent","progress","Math","round","loaded","total","error","imgData","FormData","append","postConfig","headers","onUploadProgress","post","IMGUR","response","imgLink","data","link"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAGA,IAAMC,SAAS;AAAA,sEAAG,iBAAOC,IAAP,EAAmBC,UAAnB,EAAgDC,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,YADU,GACKH,IAAI,CAACI,IAAL,GAAY,OADjB;;AAGVC,YAAAA,iBAHU,GAGU,SAApBA,iBAAoB,CAACC,aAAD,EAAkC;AAC1D,kBAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACK,KAAtC,GAA+C,GAA1D,CAAjB;AACAV,cAAAA,UAAU,CAAC;AAAEM,gBAAAA,QAAQ,EAARA,QAAF;AAAYK,gBAAAA,KAAK,EAAE;AAAnB,eAAD,CAAV;AACD,aANe;;AAQhB,gBAAIZ,IAAI,IAAIG,YAAZ,EAA0B;AACxBF,cAAAA,UAAU,CAAC;AAAEM,gBAAAA,QAAQ,EAAE,CAAZ;AAAeK,gBAAAA,KAAK,EAAE;AAAtB,eAAD,CAAV;AACD;;AAEKC,YAAAA,OAZU,GAYA,IAAIC,QAAJ,EAZA;AAahBD,YAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBf,IAAxB;AAbgB;AAgBRgB,YAAAA,UAhBQ,GAgBK;AACjBC,cAAAA,OAAO,EAAEpB,YADQ;AAEjBqB,cAAAA,gBAAgB,EAAE,0BAACZ,aAAD;AAAA,uBAAkCD,iBAAiB,CAACC,aAAD,CAAnD;AAAA;AAFD,aAhBL;AAAA;AAAA,mBAqBSV,KAAK,CAACuB,IAAN,CAAWrB,GAAG,CAACsB,KAAf,EAAsBP,OAAtB,EAA+BG,UAA/B,CArBT;;AAAA;AAqBRK,YAAAA,QArBQ;AAsBRC,YAAAA,OAtBQ,GAsBED,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBC,IAtBrB;AAuBdtB,YAAAA,WAAW,CAACoB,OAAD,CAAX;AACArB,YAAAA,UAAU,CAAC;AAAEM,cAAAA,QAAQ,EAAE,CAAZ;AAAeK,cAAAA,KAAK,EAAE;AAAtB,aAAD,CAAV;AAxBc;AAAA;;AAAA;AAAA;AAAA;AA0BdX,YAAAA,UAAU,CAAC;AAAEM,cAAAA,QAAQ,EAAE,CAAZ;AAAeK,cAAAA,KAAK;AAApB,aAAD,CAAV;;AA1Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATb,SAAS;AAAA;AAAA;AAAA,GAAf;;AA8BA,eAAeA,SAAf","sourcesContent":["import axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\nimport { SetStateProcess, SetStateString } from '@types';\n\nconst uploadImg = async (file: File, setProcess: SetStateProcess, setImageUrl: SetStateString): Promise<void> => {\n  const isExcessSize = file.size > 5000000;\n\n  const getUploadProgress = (ProgressEvent: ProgressEvent) => {\n    const progress = Math.round((ProgressEvent.loaded / ProgressEvent.total) * 100);\n    setProcess({ progress, error: '' });\n  };\n\n  if (file && isExcessSize) {\n    setProcess({ progress: 0, error: 'EXCESS' });\n  }\n\n  const imgData = new FormData();\n  imgData.append('image', file);\n\n  try {\n    const postConfig = {\n      headers: headerOption,\n      onUploadProgress: (ProgressEvent: ProgressEvent) => getUploadProgress(ProgressEvent),\n    };\n\n    const response = await axios.post(url.IMGUR, imgData, postConfig);\n    const imgLink = response.data.data.link;\n    setImageUrl(imgLink);\n    setProcess({ progress: 0, error: '' });\n  } catch (error) {\n    setProcess({ progress: 0, error });\n  }\n};\n\nexport default uploadImg;\n"]},"metadata":{},"sourceType":"module"}