{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\n\nvar uploadImg = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, setProcess) {\n    var uploadInfo, isExcessSize, getUploadProgress, imgData, postConfig, response, imgLink;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uploadInfo = {\n              data: '',\n              error: ''\n            };\n            isExcessSize = file.size > 5000000;\n\n            getUploadProgress = function getUploadProgress(ProgressEvent) {\n              var progress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100);\n              setProcess({\n                process: progress,\n                error: ''\n              });\n            };\n\n            if (file && isExcessSize) {\n              setProcess({\n                process: 0,\n                error: 'EXCESS'\n              });\n            }\n\n            imgData = new FormData();\n            imgData.append('image', file);\n            _context.prev = 6;\n            postConfig = {\n              headers: headerOption,\n              onUploadProgress: function onUploadProgress(ProgressEvent) {\n                return getUploadProgress(ProgressEvent);\n              }\n            };\n            _context.next = 10;\n            return axios.post(url.IMGUR, imgData, postConfig);\n\n          case 10:\n            response = _context.sent;\n            imgLink = response.data.data.link;\n            uploadInfo.data = imgLink;\n            return _context.abrupt(\"return\", uploadInfo);\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](6);\n            setProcess({\n              process: 0,\n              error: _context.t0\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 16]]);\n  }));\n\n  return function uploadImg(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default uploadImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/uploadImg.ts"],"names":["axios","headerOption","url","uploadImg","file","setProcess","uploadInfo","data","error","isExcessSize","size","getUploadProgress","ProgressEvent","progress","Math","round","loaded","total","process","imgData","FormData","append","postConfig","headers","onUploadProgress","post","IMGUR","response","imgLink","link"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAQA,IAAMC,SAAS;AAAA,sEAAG,iBAAOC,IAAP,EAAmBC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,UADU,GACG;AACjBC,cAAAA,IAAI,EAAE,EADW;AAEjBC,cAAAA,KAAK,EAAE;AAFU,aADH;AAKVC,YAAAA,YALU,GAKKL,IAAI,CAACM,IAAL,GAAY,OALjB;;AAOVC,YAAAA,iBAPU,GAOU,SAApBA,iBAAoB,CAACC,aAAD,EAAkC;AAC1D,kBAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACK,KAAtC,GAA+C,GAA1D,CAAjB;AACAZ,cAAAA,UAAU,CAAC;AAAEa,gBAAAA,OAAO,EAAEL,QAAX;AAAqBL,gBAAAA,KAAK,EAAE;AAA5B,eAAD,CAAV;AACD,aAVe;;AAYhB,gBAAIJ,IAAI,IAAIK,YAAZ,EAA0B;AACxBJ,cAAAA,UAAU,CAAC;AAAEa,gBAAAA,OAAO,EAAE,CAAX;AAAcV,gBAAAA,KAAK,EAAE;AAArB,eAAD,CAAV;AACD;;AAEKW,YAAAA,OAhBU,GAgBA,IAAIC,QAAJ,EAhBA;AAiBhBD,YAAAA,OAAO,CAACE,MAAR,CAAe,OAAf,EAAwBjB,IAAxB;AAjBgB;AAoBRkB,YAAAA,UApBQ,GAoBK;AACjBC,cAAAA,OAAO,EAAEtB,YADQ;AAEjBuB,cAAAA,gBAAgB,EAAE,0BAACZ,aAAD;AAAA,uBAAkCD,iBAAiB,CAACC,aAAD,CAAnD;AAAA;AAFD,aApBL;AAAA;AAAA,mBAyBSZ,KAAK,CAACyB,IAAN,CAAWvB,GAAG,CAACwB,KAAf,EAAsBP,OAAtB,EAA+BG,UAA/B,CAzBT;;AAAA;AAyBRK,YAAAA,QAzBQ;AA0BRC,YAAAA,OA1BQ,GA0BED,QAAQ,CAACpB,IAAT,CAAcA,IAAd,CAAmBsB,IA1BrB;AA2BdvB,YAAAA,UAAU,CAACC,IAAX,GAAkBqB,OAAlB;AA3Bc,6CA6BPtB,UA7BO;;AAAA;AAAA;AAAA;AA+BdD,YAAAA,UAAU,CAAC;AAAEa,cAAAA,OAAO,EAAE,CAAX;AAAcV,cAAAA,KAAK;AAAnB,aAAD,CAAV;;AA/Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATL,SAAS;AAAA;AAAA;AAAA,GAAf;;AAmCA,eAAeA,SAAf","sourcesContent":["import axios from 'axios';\nimport { headerOption } from '@config/headerForImgur';\nimport { url } from '@construction/url';\nimport { SetStateProcess } from '@types';\n\ninterface IuploadInfo {\n  data: string;\n  error: string;\n}\n\nconst uploadImg = async (file: File, setProcess: SetStateProcess): Promise<IuploadInfo> => {\n  const uploadInfo = {\n    data: '',\n    error: '',\n  };\n  const isExcessSize = file.size > 5000000;\n\n  const getUploadProgress = (ProgressEvent: ProgressEvent) => {\n    const progress = Math.round((ProgressEvent.loaded / ProgressEvent.total) * 100);\n    setProcess({ process: progress, error: '' });\n  };\n\n  if (file && isExcessSize) {\n    setProcess({ process: 0, error: 'EXCESS' });\n  }\n\n  const imgData = new FormData();\n  imgData.append('image', file);\n\n  try {\n    const postConfig = {\n      headers: headerOption,\n      onUploadProgress: (ProgressEvent: ProgressEvent) => getUploadProgress(ProgressEvent),\n    };\n\n    const response = await axios.post(url.IMGUR, imgData, postConfig);\n    const imgLink = response.data.data.link;\n    uploadInfo.data = imgLink;\n\n    return uploadInfo;\n  } catch (error) {\n    setProcess({ process: 0, error });\n  }\n};\n\nexport default uploadImg;\n"]},"metadata":{},"sourceType":"module"}