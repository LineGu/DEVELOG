{"ast":null,"code":"export const findFrontOfLine = (string, cursorPosition) => {\n  let findingIndex = cursorPosition[0];\n  let isFindFront = true;\n\n  while (isFindFront) {\n    if (string[findingIndex - 1] === '\\n') {\n      isFindFront = false;\n      break;\n    }\n\n    if (findingIndex === 0) {\n      break;\n    }\n\n    findingIndex -= 1;\n  }\n\n  return findingIndex;\n};\n\nconst insertTextFront = ({\n  input,\n  positionToInsert,\n  insertText\n}) => {\n  const textToCheckOverlap = input.slice(positionToInsert, positionToInsert + 4);\n  const beforeText = input.slice(0, positionToInsert);\n  let afterText = input.slice(positionToInsert);\n  let textToInsert = insertText;\n\n  if (insertText.includes('#') && textToCheckOverlap.includes('# ')) {\n    const indexOfMarkDownEnd = textToCheckOverlap.indexOf('# ') + 2;\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n\n  if (insertText.includes('>') && textToCheckOverlap.includes('> ')) {\n    const indexOfMarkDownEnd = textToCheckOverlap.indexOf('> ') + 2;\n    textToInsert = '';\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n\n  const newInput = beforeText + textToInsert + afterText;\n  return newInput;\n};\n\nconst insertTextSide = ({\n  input,\n  cursorPosition,\n  insertText,\n  setInput\n}) => {\n  const isSelected = cursorPosition[0] !== cursorPosition[1];\n  let textToInsert = insertText;\n\n  if (isSelected) {\n    const [startPosition, endPosition] = cursorPosition;\n    let textSelected = input.slice(startPosition, endPosition);\n    let beforeText = input.slice(0, startPosition);\n    let afterText = input.slice(endPosition);\n\n    switch (textToInsert) {\n      case '**텍스트**':\n        console.log(textSelected);\n\n        if (isSelected && beforeText.slice(-2) === '**' && afterText.slice(0, 2) === '**') {\n          beforeText = beforeText.slice(0, -2);\n          afterText = afterText.slice(2);\n          break;\n        }\n\n        if (isSelected && textSelected.slice(0, 2) === '**' && textSelected.slice(-2) === '**') {\n          textToInsert = textSelected.slice(2, -2);\n          break;\n        }\n\n        textToInsert = `**${textSelected}**`;\n        break;\n\n      case '_텍스트_':\n        if (isSelected && textSelected.slice(0, 1) === '_' && textSelected.slice(-1) === '_') {\n          textSelected = textSelected.slice(1, -1);\n          textToInsert = textSelected;\n          break;\n        }\n\n        textToInsert = `_${textSelected}_`;\n        break;\n\n      case '[링크텍스트](링크)':\n        textToInsert = `[${textSelected}](링크)`;\n        break;\n\n      default:\n        break;\n    }\n\n    const newInput = beforeText + textToInsert + afterText;\n    setInput(newInput);\n    return;\n  }\n\n  const positionToInsert = cursorPosition[0];\n  const beforeText = input.slice(0, positionToInsert);\n  const afterText = input.slice(positionToInsert);\n  const newInput = beforeText + textToInsert + afterText;\n  console.log(beforeText, afterText, textToInsert);\n  setInput(newInput);\n};\n\nconst insertToFront = ({\n  input,\n  positionToInsert,\n  insertText,\n  setInput\n}) => {\n  const newInput = insertTextFront({\n    input,\n    positionToInsert,\n    insertText\n  });\n  setInput(newInput);\n};\n\nconst editInputText = ({\n  event,\n  input,\n  setInput,\n  cursorPosition\n}) => {\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      insertToFront({\n        input,\n        positionToInsert,\n        insertText,\n        setInput\n      });\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      insertToFront({\n        input,\n        positionToInsert,\n        insertText,\n        setInput\n      });\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      insertToFront({\n        input,\n        positionToInsert,\n        insertText,\n        setInput\n      });\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      insertTextSide({\n        input,\n        cursorPosition,\n        insertText,\n        setInput\n      });\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      insertTextSide({\n        input,\n        cursorPosition,\n        insertText,\n        setInput\n      });\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      insertTextSide({\n        input,\n        cursorPosition,\n        insertText,\n        setInput\n      });\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      insertToFront({\n        input,\n        positionToInsert,\n        insertText,\n        setInput\n      });\n      break;\n\n    default:\n      break;\n  }\n};\n\nexport default editInputText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/editInputText.ts"],"names":["findFrontOfLine","string","cursorPosition","findingIndex","isFindFront","insertTextFront","input","positionToInsert","insertText","textToCheckOverlap","slice","beforeText","afterText","textToInsert","includes","indexOfMarkDownEnd","indexOf","newInput","insertTextSide","setInput","isSelected","startPosition","endPosition","textSelected","console","log","insertToFront","editInputText","event","iconClicked","currentTarget","className","baseVal"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  setInput: Dispatch<SetStateAction<string>>;\n  cursorPosition: number[];\n}\n\ninterface IInsertFrontProps {\n  input: string;\n  positionToInsert: number;\n  insertText: string;\n}\n\ninterface IInsertSideProps {\n  input: string;\n  cursorPosition: number[];\n  insertText: string;\n  setInput: Dispatch<SetStateAction<string>>;\n}\n\ninterface IInsertControlProps extends IInsertFrontProps {\n  setInput: Dispatch<SetStateAction<string>>;\n}\n\nexport const findFrontOfLine = (string: string, cursorPosition: number[]): number => {\n  let findingIndex = cursorPosition[0];\n  let isFindFront = true;\n  while (isFindFront) {\n    if (string[findingIndex - 1] === '\\n') {\n      isFindFront = false;\n      break;\n    }\n    if (findingIndex === 0) {\n      break;\n    }\n    findingIndex -= 1;\n  }\n  return findingIndex;\n};\n\nconst insertTextFront = ({ input, positionToInsert, insertText }: IInsertFrontProps): string => {\n  const textToCheckOverlap = input.slice(positionToInsert, positionToInsert + 4);\n  const beforeText = input.slice(0, positionToInsert);\n\n  let afterText = input.slice(positionToInsert);\n  let textToInsert = insertText;\n\n  if (insertText.includes('#') && textToCheckOverlap.includes('# ')) {\n    const indexOfMarkDownEnd = textToCheckOverlap.indexOf('# ') + 2;\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n  if (insertText.includes('>') && textToCheckOverlap.includes('> ')) {\n    const indexOfMarkDownEnd = textToCheckOverlap.indexOf('> ') + 2;\n    textToInsert = '';\n    afterText = afterText.slice(indexOfMarkDownEnd);\n  }\n  const newInput = beforeText + textToInsert + afterText;\n  return newInput;\n};\n\nconst insertTextSide = ({ input, cursorPosition, insertText, setInput }: IInsertSideProps): void => {\n  const isSelected = cursorPosition[0] !== cursorPosition[1];\n  let textToInsert = insertText;\n\n  if (isSelected) {\n    const [startPosition, endPosition] = cursorPosition;\n    let textSelected = input.slice(startPosition, endPosition);\n    let beforeText = input.slice(0, startPosition);\n    let afterText = input.slice(endPosition);\n\n    switch (textToInsert) {\n      case '**텍스트**':\n        console.log(textSelected);\n        if (isSelected && beforeText.slice(-2) === '**' && afterText.slice(0, 2) === '**') {\n          beforeText = beforeText.slice(0, -2);\n          afterText = afterText.slice(2);\n          break;\n        }\n        if (isSelected && textSelected.slice(0, 2) === '**' && textSelected.slice(-2) === '**') {\n          textToInsert = textSelected.slice(2, -2);\n          break;\n        }\n        textToInsert = `**${textSelected}**`;\n        break;\n\n      case '_텍스트_':\n        if (isSelected && textSelected.slice(0, 1) === '_' && textSelected.slice(-1) === '_') {\n          textSelected = textSelected.slice(1, -1);\n          textToInsert = textSelected;\n          break;\n        }\n        textToInsert = `_${textSelected}_`;\n        break;\n\n      case '[링크텍스트](링크)':\n        textToInsert = `[${textSelected}](링크)`;\n        break;\n\n      default:\n        break;\n    }\n    const newInput = beforeText + textToInsert + afterText;\n    setInput(newInput);\n    return;\n  }\n\n  const positionToInsert = cursorPosition[0];\n  const beforeText = input.slice(0, positionToInsert);\n  const afterText = input.slice(positionToInsert);\n  const newInput = beforeText + textToInsert + afterText;\n  console.log(beforeText, afterText, textToInsert);\n  setInput(newInput);\n};\n\nconst insertToFront = ({ input, positionToInsert, insertText, setInput }: IInsertControlProps) => {\n  const newInput = insertTextFront({ input, positionToInsert, insertText });\n  setInput(newInput);\n};\n\nconst editInputText = ({ event, input, setInput, cursorPosition }: IEditTextProps): void => {\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      insertTextSide({ input, cursorPosition, insertText, setInput });\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      insertTextSide({ input, cursorPosition, insertText, setInput });\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      insertTextSide({ input, cursorPosition, insertText, setInput });\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      insertToFront({ input, positionToInsert, insertText, setInput });\n      break;\n\n    default:\n      break;\n  }\n};\n\nexport default editInputText;\n"]},"metadata":{},"sourceType":"module"}