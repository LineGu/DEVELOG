{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/common/themeProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport Theme, { LightMode, DarkMode } from '@constants/Theme';\nimport MODE from '@constants/mode';\nexport var ThemeContext = /*#__PURE__*/createContext({});\n\nfunction ThemeModeProvider(_ref) {\n  _s();\n\n  var children = _ref.children,\n      defaultMode = _ref.defaultMode;\n\n  var _useState = useState(defaultMode),\n      mode = _useState[0],\n      setMode = _useState[1];\n\n  var themeStorageName = 'theme';\n  useEffect(function () {\n    var _window$localStorage$;\n\n    var initMode = (_window$localStorage$ = window.localStorage.getItem(themeStorageName)) !== null && _window$localStorage$ !== void 0 ? _window$localStorage$ : MODE.LIGHT;\n    setMode(initMode);\n  }, []);\n\n  var changeMode = function changeMode() {\n    var newMode = mode === MODE.LIGHT ? MODE.DARK : MODE.LIGHT;\n    window.localStorage.setItem(themeStorageName, \"\".concat(newMode));\n    setMode(newMode);\n  };\n\n  var newTheme = mode === MODE.LIGHT ? LightMode : DarkMode;\n  Object.keys(newTheme).forEach(function (key) {\n    Theme[key] = newTheme[key];\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode: mode,\n      changeMode: changeMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ThemeModeProvider, \"XSo8lQCnNiB4BJD40Cc+Lrr01P4=\");\n\n_c = ThemeModeProvider;\nexport default ThemeModeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeModeProvider\");","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/common/themeProvider.tsx"],"names":["React","useState","createContext","useEffect","Theme","LightMode","DarkMode","MODE","ThemeContext","ThemeModeProvider","children","defaultMode","mode","setMode","themeStorageName","initMode","window","localStorage","getItem","LIGHT","changeMode","newMode","DARK","setItem","newTheme","Object","keys","forEach","key"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAwCC,aAAxC,EAAkEC,SAAlE,QAAmF,OAAnF;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAsD,kBAAtD;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAOA,OAAO,IAAMC,YAAY,gBAAGN,aAAa,CAAoB,EAApB,CAAlC;;AAEP,SAASO,iBAAT,OAAoF;AAAA;;AAAA,MAAvDC,QAAuD,QAAvDA,QAAuD;AAAA,MAA7CC,WAA6C,QAA7CA,WAA6C;;AAAA,kBAC1DV,QAAQ,CAACU,WAAD,CADkD;AAAA,MAC3EC,IAD2E;AAAA,MACrEC,OADqE;;AAElF,MAAMC,gBAAgB,GAAG,OAAzB;AAEAX,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd,QAAMY,QAAQ,4BAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,gBAA5B,CAAH,yEAAoDP,IAAI,CAACY,KAAvE;AACAN,IAAAA,OAAO,CAACE,QAAD,CAAP;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAMK,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAMC,OAAO,GAAGT,IAAI,KAAKL,IAAI,CAACY,KAAd,GAAsBZ,IAAI,CAACe,IAA3B,GAAkCf,IAAI,CAACY,KAAvD;AACAH,IAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4BT,gBAA5B,YAAiDO,OAAjD;AACAR,IAAAA,OAAO,CAACQ,OAAD,CAAP;AACD,GAJD;;AAMA,MAAMG,QAAmB,GAAGZ,IAAI,KAAKL,IAAI,CAACY,KAAd,GAAsBd,SAAtB,GAAkCC,QAA9D;AAEAmB,EAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8B,UAACC,GAAD,EAAe;AAC3CxB,IAAAA,KAAK,CAACwB,GAAD,CAAL,GAAaJ,QAAQ,CAACI,GAAD,CAArB;AACD,GAFD;AAIA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEhB,MAAAA,IAAI,EAAJA,IAAF;AAAQQ,MAAAA,UAAU,EAAVA;AAAR,KAA9B;AAAA,cAAqDV;AAArD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAtBQD,iB;;KAAAA,iB;AAwBT,eAAeA,iBAAf","sourcesContent":["import React, { useState, ReactElement, createContext, ReactNode, useEffect } from 'react';\nimport { IThemeContextType } from '@types';\nimport Theme, { LightMode, DarkMode, ThemeType } from '@constants/Theme';\nimport MODE from '@constants/mode';\n\ninterface IProviderProps {\n  children: ReactNode;\n  defaultMode: string;\n}\n\nexport const ThemeContext = createContext<IThemeContextType>({});\n\nfunction ThemeModeProvider({ children, defaultMode }: IProviderProps): ReactElement {\n  const [mode, setMode] = useState(defaultMode);\n  const themeStorageName = 'theme';\n\n  useEffect(() => {\n    const initMode = window.localStorage.getItem(themeStorageName) ?? MODE.LIGHT;\n    setMode(initMode);\n  }, []);\n\n  const changeMode = () => {\n    const newMode = mode === MODE.LIGHT ? MODE.DARK : MODE.LIGHT;\n    window.localStorage.setItem(themeStorageName, `${newMode}`);\n    setMode(newMode);\n  };\n\n  const newTheme: ThemeType = mode === MODE.LIGHT ? LightMode : DarkMode;\n\n  Object.keys(newTheme).forEach((key): void => {\n    Theme[key] = newTheme[key];\n  });\n\n  return <ThemeContext.Provider value={{ mode, changeMode }}>{children}</ThemeContext.Provider>;\n}\n\nexport default ThemeModeProvider;\n"]},"metadata":{},"sourceType":"module"}