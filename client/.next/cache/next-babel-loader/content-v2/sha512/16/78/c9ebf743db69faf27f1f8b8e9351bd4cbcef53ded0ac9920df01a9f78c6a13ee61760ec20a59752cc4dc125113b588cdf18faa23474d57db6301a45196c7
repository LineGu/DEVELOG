{"ast":null,"code":"import _classCallCheck from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AbstractEditor from './Editor';\n\nvar AbstractLineEditor = /*#__PURE__*/function (_AbstractEditor) {\n  _inherits(AbstractLineEditor, _AbstractEditor);\n\n  var _super = _createSuper(AbstractLineEditor);\n\n  function AbstractLineEditor() {\n    var _this;\n\n    _classCallCheck(this, AbstractLineEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"similarText\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"idxsToDel\", [0, 0]);\n\n    _defineProperty(_assertThisInitialized(_this), \"setIndexToInsert\", function (currentCursorIndex, input) {\n      var frontPart = input.slice(0, currentCursorIndex);\n      _this.indexToInsert = frontPart.lastIndexOf('\\n') + 1;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setIndexToGo\", function (currentCursorIndex, input) {\n      var backPart = input.slice(currentCursorIndex);\n      var isLastLine = backPart.indexOf('\\n') === -1;\n      var backLenOfLine = isLastLine ? backPart.length : backPart.indexOf('\\n');\n      var backmostIndex = currentCursorIndex + backLenOfLine + _this.textToInsert.length;\n      _this.indexToGo = [backmostIndex, backmostIndex];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClickEditButton\", function (_ref) {\n      var input = _ref.input,\n          cursorPosition = _ref.cursorPosition,\n          moveCursor = _ref.moveCursor;\n      var currentCursorIndex = cursorPosition[0];\n\n      _this.setIndexToInsert(currentCursorIndex, input);\n\n      _this.setIndexToGo(currentCursorIndex, input);\n\n      var updatedText = input;\n      if (_this.hasSimilarText(input)) updatedText = _this.delSimilarText(updatedText);\n      updatedText = _this.insertText(updatedText);\n\n      _this.moveCursorAfterEdit(moveCursor);\n\n      return updatedText;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delSimilarText\", function (input) {\n      var updatedInput = input.slice(0, _this.idxsToDel[0]) + input.slice(_this.idxsToDel[1]);\n      var indexToGo = _this.indexToGo[0] - (_this.idxsToDel[1] - _this.idxsToDel[0]);\n      _this.indexToGo = [indexToGo, indexToGo];\n      return updatedInput;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hasSimilarText\", function (input) {\n      var frontPartToInsert = input.slice(_this.indexToInsert, _this.indexToInsert + 6);\n      var hasSimilar = false;\n\n      _this.similarText.forEach(function (text) {\n        if (frontPartToInsert.includes(text)) {\n          hasSimilar = true;\n          _this.idxsToDel = [_this.indexToInsert, _this.indexToInsert + text.length];\n        }\n      });\n\n      return hasSimilar;\n    });\n\n    return _this;\n  }\n\n  return AbstractLineEditor;\n}(AbstractEditor);\n\nexport { AbstractLineEditor as default };","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/markdownController/ToolBarEditors/Abstract/LineEditor.ts"],"names":["AbstractEditor","AbstractLineEditor","currentCursorIndex","input","frontPart","slice","indexToInsert","lastIndexOf","backPart","isLastLine","indexOf","backLenOfLine","length","backmostIndex","textToInsert","indexToGo","cursorPosition","moveCursor","setIndexToInsert","setIndexToGo","updatedText","hasSimilarText","delSimilarText","insertText","moveCursorAfterEdit","updatedInput","idxsToDel","frontPartToInsert","hasSimilar","similarText","forEach","text","includes"],"mappings":";;;;;;;;;;;AACA,OAAOA,cAAP,MAA2B,UAA3B;;IAE8BC,kB;;;;;;;;;;;;;;;;;;gEAGI,CAAC,CAAD,EAAI,CAAJ,C;;uEAEH,UAACC,kBAAD,EAA6BC,KAA7B,EAAqD;AAChF,UAAMC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeH,kBAAf,CAAlB;AACA,YAAKI,aAAL,GAAqBF,SAAS,CAACG,WAAV,CAAsB,IAAtB,IAA8B,CAAnD;AACD,K;;mEAEwB,UAACL,kBAAD,EAA6BC,KAA7B,EAAqD;AAC5E,UAAMK,QAAQ,GAAGL,KAAK,CAACE,KAAN,CAAYH,kBAAZ,CAAjB;AACA,UAAMO,UAAU,GAAGD,QAAQ,CAACE,OAAT,CAAiB,IAAjB,MAA2B,CAAC,CAA/C;AACA,UAAMC,aAAa,GAAGF,UAAU,GAAGD,QAAQ,CAACI,MAAZ,GAAqBJ,QAAQ,CAACE,OAAT,CAAiB,IAAjB,CAArD;AACA,UAAMG,aAAa,GAAGX,kBAAkB,GAAGS,aAArB,GAAqC,MAAKG,YAAL,CAAkBF,MAA7E;AACA,YAAKG,SAAL,GAAiB,CAACF,aAAD,EAAgBA,aAAhB,CAAjB;AACD,K;;wEAE0B,gBAAuE;AAAA,UAApEV,KAAoE,QAApEA,KAAoE;AAAA,UAA7Da,cAA6D,QAA7DA,cAA6D;AAAA,UAA7CC,UAA6C,QAA7CA,UAA6C;AAChG,UAAMf,kBAAkB,GAAGc,cAAc,CAAC,CAAD,CAAzC;;AACA,YAAKE,gBAAL,CAAsBhB,kBAAtB,EAA0CC,KAA1C;;AACA,YAAKgB,YAAL,CAAkBjB,kBAAlB,EAAsCC,KAAtC;;AAEA,UAAIiB,WAAW,GAAGjB,KAAlB;AAEA,UAAI,MAAKkB,cAAL,CAAoBlB,KAApB,CAAJ,EAAgCiB,WAAW,GAAG,MAAKE,cAAL,CAAoBF,WAApB,CAAd;AAChCA,MAAAA,WAAW,GAAG,MAAKG,UAAL,CAAgBH,WAAhB,CAAd;;AACA,YAAKI,mBAAL,CAAyBP,UAAzB;;AAEA,aAAOG,WAAP;AACD,K;;qEAE0B,UAACjB,KAAD,EAA2B;AACpD,UAAMsB,YAAY,GAAGtB,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,MAAKqB,SAAL,CAAe,CAAf,CAAf,IAAoCvB,KAAK,CAACE,KAAN,CAAY,MAAKqB,SAAL,CAAe,CAAf,CAAZ,CAAzD;AACA,UAAMX,SAAS,GAAG,MAAKA,SAAL,CAAe,CAAf,KAAqB,MAAKW,SAAL,CAAe,CAAf,IAAoB,MAAKA,SAAL,CAAe,CAAf,CAAzC,CAAlB;AACA,YAAKX,SAAL,GAAiB,CAACA,SAAD,EAAYA,SAAZ,CAAjB;AACA,aAAOU,YAAP;AACD,K;;qEAE0B,UAACtB,KAAD,EAA4B;AACrD,UAAMwB,iBAAiB,GAAGxB,KAAK,CAACE,KAAN,CAAY,MAAKC,aAAjB,EAAgC,MAAKA,aAAL,GAAqB,CAArD,CAA1B;AACA,UAAIsB,UAAU,GAAG,KAAjB;;AACA,YAAKC,WAAL,CAAiBC,OAAjB,CAAyB,UAACC,IAAD,EAAU;AACjC,YAAIJ,iBAAiB,CAACK,QAAlB,CAA2BD,IAA3B,CAAJ,EAAsC;AACpCH,UAAAA,UAAU,GAAG,IAAb;AACA,gBAAKF,SAAL,GAAiB,CAAC,MAAKpB,aAAN,EAAqB,MAAKA,aAAL,GAAqByB,IAAI,CAACnB,MAA/C,CAAjB;AACD;AACF,OALD;;AAMA,aAAOgB,UAAP;AACD,K;;;;;;EAjDsD5B,c;;SAA3BC,kB","sourcesContent":["import { IOnClickEditButton } from '@types';\nimport AbstractEditor from './Editor';\n\nexport default abstract class AbstractLineEditor extends AbstractEditor {\n  protected abstract similarText: string[];\n\n  protected idxsToDel: number[] = [0, 0];\n\n  protected setIndexToInsert = (currentCursorIndex: number, input: string): void => {\n    const frontPart = input.slice(0, currentCursorIndex);\n    this.indexToInsert = frontPart.lastIndexOf('\\n') + 1;\n  };\n\n  protected setIndexToGo = (currentCursorIndex: number, input: string): void => {\n    const backPart = input.slice(currentCursorIndex);\n    const isLastLine = backPart.indexOf('\\n') === -1;\n    const backLenOfLine = isLastLine ? backPart.length : backPart.indexOf('\\n');\n    const backmostIndex = currentCursorIndex + backLenOfLine + this.textToInsert.length;\n    this.indexToGo = [backmostIndex, backmostIndex];\n  };\n\n  public onClickEditButton = ({ input, cursorPosition, moveCursor }: IOnClickEditButton): string => {\n    const currentCursorIndex = cursorPosition[0];\n    this.setIndexToInsert(currentCursorIndex, input);\n    this.setIndexToGo(currentCursorIndex, input);\n\n    let updatedText = input;\n\n    if (this.hasSimilarText(input)) updatedText = this.delSimilarText(updatedText);\n    updatedText = this.insertText(updatedText);\n    this.moveCursorAfterEdit(moveCursor);\n\n    return updatedText;\n  };\n\n  protected delSimilarText = (input: string): string => {\n    const updatedInput = input.slice(0, this.idxsToDel[0]) + input.slice(this.idxsToDel[1]);\n    const indexToGo = this.indexToGo[0] - (this.idxsToDel[1] - this.idxsToDel[0]);\n    this.indexToGo = [indexToGo, indexToGo];\n    return updatedInput;\n  };\n\n  protected hasSimilarText = (input: string): boolean => {\n    const frontPartToInsert = input.slice(this.indexToInsert, this.indexToInsert + 6);\n    let hasSimilar = false;\n    this.similarText.forEach((text) => {\n      if (frontPartToInsert.includes(text)) {\n        hasSimilar = true;\n        this.idxsToDel = [this.indexToInsert, this.indexToInsert + text.length];\n      }\n    });\n    return hasSimilar;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}