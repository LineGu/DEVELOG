{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect, useRef } from 'react';\n\nvar useUloadingImg = function useUloadingImg(input, cursorPosition, setInput) {\n  _s();\n\n  var uploadStateInit = {\n    process: 0,\n    error: ''\n  };\n\n  var _useState = useState(''),\n      imageUrl = _useState[0],\n      setImageUrl = _useState[1];\n\n  var _useState2 = useState(uploadStateInit),\n      uploadState = _useState2[0],\n      setUploadState = _useState2[1];\n\n  var isUploading = useRef(false);\n  isUploading.current = uploadState.process !== 0;\n  useEffect(function () {\n    if (!isUploading.current) return;\n    var currentCursor = cursorPosition[0];\n    var inputInsertedUploading = \"\".concat(input.slice(0, currentCursor), \"![Loading...]()\").concat(input.slice(currentCursor));\n    setInput(inputInsertedUploading);\n  }, [isUploading.current]);\n  var insertImageMarkdown = useCallback(function () {\n    var isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n\n    if (uploadState.error) {\n      alert('이미지 업로드 실패');\n      var previousInput = \"\".concat(input.slice(0, cursorPosition[0])).concat(input.slice(cursorPosition[0] + 15));\n      setInput(previousInput);\n      setImageUrl('');\n      setUploadState(uploadStateInit);\n      return;\n    }\n\n    if (isNotVaildUrl) return;\n    var inputWithNewImg = \"\".concat(input.slice(0, cursorPosition[0]), \"\\n![](\").concat(imageUrl, \")\\n\").concat(input.slice(cursorPosition[0] + 15));\n    setInput(inputWithNewImg);\n    setImageUrl('');\n  }, [imageUrl, uploadState]);\n  useEffect(function () {\n    insertImageMarkdown();\n  }, [imageUrl, uploadState]);\n  return {\n    uploadState: uploadState,\n    setImageUrl: setImageUrl,\n    setUploadState: setUploadState\n  };\n};\n\n_s(useUloadingImg, \"L71XcUkDfBUXmUfOsmaL0qqnAGw=\");\n\nexport default useUloadingImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useUploadingImg.tsx"],"names":["useCallback","useState","useEffect","useRef","useUloadingImg","input","cursorPosition","setInput","uploadStateInit","process","error","imageUrl","setImageUrl","uploadState","setUploadState","isUploading","current","currentCursor","inputInsertedUploading","slice","insertImageMarkdown","isNotVaildUrl","undefined","length","alert","previousInput","inputWithNewImg"],"mappings":";;AAAA,SAAgBA,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,OAAhE;;AAYA,IAAMC,cAAiC,GAAG,SAApCA,cAAoC,CAACC,KAAD,EAAQC,cAAR,EAAwBC,QAAxB,EAAqC;AAAA;;AAC7E,MAAMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAxB;;AAD6E,kBAE7CT,QAAQ,CAAS,EAAT,CAFqC;AAAA,MAEtEU,QAFsE;AAAA,MAE5DC,WAF4D;;AAAA,mBAGvCX,QAAQ,CAAeO,eAAf,CAH+B;AAAA,MAGtEK,WAHsE;AAAA,MAGzDC,cAHyD;;AAI7E,MAAMC,WAAW,GAAGZ,MAAM,CAAC,KAAD,CAA1B;AAEAY,EAAAA,WAAW,CAACC,OAAZ,GAAsBH,WAAW,CAACJ,OAAZ,KAAwB,CAA9C;AACAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACa,WAAW,CAACC,OAAjB,EAA0B;AAC1B,QAAMC,aAAa,GAAGX,cAAc,CAAC,CAAD,CAApC;AACA,QAAMY,sBAAsB,aAAMb,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeF,aAAf,CAAN,4BAAqDZ,KAAK,CAACc,KAAN,CAAYF,aAAZ,CAArD,CAA5B;AACAV,IAAAA,QAAQ,CAACW,sBAAD,CAAR;AACD,GALQ,EAKN,CAACH,WAAW,CAACC,OAAb,CALM,CAAT;AAOA,MAAMI,mBAAmB,GAAGpB,WAAW,CAAC,YAAM;AAC5C,QAAMqB,aAAa,GAAGV,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKW,SAAlC,IAA+CX,QAAQ,CAACY,MAAT,KAAoB,CAAzF;;AACA,QAAIV,WAAW,CAACH,KAAhB,EAAuB;AACrBc,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,UAAMC,aAAa,aAAMpB,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeb,cAAc,CAAC,CAAD,CAA7B,CAAN,SAA0CD,KAAK,CAACc,KAAN,CAAYb,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAhC,CAA1C,CAAnB;AACAC,MAAAA,QAAQ,CAACkB,aAAD,CAAR;AACAb,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,cAAc,CAACN,eAAD,CAAd;AACA;AACD;;AACD,QAAIa,aAAJ,EAAmB;AACnB,QAAMK,eAAe,aAAMrB,KAAK,CAACc,KAAN,CAAY,CAAZ,EAAeb,cAAc,CAAC,CAAD,CAA7B,CAAN,mBAAgDK,QAAhD,gBAA8DN,KAAK,CAACc,KAAN,CACjFb,cAAc,CAAC,CAAD,CAAd,GAAoB,EAD6D,CAA9D,CAArB;AAGAC,IAAAA,QAAQ,CAACmB,eAAD,CAAR;AACAd,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GAhBsC,EAgBpC,CAACD,QAAD,EAAWE,WAAX,CAhBoC,CAAvC;AAkBAX,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACT,QAAD,EAAWE,WAAX,CAFM,CAAT;AAIA,SAAO;AAAEA,IAAAA,WAAW,EAAXA,WAAF;AAAeD,IAAAA,WAAW,EAAXA,WAAf;AAA4BE,IAAAA,cAAc,EAAdA;AAA5B,GAAP;AACD,CArCD;;GAAMV,c;;AAuCN,eAAeA,cAAf","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { IUploadState } from '@interfaces';\nimport { SetStateString } from '@types';\n\ninterface IUploadingImgHook {\n  (input: string, cursorPosition: number[], setInput: SetStateString): {\n    setImageUrl: SetStateString;\n    setUploadState: React.Dispatch<React.SetStateAction<IUploadState>>;\n    uploadState: IUploadState;\n  };\n}\n\nconst useUloadingImg: IUploadingImgHook = (input, cursorPosition, setInput) => {\n  const uploadStateInit = { process: 0, error: '' };\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [uploadState, setUploadState] = useState<IUploadState>(uploadStateInit);\n  const isUploading = useRef(false);\n\n  isUploading.current = uploadState.process !== 0;\n  useEffect(() => {\n    if (!isUploading.current) return;\n    const currentCursor = cursorPosition[0];\n    const inputInsertedUploading = `${input.slice(0, currentCursor)}![Loading...]()${input.slice(currentCursor)}`;\n    setInput(inputInsertedUploading);\n  }, [isUploading.current]);\n\n  const insertImageMarkdown = useCallback(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n    if (uploadState.error) {\n      alert('이미지 업로드 실패');\n      const previousInput = `${input.slice(0, cursorPosition[0])}${input.slice(cursorPosition[0] + 15)}`;\n      setInput(previousInput);\n      setImageUrl('');\n      setUploadState(uploadStateInit);\n      return;\n    }\n    if (isNotVaildUrl) return;\n    const inputWithNewImg = `${input.slice(0, cursorPosition[0])}\\n![](${imageUrl})\\n${input.slice(\n      cursorPosition[0] + 15,\n    )}`;\n    setInput(inputWithNewImg);\n    setImageUrl('');\n  }, [imageUrl, uploadState]);\n\n  useEffect(() => {\n    insertImageMarkdown();\n  }, [imageUrl, uploadState]);\n\n  return { uploadState, setImageUrl, setUploadState };\n};\n\nexport default useUloadingImg;\n"]},"metadata":{},"sourceType":"module"}