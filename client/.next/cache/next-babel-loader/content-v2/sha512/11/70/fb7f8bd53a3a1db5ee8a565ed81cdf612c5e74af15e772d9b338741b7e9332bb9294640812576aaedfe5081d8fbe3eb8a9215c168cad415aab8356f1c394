{"ast":null,"code":"import _slicedToArray from \"/Users/hyungu/Desktop/front-dev/projects/develog/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nvar useCursorPoint = function useCursorPoint(inputElem) {\n  _s();\n\n  var initCursor = [0, 0];\n\n  var _useState = useState(initCursor),\n      cursorPosition = _useState[0],\n      setCursorPosition = _useState[1];\n\n  var updateCusorPoint = function updateCusorPoint() {\n    var _inputElem$selectionS, _inputElem$selectionE;\n\n    var cursorPointStart = (_inputElem$selectionS = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionStart) !== null && _inputElem$selectionS !== void 0 ? _inputElem$selectionS : 0;\n    var cursorPointEnd = (_inputElem$selectionE = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionEnd) !== null && _inputElem$selectionE !== void 0 ? _inputElem$selectionE : 0;\n    var updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  var moveCursor = function moveCursor(positionToGo) {\n    var _positionToGo = _slicedToArray(positionToGo, 2),\n        startPosition = _positionToGo[0],\n        endPosition = _positionToGo[1];\n\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.focus();\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.setSelectionRange(startPosition, endPosition);\n    console.log(inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionEnd);\n    updateCusorPoint();\n  };\n\n  useEffect(function () {\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('click', updateCusorPoint);\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('keyup', updateCusorPoint);\n  }, [inputElem]);\n  return {\n    cursorPosition: cursorPosition,\n    setCursorPosition: setCursorPosition,\n    updateCusorPoint: updateCusorPoint,\n    moveCursor: moveCursor\n  };\n};\n\n_s(useCursorPoint, \"+cyEx+P47+Ond7k7hOgFsmiFGaI=\");\n\nexport default useCursorPoint;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useCursorPoint.tsx"],"names":["useState","useEffect","useCursorPoint","inputElem","initCursor","cursorPosition","setCursorPosition","updateCusorPoint","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","updatedCursorPosition","moveCursor","positionToGo","startPosition","endPosition","focus","setSelectionRange","console","log","addEventListener"],"mappings":";;;;AAAA,SAAgBA,QAAhB,EAAkCC,SAAlC,QAAmD,OAAnD;;AAUA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAA8D;AAAA;;AACnF,MAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAnB;;AADmF,kBAEvCJ,QAAQ,CAACI,UAAD,CAF+B;AAAA,MAE5EC,cAF4E;AAAA,MAE5DC,iBAF4D;;AAInF,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAC7B,QAAMC,gBAAgB,4BAAGL,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEM,cAAd,yEAAgC,CAAtD;AACA,QAAMC,cAAc,4BAAGP,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEQ,YAAd,yEAA8B,CAAlD;AACA,QAAMC,qBAAqB,GAAG,CAACJ,gBAAD,EAAmBE,cAAnB,CAA9B;AACAJ,IAAAA,iBAAiB,CAACM,qBAAD,CAAjB;AACD,GALD;;AAOA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAA4B;AAAA,uCACRA,YADQ;AAAA,QACtCC,aADsC;AAAA,QACvBC,WADuB;;AAE7Cb,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEc,KAAX;AACAd,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEe,iBAAX,CAA6BH,aAA7B,EAA4CC,WAA5C;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYjB,SAAZ,aAAYA,SAAZ,uBAAYA,SAAS,CAAEQ,YAAvB;AACAJ,IAAAA,gBAAgB;AACjB,GAND;;AAQAN,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEkB,gBAAX,CAA4B,OAA5B,EAAqCd,gBAArC;AACAJ,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEkB,gBAAX,CAA4B,OAA5B,EAAqCd,gBAArC;AACD,GAHQ,EAGN,CAACJ,SAAD,CAHM,CAAT;AAKA,SAAO;AAAEE,IAAAA,cAAc,EAAdA,cAAF;AAAkBC,IAAAA,iBAAiB,EAAjBA,iBAAlB;AAAqCC,IAAAA,gBAAgB,EAAhBA,gBAArC;AAAuDM,IAAAA,UAAU,EAAVA;AAAvD,GAAP;AACD,CAzBD;;GAAMX,c;;AA2BN,eAAeA,cAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { setStateNumberArr } from '@types';\n\ninterface ICursorHookReturn {\n  cursorPosition: number[];\n  setCursorPosition: setStateNumberArr;\n  updateCusorPoint: () => void;\n  moveCursor: (positionToGo: number[]) => void;\n}\n\nconst useCursorPoint = (inputElem: HTMLTextAreaElement | null): ICursorHookReturn => {\n  const initCursor = [0, 0];\n  const [cursorPosition, setCursorPosition] = useState(initCursor);\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputElem?.selectionStart ?? 0;\n    const cursorPointEnd = inputElem?.selectionEnd ?? 0;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = (positionToGo: number[]) => {\n    const [startPosition, endPosition] = positionToGo;\n    inputElem?.focus();\n    inputElem?.setSelectionRange(startPosition, endPosition);\n    console.log(inputElem?.selectionEnd);\n    updateCusorPoint();\n  };\n\n  useEffect(() => {\n    inputElem?.addEventListener('click', updateCusorPoint);\n    inputElem?.addEventListener('keyup', updateCusorPoint);\n  }, [inputElem]);\n\n  return { cursorPosition, setCursorPosition, updateCusorPoint, moveCursor };\n};\n\nexport default useCursorPoint;\n"]},"metadata":{},"sourceType":"module"}