{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/[pageLink].tsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Header from '../components/UI/organisms/Header/index';\n\nconst IndexPage = () => {\n  const router = useRouter();\n  console.log(router.query);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jsx-1350940966\",\n    children: [/*#__PURE__*/_jsxDEV(_JSXStyle, {\n      id: \"1350940966\",\n      children: \"html,body,body>div:first-child,div#__next,div#__next>div{width:100%;height:100%;margin:0;padding:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oeXVuZ3UvRGVza3RvcC9mcm9udC1kZXYvcHJvamVjdHMvZGV2ZWxvZy9jbGllbnQvcGFnZXMvW3BhZ2VMaW5rXS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWXlCLEFBT3NCLFdBQ0MsWUFDSCxTQUNDLFVBQ1oiLCJmaWxlIjoiL1VzZXJzL2h5dW5ndS9EZXNrdG9wL2Zyb250LWRldi9wcm9qZWN0cy9kZXZlbG9nL2NsaWVudC9wYWdlcy9bcGFnZUxpbmtdLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBHZXRTdGF0aWNQcm9wcywgR2V0U3RhdGljUGF0aHMgfSBmcm9tICduZXh0JztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJztcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uL2NvbXBvbmVudHMvVUkvb3JnYW5pc21zL0hlYWRlci9pbmRleCc7XG5pbXBvcnQgcGFnZUxpbmtMaXN0IGZyb20gJy4uL3V0aWxzL3BhZ2VMaW5rTGlzdCc7XG5cbmNvbnN0IEluZGV4UGFnZSA9ICgpOiBSZWFjdEVsZW1lbnQgPT4ge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc29sZS5sb2cocm91dGVyLnF1ZXJ5KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPHN0eWxlIGdsb2JhbCBqc3g+e2BcbiAgICAgICAgaHRtbCxcbiAgICAgICAgYm9keSxcbiAgICAgICAgYm9keSA+IGRpdjpmaXJzdC1jaGlsZCxcbiAgICAgICAgZGl2I19fbmV4dCxcbiAgICAgICAgZGl2I19fbmV4dCA+IGRpdiB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHRpdGxlPkRFVkVMT0c8L3RpdGxlPlxuICAgICAgICA8bWV0YSBjaGFyU2V0PVwidXRmLThcIiAvPlxuICAgICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwiaW5pdGlhbC1zY2FsZT0xLjAsIHdpZHRoPWRldmljZS13aWR0aFwiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8SGVhZGVyIGN1cnJlbnRQYWdlPXtgJHtyb3V0ZXIucXVlcnkuaWR9YH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbi8vIGV4cG9ydCBjb25zdCBnZXRTdGF0aWNQYXRoczogR2V0U3RhdGljUGF0aHMgPSBhc3luYyAoKSA9PiB7XG4vLyAgIC8vIEdldCB0aGUgcGF0aHMgd2Ugd2FudCB0byBwcmUtcmVuZGVyIGJhc2VkIG9uIHVzZXJzXG4vLyAgIGNvbnN0IHBhdGhzID0gcGFnZUxpbmtMaXN0Lm1hcCgobGluaykgPT4gKHtcbi8vICAgICBwYXJhbXM6IHsgbGluayB9LFxuLy8gICB9KSk7XG5cbi8vICAgLy8gV2UnbGwgcHJlLXJlbmRlciBvbmx5IHRoZXNlIHBhdGhzIGF0IGJ1aWxkIHRpbWUuXG4vLyAgIC8vIHsgZmFsbGJhY2s6IGZhbHNlIH0gbWVhbnMgb3RoZXIgcm91dGVzIHNob3VsZCA0MDQuXG4vLyAgIHJldHVybiB7IHBhdGhzLCBmYWxsYmFjazogZmFsc2UgfTtcbi8vIH07XG5cbi8vIFRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgYXQgYnVpbGQgdGltZSBvbiBzZXJ2ZXItc2lkZS5cbi8vIEl0IHdvbid0IGJlIGNhbGxlZCBvbiBjbGllbnQtc2lkZSwgc28geW91IGNhbiBldmVuIGRvXG4vLyBkaXJlY3QgZGF0YWJhc2UgcXVlcmllcy5cbi8vIGV4cG9ydCBjb25zdCBnZXRTdGF0aWNQcm9wczogR2V0U3RhdGljUHJvcHMgPSBhc3luYyAoeyBwYXJhbXMgfSkgPT4ge1xuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IGlkID0gcGFyYW1zPy5pZDtcbi8vICAgICBjb25zdCBpdGVtID0gcGFnZUxpbmtMaXN0LmZpbmQoKGRhdGEpID0+IGRhdGEuaWQgPT09IE51bWJlcihpZCkpO1xuLy8gICAgIC8vIEJ5IHJldHVybmluZyB7IHByb3BzOiBpdGVtIH0sIHRoZSBTdGF0aWNQcm9wc0RldGFpbCBjb21wb25lbnRcbi8vICAgICAvLyB3aWxsIHJlY2VpdmUgYGl0ZW1gIGFzIGEgcHJvcCBhdCBidWlsZCB0aW1lXG4vLyAgICAgcmV0dXJuIHsgcHJvcHM6IHsgaXRlbSB9IH07XG4vLyAgIH0gY2F0Y2ggKGVycikge1xuLy8gICAgIHJldHVybiB7IHByb3BzOiB7IGVycm9yczogZXJyLm1lc3NhZ2UgfSB9O1xuLy8gICB9XG4vLyB9O1xuXG5leHBvcnQgZGVmYXVsdCBJbmRleFBhZ2U7XG4iXX0= */\\n/*@ sourceURL=/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/[pageLink].tsx */\"\n    }, void 0, false, void 0, this), /*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        className: \"jsx-1350940966\",\n        children: \"DEVELOG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        charSet: \"utf-8\",\n        className: \"jsx-1350940966\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width\",\n        className: \"jsx-1350940966\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      currentPage: `${router.query.id}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}; // export const getStaticPaths: GetStaticPaths = async () => {\n//   // Get the paths we want to pre-render based on users\n//   const paths = pageLinkList.map((link) => ({\n//     params: { link },\n//   }));\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// };\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n// export const getStaticProps: GetStaticProps = async ({ params }) => {\n//   try {\n//     const id = params?.id;\n//     const item = pageLinkList.find((data) => data.id === Number(id));\n//     // By returning { props: item }, the StaticPropsDetail component\n//     // will receive `item` as a prop at build time\n//     return { props: { item } };\n//   } catch (err) {\n//     return { props: { errors: err.message } };\n//   }\n// };\n\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/pages/[pageLink].tsx"],"names":["React","useRouter","Head","Header","IndexPage","router","console","log","query","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAoC,OAApC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,yCAAnB;;AAGA,MAAMC,SAAS,GAAG,MAAoB;AACpC,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAnB;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA,kDAaE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,OAAO,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC,uCAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAkBE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAG,GAAEH,MAAM,CAACG,KAAP,CAAaC,EAAG;AAAxC;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAzBD,C,CA2BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeL,SAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport { GetStaticProps, GetStaticPaths } from 'next';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport Header from '../components/UI/organisms/Header/index';\nimport pageLinkList from '../utils/pageLinkList';\n\nconst IndexPage = (): ReactElement => {\n  const router = useRouter();\n  console.log(router.query);\n  return (\n    <div>\n      <style global jsx>{`\n        html,\n        body,\n        body > div:first-child,\n        div#__next,\n        div#__next > div {\n          width: 100%;\n          height: 100%;\n          margin: 0;\n          padding: 0;\n        }\n      `}</style>\n      <Head>\n        <title>DEVELOG</title>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      <Header currentPage={`${router.query.id}`} />\n    </div>\n  );\n};\n\n// export const getStaticPaths: GetStaticPaths = async () => {\n//   // Get the paths we want to pre-render based on users\n//   const paths = pageLinkList.map((link) => ({\n//     params: { link },\n//   }));\n\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// };\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\n// export const getStaticProps: GetStaticProps = async ({ params }) => {\n//   try {\n//     const id = params?.id;\n//     const item = pageLinkList.find((data) => data.id === Number(id));\n//     // By returning { props: item }, the StaticPropsDetail component\n//     // will receive `item` as a prop at build time\n//     return { props: { item } };\n//   } catch (err) {\n//     return { props: { errors: err.message } };\n//   }\n// };\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}