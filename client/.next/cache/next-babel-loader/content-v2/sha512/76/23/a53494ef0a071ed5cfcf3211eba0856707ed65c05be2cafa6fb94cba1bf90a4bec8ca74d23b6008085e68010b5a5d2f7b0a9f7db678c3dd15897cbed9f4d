{"ast":null,"code":"import { useCallback, useState, useEffect, useRef } from 'react';\nimport editByButton from '@utils/markdownEditor/index';\n\nconst useUloadingImg = (input, cursorPosition, setInput, setCursorToGo) => {\n  const uploadStateInit = {\n    process: 0,\n    error: ''\n  };\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: uploadState,\n    1: setUploadState\n  } = useState(uploadStateInit);\n  const isUploading = useRef(false);\n  isUploading.current = uploadState.process !== 0;\n  useEffect(() => {\n    if (!isUploading.current) return;\n    const currentCursor = cursorPosition[0];\n    const inputInsertedUploading = `${input.slice(0, currentCursor)}![Loading...]()${input.slice(currentCursor)}`;\n    setInput(inputInsertedUploading);\n  }, [isUploading.current]);\n  const insertImageMarkdown = useCallback(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n\n    if (uploadState.error) {\n      alert('이미지 업로드 실패');\n      const previousInput = `${input.slice(0, cursorPosition[0])}${input.slice(cursorPosition[0] + 15)}`;\n      setInput(previousInput);\n      setImageUrl('');\n      setUploadState(uploadStateInit);\n      return;\n    }\n\n    if (isNotVaildUrl) return;\n    const inputAfterLoading = input.slice(0, cursorPosition[0]) + input.slice(cursorPosition[0] + 15);\n    const {\n      updatedText,\n      cursorToGo\n    } = editByButton({\n      input: inputAfterLoading,\n      cursorPosition,\n      url: imageUrl\n    });\n    setInput(updatedText);\n    setImageUrl('');\n    setCursorToGo(cursorToGo);\n  }, [imageUrl, uploadState]);\n  useEffect(() => {\n    insertImageMarkdown();\n  }, [imageUrl, uploadState]);\n  return {\n    uploadState,\n    setImageUrl,\n    setUploadState\n  };\n};\n\nexport default useUloadingImg;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useUploadingImg.tsx"],"names":["useCallback","useState","useEffect","useRef","editByButton","useUloadingImg","input","cursorPosition","setInput","setCursorToGo","uploadStateInit","process","error","imageUrl","setImageUrl","uploadState","setUploadState","isUploading","current","currentCursor","inputInsertedUploading","slice","insertImageMarkdown","isNotVaildUrl","undefined","length","alert","previousInput","inputAfterLoading","updatedText","cursorToGo","url"],"mappings":"AAAA,SAAgBA,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,OAAhE;AAGA,OAAOC,YAAP,MAAyB,6BAAzB;;AAeA,MAAMC,cAAiC,GAAG,CAACC,KAAD,EAAQC,cAAR,EAAwBC,QAAxB,EAAkCC,aAAlC,KAAoD;AAC5F,QAAMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAxB;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0Bb,QAAQ,CAAS,EAAT,CAAxC;AACA,QAAM;AAAA,OAACc,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAeS,eAAf,CAA9C;AACA,QAAMO,WAAW,GAAGd,MAAM,CAAC,KAAD,CAA1B;AAEAc,EAAAA,WAAW,CAACC,OAAZ,GAAsBH,WAAW,CAACJ,OAAZ,KAAwB,CAA9C;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACe,WAAW,CAACC,OAAjB,EAA0B;AAC1B,UAAMC,aAAa,GAAGZ,cAAc,CAAC,CAAD,CAApC;AACA,UAAMa,sBAAsB,GAAI,GAAEd,KAAK,CAACe,KAAN,CAAY,CAAZ,EAAeF,aAAf,CAA8B,kBAAiBb,KAAK,CAACe,KAAN,CAAYF,aAAZ,CAA2B,EAA5G;AACAX,IAAAA,QAAQ,CAACY,sBAAD,CAAR;AACD,GALQ,EAKN,CAACH,WAAW,CAACC,OAAb,CALM,CAAT;AAOA,QAAMI,mBAAmB,GAAGtB,WAAW,CAAC,MAAM;AAC5C,UAAMuB,aAAa,GAAGV,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAKW,SAAlC,IAA+CX,QAAQ,CAACY,MAAT,KAAoB,CAAzF;;AACA,QAAIV,WAAW,CAACH,KAAhB,EAAuB;AACrBc,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA,YAAMC,aAAa,GAAI,GAAErB,KAAK,CAACe,KAAN,CAAY,CAAZ,EAAed,cAAc,CAAC,CAAD,CAA7B,CAAkC,GAAED,KAAK,CAACe,KAAN,CAAYd,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAhC,CAAoC,EAAjG;AACAC,MAAAA,QAAQ,CAACmB,aAAD,CAAR;AACAb,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,cAAc,CAACN,eAAD,CAAd;AACA;AACD;;AACD,QAAIa,aAAJ,EAAmB;AAEnB,UAAMK,iBAAiB,GAAGtB,KAAK,CAACe,KAAN,CAAY,CAAZ,EAAed,cAAc,CAAC,CAAD,CAA7B,IAAoCD,KAAK,CAACe,KAAN,CAAYd,cAAc,CAAC,CAAD,CAAd,GAAoB,EAAhC,CAA9D;AACA,UAAM;AAAEsB,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA8B1B,YAAY,CAAC;AAAEE,MAAAA,KAAK,EAAEsB,iBAAT;AAA4BrB,MAAAA,cAA5B;AAA4CwB,MAAAA,GAAG,EAAElB;AAAjD,KAAD,CAAhD;AAEAL,IAAAA,QAAQ,CAACqB,WAAD,CAAR;AACAf,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAL,IAAAA,aAAa,CAACqB,UAAD,CAAb;AACD,GAlBsC,EAkBpC,CAACjB,QAAD,EAAWE,WAAX,CAlBoC,CAAvC;AAoBAb,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACT,QAAD,EAAWE,WAAX,CAFM,CAAT;AAIA,SAAO;AAAEA,IAAAA,WAAF;AAAeD,IAAAA,WAAf;AAA4BE,IAAAA;AAA5B,GAAP;AACD,CAvCD;;AAyCA,eAAeX,cAAf","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { IUploadState } from '@interfaces';\nimport { SetStateString } from '@types';\nimport editByButton from '@utils/markdownEditor/index';\n\ninterface IUploadingImgHook {\n  (\n    input: string,\n    cursorPosition: number[],\n    setInput: SetStateString,\n    setCursorToGo: React.Dispatch<React.SetStateAction<number[]>>,\n  ): {\n    setImageUrl: SetStateString;\n    setUploadState: React.Dispatch<React.SetStateAction<IUploadState>>;\n    uploadState: IUploadState;\n  };\n}\n\nconst useUloadingImg: IUploadingImgHook = (input, cursorPosition, setInput, setCursorToGo) => {\n  const uploadStateInit = { process: 0, error: '' };\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [uploadState, setUploadState] = useState<IUploadState>(uploadStateInit);\n  const isUploading = useRef(false);\n\n  isUploading.current = uploadState.process !== 0;\n  useEffect(() => {\n    if (!isUploading.current) return;\n    const currentCursor = cursorPosition[0];\n    const inputInsertedUploading = `${input.slice(0, currentCursor)}![Loading...]()${input.slice(currentCursor)}`;\n    setInput(inputInsertedUploading);\n  }, [isUploading.current]);\n\n  const insertImageMarkdown = useCallback(() => {\n    const isNotVaildUrl = imageUrl === null || imageUrl === undefined || imageUrl.length === 0;\n    if (uploadState.error) {\n      alert('이미지 업로드 실패');\n      const previousInput = `${input.slice(0, cursorPosition[0])}${input.slice(cursorPosition[0] + 15)}`;\n      setInput(previousInput);\n      setImageUrl('');\n      setUploadState(uploadStateInit);\n      return;\n    }\n    if (isNotVaildUrl) return;\n\n    const inputAfterLoading = input.slice(0, cursorPosition[0]) + input.slice(cursorPosition[0] + 15);\n    const { updatedText, cursorToGo } = editByButton({ input: inputAfterLoading, cursorPosition, url: imageUrl });\n\n    setInput(updatedText);\n    setImageUrl('');\n    setCursorToGo(cursorToGo);\n  }, [imageUrl, uploadState]);\n\n  useEffect(() => {\n    insertImageMarkdown();\n  }, [imageUrl, uploadState]);\n\n  return { uploadState, setImageUrl, setUploadState };\n};\n\nexport default useUloadingImg;\n"]},"metadata":{},"sourceType":"module"}