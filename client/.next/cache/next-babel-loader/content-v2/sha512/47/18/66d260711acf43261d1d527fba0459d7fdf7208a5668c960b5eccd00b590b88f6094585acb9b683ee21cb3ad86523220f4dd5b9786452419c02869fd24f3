{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useCursorPoint = inputElem => {\n  const initCursor = [0, 0];\n  const {\n    0: cursorPosition,\n    1: setCursorPosition\n  } = useState(initCursor);\n\n  const updateCusorPoint = () => {\n    var _inputElem$selectionS, _inputElem$selectionE;\n\n    const cursorPointStart = (_inputElem$selectionS = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionStart) !== null && _inputElem$selectionS !== void 0 ? _inputElem$selectionS : 0;\n    const cursorPointEnd = (_inputElem$selectionE = inputElem === null || inputElem === void 0 ? void 0 : inputElem.selectionEnd) !== null && _inputElem$selectionE !== void 0 ? _inputElem$selectionE : 0;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = positionToGo => {\n    const [startPosition, endPosition] = positionToGo;\n    console.log([startPosition, endPosition]);\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.focus();\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.setSelectionRange(startPosition, endPosition);\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.focus();\n    updateCusorPoint();\n  };\n\n  useEffect(() => {\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('click', updateCusorPoint);\n    inputElem === null || inputElem === void 0 ? void 0 : inputElem.addEventListener('keyup', updateCusorPoint);\n  }, [inputElem]);\n  return {\n    cursorPosition,\n    setCursorPosition,\n    updateCusorPoint,\n    moveCursor\n  };\n};\n\nexport default useCursorPoint;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useCursorPoint.tsx"],"names":["useState","useEffect","useCursorPoint","inputElem","initCursor","cursorPosition","setCursorPosition","updateCusorPoint","cursorPointStart","selectionStart","cursorPointEnd","selectionEnd","updatedCursorPosition","moveCursor","positionToGo","startPosition","endPosition","console","log","focus","setSelectionRange","addEventListener"],"mappings":"AAAA,SAAgBA,QAAhB,EAAkCC,SAAlC,QAAmD,OAAnD;;AAUA,MAAMC,cAAc,GAAIC,SAAD,IAA8D;AACnF,QAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCN,QAAQ,CAACI,UAAD,CAApD;;AAEA,QAAMG,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,UAAMC,gBAAgB,4BAAGL,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEM,cAAd,yEAAgC,CAAtD;AACA,UAAMC,cAAc,4BAAGP,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEQ,YAAd,yEAA8B,CAAlD;AACA,UAAMC,qBAAqB,GAAG,CAACJ,gBAAD,EAAmBE,cAAnB,CAA9B;AACAJ,IAAAA,iBAAiB,CAACM,qBAAD,CAAjB;AACD,GALD;;AAOA,QAAMC,UAAU,GAAIC,YAAD,IAA4B;AAC7C,UAAM,CAACC,aAAD,EAAgBC,WAAhB,IAA+BF,YAArC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACH,aAAD,EAAgBC,WAAhB,CAAZ;AACAb,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEgB,KAAX;AACAhB,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEiB,iBAAX,CAA6BL,aAA7B,EAA4CC,WAA5C;AACAb,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEgB,KAAX;AACAZ,IAAAA,gBAAgB;AACjB,GAPD;;AASAN,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEkB,gBAAX,CAA4B,OAA5B,EAAqCd,gBAArC;AACAJ,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEkB,gBAAX,CAA4B,OAA5B,EAAqCd,gBAArC;AACD,GAHQ,EAGN,CAACJ,SAAD,CAHM,CAAT;AAKA,SAAO;AAAEE,IAAAA,cAAF;AAAkBC,IAAAA,iBAAlB;AAAqCC,IAAAA,gBAArC;AAAuDM,IAAAA;AAAvD,GAAP;AACD,CA1BD;;AA4BA,eAAeX,cAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { setStateNumberArr } from '@types';\n\ninterface ICursorHookReturn {\n  cursorPosition: number[];\n  setCursorPosition: setStateNumberArr;\n  updateCusorPoint: () => void;\n  moveCursor: (positionToGo: number[]) => void;\n}\n\nconst useCursorPoint = (inputElem: HTMLTextAreaElement | null): ICursorHookReturn => {\n  const initCursor = [0, 0];\n  const [cursorPosition, setCursorPosition] = useState(initCursor);\n\n  const updateCusorPoint = () => {\n    const cursorPointStart = inputElem?.selectionStart ?? 0;\n    const cursorPointEnd = inputElem?.selectionEnd ?? 0;\n    const updatedCursorPosition = [cursorPointStart, cursorPointEnd];\n    setCursorPosition(updatedCursorPosition);\n  };\n\n  const moveCursor = (positionToGo: number[]) => {\n    const [startPosition, endPosition] = positionToGo;\n    console.log([startPosition, endPosition]);\n    inputElem?.focus();\n    inputElem?.setSelectionRange(startPosition, endPosition);\n    inputElem?.focus();\n    updateCusorPoint();\n  };\n\n  useEffect(() => {\n    inputElem?.addEventListener('click', updateCusorPoint);\n    inputElem?.addEventListener('keyup', updateCusorPoint);\n  }, [inputElem]);\n\n  return { cursorPosition, setCursorPosition, updateCusorPoint, moveCursor };\n};\n\nexport default useCursorPoint;\n"]},"metadata":{},"sourceType":"module"}