{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/molecules/MarkdownPreview/MarkdownPreview.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { MarkdownStyleWrapper, CodeBox, LinkRenderer } from '@molecules/MarkdownStyleWrapper/index';\nimport applyLineBlank from '@utils/applyLineBlank';\nconst StyledPreviewBox = styled(MarkdownStyleWrapper).withConfig({\n  displayName: \"MarkdownPreview__StyledPreviewBox\",\n  componentId: \"sc-14yslkb-0\"\n})([\"width:50%;background-color:\", \";@media (max-width:\", \"){display:none;}\"], () => Theme.PREVIEW_BACK, () => Theme.PC);\n\nfunction MarkdownPreview({\n  input\n}) {\n  const updatedInput = applyLineBlank(input);\n  const renderOptions = {\n    code: CodeBox,\n    link: LinkRenderer\n  };\n  const pluginsOptions = [[gfm, {\n    tableCellPadding: 'true'\n  }]];\n  return /*#__PURE__*/_jsxDEV(StyledPreviewBox, {\n    children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      plugins: pluginsOptions,\n      source: updatedInput,\n      className: \"codeMirror\",\n      renderers: renderOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MarkdownPreview;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/components/molecules/MarkdownPreview/MarkdownPreview.tsx"],"names":["React","styled","Theme","ReactMarkdown","gfm","MarkdownStyleWrapper","CodeBox","LinkRenderer","applyLineBlank","StyledPreviewBox","PREVIEW_BACK","PC","MarkdownPreview","input","updatedInput","renderOptions","code","link","pluginsOptions","tableCellPadding"],"mappings":";;AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,oBAAT,EAA+BC,OAA/B,EAAwCC,YAAxC,QAA4D,uCAA5D;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAMA,MAAMC,gBAAgB,GAAGR,MAAM,CAACI,oBAAD,CAAT;AAAA;AAAA;AAAA,+EAEA,MAAMH,KAAK,CAACQ,YAFZ,EAGC,MAAMR,KAAK,CAACS,EAHb,CAAtB;;AAQA,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAiE;AAC/D,QAAMC,YAAY,GAAGN,cAAc,CAACK,KAAD,CAAnC;AAEA,QAAME,aAAa,GAAG;AAAEC,IAAAA,IAAI,EAAEV,OAAR;AAAiBW,IAAAA,IAAI,EAAEV;AAAvB,GAAtB;AACA,QAAMW,cAKD,GAAG,CAAC,CAACd,GAAD,EAAM;AAAEe,IAAAA,gBAAgB,EAAE;AAApB,GAAN,CAAD,CALR;AAOA,sBACE,QAAC,gBAAD;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,OAAO,EAAED,cAAxB;AAAwC,MAAA,MAAM,EAAEJ,YAAhD;AAA8D,MAAA,SAAS,EAAC,YAAxE;AAAqF,MAAA,SAAS,EAAEC;AAAhG;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AAED,eAAeH,eAAf","sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport Theme from '@theme/index';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { MarkdownStyleWrapper, CodeBox, LinkRenderer } from '@molecules/MarkdownStyleWrapper/index';\nimport applyLineBlank from '@utils/applyLineBlank';\n\ninterface IPreviewProps {\n  input: string;\n}\n\nconst StyledPreviewBox = styled(MarkdownStyleWrapper)`\n  width: 50%;\n  background-color: ${() => Theme.PREVIEW_BACK};\n  @media (max-width: ${() => Theme.PC}) {\n    display: none;\n  }\n`;\n\nfunction MarkdownPreview({ input }: IPreviewProps): ReactElement {\n  const updatedInput = applyLineBlank(input);\n\n  const renderOptions = { code: CodeBox, link: LinkRenderer };\n  const pluginsOptions: (\n    | unified.Attacher<[(gfm.RemarkGfmOptions | undefined)?], unified.Settings>\n    | {\n        tableCellPadding: string;\n      }\n  )[][] = [[gfm, { tableCellPadding: 'true' }]];\n\n  return (\n    <StyledPreviewBox>\n      <ReactMarkdown plugins={pluginsOptions} source={updatedInput} className=\"codeMirror\" renderers={renderOptions} />\n    </StyledPreviewBox>\n  );\n}\n\nexport default MarkdownPreview;\n"]},"metadata":{},"sourceType":"module"}