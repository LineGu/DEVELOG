{"ast":null,"code":"import { useCallback, useRef, useEffect, useState } from 'react';\n\nconst useScroll = () => {\n  const initialHeight = 1000;\n  const {\n    0: scroll,\n    1: setScroll\n  } = useState(0);\n  const screenHeight = useRef(initialHeight);\n  const notifyLocation = useCallback(() => {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n\n  const applyWindowHeight = () => {\n    screenHeight.current = window.innerHeight;\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', notifyLocation);\n    document.addEventListener('resize', applyWindowHeight);\n    applyWindowHeight();\n    return () => {\n      document.removeEventListener('scroll', notifyLocation);\n      document.removeEventListener('resize', applyWindowHeight);\n    };\n  }, []);\n  const percentagePosition = scroll / screenHeight.current * 100;\n  return {\n    position: percentagePosition\n  };\n};\n\nexport default useScroll;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/hooks/useScroll.ts"],"names":["useCallback","useRef","useEffect","useState","useScroll","initialHeight","scroll","setScroll","screenHeight","notifyLocation","document","documentElement","scrollTop","applyWindowHeight","current","window","innerHeight","addEventListener","removeEventListener","percentagePosition","position"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;;AAMA,MAAMC,SAAgC,GAAG,MAAM;AAC7C,QAAMC,aAAa,GAAG,IAAtB;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAAS,CAAT,CAApC;AACA,QAAMK,YAAY,GAAGP,MAAM,CAASI,aAAT,CAA3B;AAEA,QAAMI,cAAc,GAAGT,WAAW,CAAC,MAAM;AACvCO,IAAAA,SAAS,CAACG,QAAQ,CAACC,eAAT,CAAyBC,SAA1B,CAAT;AACD,GAFiC,EAE/B,CAACN,MAAD,CAF+B,CAAlC;;AAIA,QAAMO,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,YAAY,CAACM,OAAb,GAAuBC,MAAM,CAACC,WAA9B;AACD,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACO,gBAAT,CAA0B,QAA1B,EAAoCR,cAApC;AACAC,IAAAA,QAAQ,CAACO,gBAAT,CAA0B,QAA1B,EAAoCJ,iBAApC;AACAA,IAAAA,iBAAiB;AACjB,WAAO,MAAM;AACXH,MAAAA,QAAQ,CAACQ,mBAAT,CAA6B,QAA7B,EAAuCT,cAAvC;AACAC,MAAAA,QAAQ,CAACQ,mBAAT,CAA6B,QAA7B,EAAuCL,iBAAvC;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT;AAUA,QAAMM,kBAAkB,GAAIb,MAAM,GAAGE,YAAY,CAACM,OAAvB,GAAkC,GAA7D;AAEA,SAAO;AAAEM,IAAAA,QAAQ,EAAED;AAAZ,GAAP;AACD,CA1BD;;AA4BA,eAAef,SAAf","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\ninterface IUseScrollProps {\n  position: number;\n}\n\nconst useScroll: () => IUseScrollProps = () => {\n  const initialHeight = 1000;\n  const [scroll, setScroll] = useState<number>(0);\n  const screenHeight = useRef<number>(initialHeight);\n\n  const notifyLocation = useCallback(() => {\n    setScroll(document.documentElement.scrollTop);\n  }, [scroll]);\n\n  const applyWindowHeight = () => {\n    screenHeight.current = window.innerHeight;\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', notifyLocation);\n    document.addEventListener('resize', applyWindowHeight);\n    applyWindowHeight();\n    return () => {\n      document.removeEventListener('scroll', notifyLocation);\n      document.removeEventListener('resize', applyWindowHeight);\n    };\n  }, []);\n\n  const percentagePosition = (scroll / screenHeight.current) * 100;\n\n  return { position: percentagePosition };\n};\n\nexport default useScroll;\n"]},"metadata":{},"sourceType":"module"}