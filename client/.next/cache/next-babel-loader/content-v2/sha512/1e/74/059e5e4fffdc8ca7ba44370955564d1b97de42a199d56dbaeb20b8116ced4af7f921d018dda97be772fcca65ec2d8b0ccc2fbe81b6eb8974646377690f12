{"ast":null,"code":"var findFrontOfLine = function findFrontOfLine(string, cursorPosition) {\n  console.log(cursorPosition);\n  var findingIndex = cursorPosition[0];\n  var isFindFront = true;\n\n  while (isFindFront) {\n    if (string[findingIndex] === '\\n') {\n      isFindFront = false;\n      findingIndex += 1;\n      break;\n    }\n\n    if (findingIndex === 0) {\n      break;\n    }\n\n    findingIndex -= 1;\n  }\n\n  return findingIndex;\n};\n\nvar editInputText = function editInputText(_ref) {\n  var event = _ref.event,\n      input = _ref.input,\n      setInput = _ref.setInput,\n      cursorPosition = _ref.cursorPosition;\n  var iconClicked = event.currentTarget.className.baseVal;\n  var positionToInsert = findFrontOfLine(input, cursorPosition);\n  var insertText = '';\n\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      break;\n\n    default:\n      break;\n  }\n\n  var newInput = input.slice(0, positionToInsert) + insertText + input.slice(positionToInsert);\n  setInput(newInput);\n};\n\nexport default editInputText;","map":{"version":3,"sources":["/Users/hyungu/Desktop/front-dev/projects/develog/client/src/utils/editInputText.ts"],"names":["findFrontOfLine","string","cursorPosition","console","log","findingIndex","isFindFront","editInputText","event","input","setInput","iconClicked","currentTarget","className","baseVal","positionToInsert","insertText","newInput","slice"],"mappings":"AASA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAAiBC,cAAjB,EAAsD;AAC5EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACA,MAAIG,YAAY,GAAGH,cAAc,CAAC,CAAD,CAAjC;AACA,MAAII,WAAW,GAAG,IAAlB;;AACA,SAAOA,WAAP,EAAoB;AAClB,QAAIL,MAAM,CAACI,YAAD,CAAN,KAAyB,IAA7B,EAAmC;AACjCC,MAAAA,WAAW,GAAG,KAAd;AACAD,MAAAA,YAAY,IAAI,CAAhB;AACA;AACD;;AACD,QAAIA,YAAY,KAAK,CAArB,EAAwB;AACtB;AACD;;AACDA,IAAAA,YAAY,IAAI,CAAhB;AACD;;AACD,SAAOA,YAAP;AACD,CAhBD;;AAkBA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,OAAsE;AAAA,MAAnEC,KAAmE,QAAnEA,KAAmE;AAAA,MAA5DC,KAA4D,QAA5DA,KAA4D;AAAA,MAArDC,QAAqD,QAArDA,QAAqD;AAAA,MAA3CR,cAA2C,QAA3CA,cAA2C;AAC1F,MAAMS,WAAW,GAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAA8BC,OAAlD;AACA,MAAMC,gBAAgB,GAAGf,eAAe,CAACS,KAAD,EAAQP,cAAR,CAAxC;AACA,MAAIc,UAAU,GAAG,EAAjB;;AACA,UAAQL,WAAR;AACE,SAAK,IAAL;AACEK,MAAAA,UAAU,GAAG,IAAb;AACA;;AAEF,SAAK,IAAL;AACEA,MAAAA,UAAU,GAAG,KAAb;AACA;;AAEF,SAAK,IAAL;AACEA,MAAAA,UAAU,GAAG,MAAb;AACA;;AAEF,SAAK,MAAL;AACEA,MAAAA,UAAU,GAAG,SAAb;AACA;;AAEF,SAAK,QAAL;AACEA,MAAAA,UAAU,GAAG,OAAb;AACA;;AAEF,SAAK,MAAL;AACEA,MAAAA,UAAU,GAAG,aAAb;AACA;;AAEF,SAAK,OAAL;AACEA,MAAAA,UAAU,GAAG,IAAb;AACA;;AAEF;AACE;AA9BJ;;AAgCA,MAAMC,QAAQ,GAAGR,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAeH,gBAAf,IAAmCC,UAAnC,GAAgDP,KAAK,CAACS,KAAN,CAAYH,gBAAZ,CAAjE;AACAL,EAAAA,QAAQ,CAACO,QAAD,CAAR;AACD,CAtCD;;AAwCA,eAAeV,aAAf","sourcesContent":["import { Dispatch, SetStateAction } from 'react';\n\ninterface IEditTextProps {\n  event: React.MouseEvent<SVGElement, MouseEvent>;\n  input: string;\n  setInput: Dispatch<SetStateAction<string>>;\n  cursorPosition: number[];\n}\n\nconst findFrontOfLine = (string: string, cursorPosition: number[]): number => {\n  console.log(cursorPosition);\n  let findingIndex = cursorPosition[0];\n  let isFindFront = true;\n  while (isFindFront) {\n    if (string[findingIndex] === '\\n') {\n      isFindFront = false;\n      findingIndex += 1;\n      break;\n    }\n    if (findingIndex === 0) {\n      break;\n    }\n    findingIndex -= 1;\n  }\n  return findingIndex;\n};\n\nconst editInputText = ({ event, input, setInput, cursorPosition }: IEditTextProps): void => {\n  const iconClicked = event.currentTarget.className.baseVal;\n  const positionToInsert = findFrontOfLine(input, cursorPosition);\n  let insertText = '';\n  switch (iconClicked) {\n    case 'h1':\n      insertText = '# ';\n      break;\n\n    case 'h2':\n      insertText = '## ';\n      break;\n\n    case 'h3':\n      insertText = '### ';\n      break;\n\n    case 'bold':\n      insertText = '**텍스트**';\n      break;\n\n    case 'italic':\n      insertText = '_텍스트_';\n      break;\n\n    case 'link':\n      insertText = '[링크텍스트](링크)';\n      break;\n\n    case 'quote':\n      insertText = '> ';\n      break;\n\n    default:\n      break;\n  }\n  const newInput = input.slice(0, positionToInsert) + insertText + input.slice(positionToInsert);\n  setInput(newInput);\n};\n\nexport default editInputText;\n"]},"metadata":{},"sourceType":"module"}